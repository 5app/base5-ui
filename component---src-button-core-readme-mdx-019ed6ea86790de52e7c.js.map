{"version":3,"sources":["webpack:///../src/ButtonCore/index.js","webpack:///../node_modules/classnames/index.js","webpack:///../src/ButtonCore/routerLinkForReadme.js","webpack:///../src/ButtonCore/README.mdx"],"names":["Clickable","styled","ButtonCore","forwardRef","as","props","type","isActive","isDisabledProp","disabled","className","otherProps","isDisabled","classes","classNames","isButton","defaultType","isDisabledLink","ref","aria-disabled","hasOwn","hasOwnProperty","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","Link","to","children","href","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","RouterLink","of","isMDXComponent"],"mappings":"ilCAOA,IAAMA,EAAYC,IAAH,YAkCTC,EAAaC,sBAAW,cAAiB,IAE7CC,EAOGC,EATyC,GAG5CC,EAMGD,EATyC,KAI5CE,EAKGF,EATyC,SAKhCG,EAITH,EATyC,WAM5CI,EAGGJ,EATyC,SAO5CK,EAEGL,EATyC,UAQzCM,E,oIARyC,iEAWvCC,EAAaJ,GAAnB,EAEMK,EAAUC,IAAWJ,EAAW,CACrC,YADqC,EAErC,cAAeE,IAGVG,EAAN,WAAiBX,EAEXY,GAAeV,GAAD,IAApB,EAMMW,GAAkBF,GAAxB,EAEA,OACC,sBAECG,IAFD,EAGCd,GAAIa,EAAc,OAHnB,EAICX,KAJD,EAKCG,SAAUM,GALX,EAMCI,gBAAeJ,iBANhB,EAOCL,UAAWG,QAKdX,2BAEAA,eAA0B,CACzBE,GAAI,UA0CL,W,2aC/HA,QAAQ,QASR,WACE,aAEA,IAAIgB,EAAS,GAAGC,eAEhB,SAASP,IAGP,IAFA,IAAID,EAAU,GAELS,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1Bb,EAAQc,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC3C,IAAIM,EAAQhB,EAAWiB,MAAM,KAAMN,GAE/BK,GACFjB,EAAQc,KAAKG,QAEV,GAAgB,WAAZJ,EACT,IAAK,IAAIM,KAAOP,EACVL,EAAOa,KAAKR,EAAKO,IAAQP,EAAIO,IAC/BnB,EAAQc,KAAKK,IAMrB,OAAOnB,EAAQqB,KAAK,KAGeC,EAAOC,SAC1CtB,EAAoB,QAAIA,EACxBqB,EAAOC,QAAUtB,QAKhB,KAFwB,EAAF,WACrB,OAAOA,GACR,QAFoB,OAEpB,aAxCL,I,kXCPA,IAAMuB,EAAO,SAAC,GAAD,IAAEC,EAAF,KAAMC,EAAN,WAAmB5B,E,oIAAnB,6BACZ,wBAAmB6B,KAAMF,IADb,IAMb,I,osBCCO,IAAMG,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGzC,E,oIACF,mBACD,OAAO,YAACsC,EAAD,KAAeD,EAAiBrC,EAAhC,CAAuCyC,WAAYA,EAAYC,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,iIACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0KAAiLC,QAAS,CAC3N7C,QACAuC,kBACAO,eACAC,UACAC,aACAnD,gBACC6C,QAAQ,cACd,YAAC7C,EAAA,EAAD,CAAY6C,QAAQ,cAApB,UACA,uBACA,YAAC7C,EAAA,EAAD,CAAYE,GAAG,IAAIoC,KAAK,IAAIO,QAAQ,cAApC,QAGA,uBACA,YAAC7C,EAAA,EAAD,CAAYE,GAAIiD,EAAYf,GAAG,IAAIS,QAAQ,cAA3C,gBAIG,YAAC,IAAD,CAAOO,GAAIpD,IAAY6C,QAAQ,W,kMAKnCF,EAAWU,gBAAiB","file":"component---src-button-core-readme-mdx-019ed6ea86790de52e7c.js","sourcesContent":["import React, {forwardRef} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\n\nimport 'focus-visible';\n\nconst Clickable = styled.button`\n\tdisplay: inline-block;\n\tmargin: 0;\n\tpadding: 0;\n\tvertical-align: middle;\n\n\tfont: inherit;\n\ttext-decoration: none;\n\ttext-align: inherit;\n\n\tcolor: inherit;\n\tbackground-color: transparent;\n\tborder: none;\n\tborder-radius: 0;\n\tcursor: pointer;\n\n\tappearance: none;\n\n\t&:focus:not(.focus-visible) {\n\t\toutline: none;\n\t}\n\n\t&.focus-visible {\n\t\toutline: 3px solid currentColor;\n\t\toutline-offset: 3px;\n\t}\n\n\t/* Normalise inner button spacing in Gecko browsers */\n\t&::-moz-focus-inner {\n\t\tpadding: 0;\n\t\tborder: 0;\n\t}\n`;\n\nconst ButtonCore = forwardRef((props, ref) => {\n\tconst {\n\t\tas,\n\t\ttype,\n\t\tisActive,\n\t\tisDisabled: isDisabledProp,\n\t\tdisabled,\n\t\tclassName,\n\t\t...otherProps\n\t} = props;\n\n\tconst isDisabled = isDisabledProp || disabled;\n\n\tconst classes = classNames(className, {\n\t\t'is-active': isActive,\n\t\t'is-disabled': isDisabled,\n\t});\n\n\tconst isButton = as === 'button';\n\n\tconst defaultType = !type && isButton ? as : type;\n\n\t/**\n\t * There's no such thing as a disabled anchor tag in HTML,\n\t * so if one should appear \"disabled\", we render it as a `span`\n\t */\n\tconst isDisabledLink = !isButton && isDisabled;\n\n\treturn (\n\t\t<Clickable\n\t\t\t{...otherProps}\n\t\t\tref={ref}\n\t\t\tas={isDisabledLink ? 'span' : as}\n\t\t\ttype={defaultType}\n\t\t\tdisabled={isButton && disabled}\n\t\t\taria-disabled={isButton && isDisabled ? 'true' : undefined}\n\t\t\tclassName={classes}\n\t\t/>\n\t);\n});\n\nButtonCore.displayName = 'ButtonCore';\n\nButtonCore.defaultProps = {\n\tas: 'button',\n};\n\nButtonCore.propTypes = {\n\t/**\n\t * Change the rendered underlying component.\n\t */\n\tas: PropTypes.elementType,\n\t/**\n\t * When as === \"button\", this defaults to \"button\" so you don't have to\n\t * remember to set it yourself (as inconveniently, buttons default to\n\t * type \"submit\")\n\t */\n\ttype: PropTypes.string,\n\t/**\n\t * When present, this adds the className `is-active` to the rendered element.\n\t * Useful so you can use this class as the only styling hook in combination with\n\t * react-router's `NavLink` and its `activeClassName` prop.\n\t * Note: This is different from react-router 5's isActive prop.\n\t * This conflict should be resolved at some point but would be a breaking change.\n\t */\n\tisActive: PropTypes.bool,\n\t/**\n\t * When present, this adds the className `is-disabled` to the rendered element, and\n\t * the attribute `aria-disabled` when the element is a button.\n\t *\n\t * This is useful so you can use this class as the only styling hook without having to rely\n\t * on the `disabled` or `aria-disabled` attributes which are only available on button elements.\n\t *\n\t * Why are we using `aria-disabled=\"true\"` instead of `disabled`?\n\t * To screen reader users, disabled buttons are completely unperceivable, while those with the\n\t * aria attribute will still be announced and labelled as disabled.\n\t */\n\tisDisabled: PropTypes.bool,\n\t/**\n\t * An alias for the `isDisabled` prop, for alignment with the native html attribute.\n\t * Only use this if you for some reason really want to hide the element to screen reader users.\n\t */\n\tdisabled: PropTypes.bool,\n};\n\n// @component\nexport default ButtonCore;\n","require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from 'react';\n\nconst Link = ({to, children, ...otherProps}) => (\n\t<a {...otherProps} href={to}>\n\t\t{children}\n\t</a>\n);\n\nexport default Link;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport RouterLink from './routerLinkForReadme';\nimport ButtonCore from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"buttoncore\"\n    }}>{`ButtonCore`}</h1>\n    <p>{`Base component with normalised & neutral styling for building clickable elements like buttons and links.`}</p>\n    <Playground __position={0} __code={'<ButtonCore>Button</ButtonCore>\\n<br />\\n<ButtonCore as=\\\"a\\\" href=\\\"#\\\">\\n  Link\\n</ButtonCore>\\n<br />\\n<ButtonCore as={RouterLink} to=\\\"/\\\">\\n  Router link\\n</ButtonCore>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      RouterLink,\n      ButtonCore\n    }} mdxType=\"Playground\">\n\t<ButtonCore mdxType=\"ButtonCore\">Button</ButtonCore>\n\t<br />\n\t<ButtonCore as=\"a\" href=\"#\" mdxType=\"ButtonCore\">\n\t\tLink\n\t</ButtonCore>\n\t<br />\n\t<ButtonCore as={RouterLink} to=\"/\" mdxType=\"ButtonCore\">\n\t\tRouter link\n\t</ButtonCore>\n    </Playground>\n    <Props of={ButtonCore} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}