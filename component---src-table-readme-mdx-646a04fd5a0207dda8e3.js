(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{D1Cl:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return h})),n.d(t,"default",(function(){return y}));var a=n("Fcif"),l=n("+I+c"),o=(n("mXGw"),n("/FXl")),i=n("TjRS"),r=n("ZFoC"),m=n("7xDH"),b=n("2mC/"),d=n("CNeP"),c=n("Wuz6"),p=n("Q+Gn"),s=n("FZFq"),u=n("k1eI"),h=(n("aD51"),{});void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Table/README.mdx"}});var j={_frontmatter:h},O=i.a;function y(e){var t,n,y,C,T=e.components,f=Object(l.a)(e,["components"]);return Object(o.b)(O,Object(a.a)({},j,f,{components:T,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"table"},"Table"),Object(o.b)("p",null,"A table component with a sticky header row and clickable headers for sorting."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"By default, all columns have an equal width"),Object(o.b)("li",{parentName:"ul"},"Control the width of columns by specifying a fixed or percentage width"),Object(o.b)("li",{parentName:"ul"},"Define a breakpoint under which a list-like ",Object(o.b)("strong",{parentName:"li"},"mobile view"),' will be enabled (by default this is "xs")'),Object(o.b)("li",{parentName:"ul"},"Columns can be defined in JSX using the ",Object(o.b)("inlineCode",{parentName:"li"},"Column")," component, or using the ",Object(o.b)("inlineCode",{parentName:"li"},"columns")," prop")),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("h3",{id:"simple-example-with-jsx-column-config"},"Simple example with JSX column config"),Object(o.b)("p",null,"The table data is provided as an array of objects. The ",Object(o.b)("inlineCode",{parentName:"p"},"title"),' given to each column will be used to select a field from the data row (i.e. the "Email" column will get its data from ',Object(o.b)("inlineCode",{parentName:"p"},"item.email"),"). If you want to specify a field different from the title, you can do so either using the ",Object(o.b)("inlineCode",{parentName:"p"},"name")," prop (which must be a simple string like ",Object(o.b)("inlineCode",{parentName:"p"},"title"),"), or using the ",Object(o.b)("inlineCode",{parentName:"p"},"cellRenderer"),' prop for more complex cases (see "Country" column below).'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cellRenderer")," is also used to generally customise the rendering of a table cell."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Table data={dummyData.slice(0, 4)} itemKey="name">\n    <Column title="Name" />\n    <Column title="Country" name="region" />\n    <Column title="Domain" cellRenderer={item => item.email.split(\'@\')[1]} />\n    <Column title="Type" />\n    <Column title="Time" />\n</Table>\n')),Object(o.b)(r.c,{__position:0,__code:'<Table data={dummyData.slice(0, 4)} itemKey="name">\n  <Column title="Name" />\n  <Column title="Country" name="region" />\n  <Column\n    title="Email domain"\n    cellRenderer={item => item.email.split(\'@\')[1]}\n  />\n  <Column title="Type" />\n  <Column title="Time" />\n</Table>',__scope:(t={props:f,DefaultLayout:i.a,Playground:r.c,Props:r.d,Box:m.a,Icon:b.a,Table:d.a,Column:c.a,CenterContent:p.a,dummyData:s.a,DemoTableState:u.a},t.DefaultLayout=i.a,t._frontmatter=h,t),mdxType:"Playground"},Object(o.b)(d.a,{data:s.a.slice(0,4),itemKey:"name",mdxType:"Table"},Object(o.b)(c.a,{title:"Name",mdxType:"Column"}),Object(o.b)(c.a,{title:"Country",name:"region",mdxType:"Column"}),Object(o.b)(c.a,{title:"Email domain",cellRenderer:function(e){return e.email.split("@")[1]},mdxType:"Column"}),Object(o.b)(c.a,{title:"Type",mdxType:"Column"}),Object(o.b)(c.a,{title:"Time",mdxType:"Column"}))),Object(o.b)("h3",{id:"simple-example-with-object-column-config"},"Simple example with object column config"),Object(o.b)("p",null,"You can also define your columns as an array of objects, if you prefer:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {title: 'Name'},\n        {title: 'Country', name: 'region'},\n        {title: 'Email domain', cellRenderer: item => item.email.split('@')[1]},\n        {title: 'Type'},\n        {title: 'Time'},\n    ]}\n/>\n")),Object(o.b)("h3",{id:"customisation-example"},"Customisation example"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Wrapped in a box with rounded corners (not part of component API)"),Object(o.b)("li",{parentName:"ul"},"Use ",Object(o.b)("inlineCode",{parentName:"li"},"cellRenderer")," to easily customise the way a cell's content is rendered"),Object(o.b)("li",{parentName:"ul"},"Use the ",Object(o.b)("inlineCode",{parentName:"li"},"rowHeader")," prop to specify which column will be used as the header in the mobile view (only needs to be specified if it's not the first column)"),Object(o.b)("li",{parentName:"ul"},"Use fixed or percentage ",Object(o.b)("inlineCode",{parentName:"li"},"width")," values to customise column sizes"),Object(o.b)("li",{parentName:"ul"},"Use the ",Object(o.b)("inlineCode",{parentName:"li"},"shadedHeader")," prop for a shaded table header background"),Object(o.b)("li",{parentName:"ul"},"Use the ",Object(o.b)("inlineCode",{parentName:"li"},"subtitle")," prop to add a subtitle to a column header"),Object(o.b)("li",{parentName:"ul"},"Use the ",Object(o.b)("inlineCode",{parentName:"li"},"pl")," or ",Object(o.b)("inlineCode",{parentName:"li"},"pr")," props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules"),Object(o.b)("li",{parentName:"ul"},"Enable sortable columns by adding ",Object(o.b)("inlineCode",{parentName:"li"},"<Column sortable />")," props and passing ",Object(o.b)("inlineCode",{parentName:"li"},"sort")," and ",Object(o.b)("inlineCode",{parentName:"li"},"onRequestSort")," props to ",Object(o.b)("inlineCode",{parentName:"li"},"Table"))),Object(o.b)(r.c,{__position:1,__code:'<Box border="thin" borderRadius="large">\n  <DemoTableState data={dummyData.slice(4, 8)}>\n    {({ data, sort: { column, order }, handleSort }) => (\n      <Table\n        shadedHeader\n        data={data}\n        itemKey="name"\n        rowHeader="Name"\n        sort={{\n          column,\n          order,\n        }}\n        onRequestSort={handleSort}\n        pl="xl"\n        pr={20}\n      >\n        <Column\n          title="Role"\n          width={75}\n          cellRenderer={item => (\n            <Icon\n              name={item.role === \'manager\' ? \'star\' : \'user\'}\n              aria-label={item.role === \'manager\' ? \'Manager\' : \'User\'}\n            />\n          )}\n        />\n        <Column\n          sortable\n          title="Name"\n          width="40%"\n          cellRenderer={item => <strong>{item.name}</strong>}\n        />\n        <Column sortable title="Type" subtitle="Random characters" />\n        <Column sortable title="Time" defaultOrder="desc" />\n      </Table>\n    )}\n  </DemoTableState>\n</Box>',__scope:(n={props:f,DefaultLayout:i.a,Playground:r.c,Props:r.d,Box:m.a,Icon:b.a,Table:d.a,Column:c.a,CenterContent:p.a,dummyData:s.a,DemoTableState:u.a},n.DefaultLayout=i.a,n._frontmatter=h,n),mdxType:"Playground"},Object(o.b)(m.a,{border:"thin",borderRadius:"large",mdxType:"Box"},Object(o.b)(u.a,{data:s.a.slice(4,8),mdxType:"DemoTableState"},(function(e){var t=e.data,n=e.sort,a=n.column,l=n.order,i=e.handleSort;return Object(o.b)(d.a,{shadedHeader:!0,data:t,itemKey:"name",rowHeader:"Name",sort:{column:a,order:l},onRequestSort:i,pl:"xl",pr:20,mdxType:"Table"},Object(o.b)(c.a,{title:"Role",width:75,cellRenderer:function(e){return Object(o.b)(b.a,{name:"manager"===e.role?"star":"user","aria-label":"manager"===e.role?"Manager":"User",mdxType:"Icon"})},mdxType:"Column"}),Object(o.b)(c.a,{sortable:!0,title:"Name",width:"40%",cellRenderer:function(e){return Object(o.b)("strong",null,e.name)},mdxType:"Column"}),Object(o.b)(c.a,{sortable:!0,title:"Type",subtitle:"Random characters",mdxType:"Column"}),Object(o.b)(c.a,{sortable:!0,title:"Time",defaultOrder:"desc",mdxType:"Column"}))})))),Object(o.b)("h3",{id:"sorting"},"Sorting"),Object(o.b)("p",null,"To add clickable column headers to a table, first add the ",Object(o.b)("inlineCode",{parentName:"p"},"sortable")," prop to any columns that you want to be sortable."),Object(o.b)("p",null,"Then add a ",Object(o.b)("inlineCode",{parentName:"p"},"sort")," prop to ",Object(o.b)("inlineCode",{parentName:"p"},"<Table />")," that defines the current sort order via an object with the keys ",Object(o.b)("inlineCode",{parentName:"p"},"order")," ('asc' || 'desc') and ",Object(o.b)("inlineCode",{parentName:"p"},"column")," (",Object(o.b)("inlineCode",{parentName:"p"},"name")," of the sorted column). If a column wasn't given a ",Object(o.b)("inlineCode",{parentName:"p"},"name")," prop, its ",Object(o.b)("inlineCode",{parentName:"p"},"title")," will be used instead."),Object(o.b)("p",null,"Finally you'll need to tell the Table what to do when a header is clicked. That's what the ",Object(o.b)("inlineCode",{parentName:"p"},"onRequestSort")," prop is for â€“ it's called with an object in the same shape as the ",Object(o.b)("inlineCode",{parentName:"p"},"sort")," prop to define the desired target sorting."),Object(o.b)("h3",{id:"responsive-example"},"Responsive example"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Mobile view:")," The table changes to a more list-like view when the screen width shrinks below the breakpoint defined using the ",Object(o.b)("inlineCode",{parentName:"li"},"mobileViewBreakpoint")," prop."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Hiding columns:")," You can hide columns below a certain breakpoint using the ",Object(o.b)("inlineCode",{parentName:"li"},"hideBelowBreakpoint")," prop. Columns hidden this way will become visible again in the mobile view.")),Object(o.b)("p",null,"The table below uses both modes â€“ on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens."),Object(o.b)(r.c,{__position:2,__code:'<Table\n  mobileViewBreakpoint="xxs"\n  data={dummyData.slice(8, 12)}\n  itemKey="name"\n  rowHeader="Name"\n>\n  <Column\n    title="Role"\n    width={60}\n    cellRenderer={item => (\n      <Icon name={item.role === \'manager\' ? \'star\' : \'user\'} />\n    )}\n  />\n  <Column\n    title="Name"\n    width="40%"\n    cellRenderer={item => <strong>{item.name}</strong>}\n  />\n  <Column title="Region" hideBelowBreakpoint="m" />\n  <Column title="Type" />\n  <Column title="Time" />\n</Table>',__scope:(y={props:f,DefaultLayout:i.a,Playground:r.c,Props:r.d,Box:m.a,Icon:b.a,Table:d.a,Column:c.a,CenterContent:p.a,dummyData:s.a,DemoTableState:u.a},y.DefaultLayout=i.a,y._frontmatter=h,y),mdxType:"Playground"},Object(o.b)(d.a,{mobileViewBreakpoint:"xxs",data:s.a.slice(8,12),itemKey:"name",rowHeader:"Name",mdxType:"Table"},Object(o.b)(c.a,{title:"Role",width:60,cellRenderer:function(e){return Object(o.b)(b.a,{name:"manager"===e.role?"star":"user",mdxType:"Icon"})},mdxType:"Column"}),Object(o.b)(c.a,{title:"Name",width:"40%",cellRenderer:function(e){return Object(o.b)("strong",null,e.name)},mdxType:"Column"}),Object(o.b)(c.a,{title:"Region",hideBelowBreakpoint:"m",mdxType:"Column"}),Object(o.b)(c.a,{title:"Type",mdxType:"Column"}),Object(o.b)(c.a,{title:"Time",mdxType:"Column"}))),Object(o.b)("h3",{id:"empty-state"},"Empty state"),Object(o.b)("p",null,"When no ",Object(o.b)("inlineCode",{parentName:"p"},"data")," array is provided, or when its length is ",Object(o.b)("inlineCode",{parentName:"p"},"0"),', the message "No data to display" will be shown below the column headers. You can customise this message using the ',Object(o.b)("inlineCode",{parentName:"p"},"emptyContent")," prop."),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"CenterContent")," component to make the content appear centred and take up a minimum height."),Object(o.b)(r.c,{__position:3,__code:'<Table\n  emptyContent={<CenterContent height={180}>Here be dragons</CenterContent>}\n  rowHeader="Name"\n>\n  <Column title="Role" width={60} />\n  <Column title="Name" width="40%" />\n  <Column title="Region" hideBelowBreakpoint="m" />\n  <Column title="Type" hideBelowBreakpoint="xs" />\n  <Column title="Time" />\n</Table>',__scope:(C={props:f,DefaultLayout:i.a,Playground:r.c,Props:r.d,Box:m.a,Icon:b.a,Table:d.a,Column:c.a,CenterContent:p.a,dummyData:s.a,DemoTableState:u.a},C.DefaultLayout=i.a,C._frontmatter=h,C),mdxType:"Playground"},Object(o.b)(d.a,{emptyContent:Object(o.b)(p.a,{height:180,mdxType:"CenterContent"},"Here be dragons"),rowHeader:"Name",mdxType:"Table"},Object(o.b)(c.a,{title:"Role",width:60,mdxType:"Column"}),Object(o.b)(c.a,{title:"Name",width:"40%",mdxType:"Column"}),Object(o.b)(c.a,{title:"Region",hideBelowBreakpoint:"m",mdxType:"Column"}),Object(o.b)(c.a,{title:"Type",hideBelowBreakpoint:"xs",mdxType:"Column"}),Object(o.b)(c.a,{title:"Time",mdxType:"Column"}))),Object(o.b)("h2",{id:"table-props"},"Table props"),Object(o.b)(r.d,{of:d.a,mdxType:"Props"}),Object(o.b)("h2",{id:"column-props"},"Column props"),Object(o.b)(r.d,{of:c.a,mdxType:"Props"}))}void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!y.hasOwnProperty("__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Table/README.mdx"}}),y.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-table-readme-mdx-646a04fd5a0207dda8e3.js.map