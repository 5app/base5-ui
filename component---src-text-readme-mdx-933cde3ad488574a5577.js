(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"1RoB":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return m}));var l=n("Fcif"),i=n("+I+c"),a=(n("mXGw"),n("/FXl")),o=n("TjRS"),s=n("ZFoC"),p=n("VaD+"),r=(n("aD51"),{});void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Text/README.mdx"}});var d={_frontmatter:r},b=o.a;function m(e){var t,n=e.components,m=Object(i.a)(e,["components"]);return Object(a.b)(b,Object(l.a)({},d,m,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"text"},"Text"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Text")," is a helper component for formatting text. It supports styling props for the following styles:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Text styles (bold, dimmed, fontSize, lineHeight, textAlign, overflow, caps)"),Object(a.b)("li",{parentName:"ul"},"Display (block, inline, inline-block)"),Object(a.b)("li",{parentName:"ul"},"Margin and padding")),Object(a.b)("p",null,"In addition to the ",Object(a.b)("inlineCode",{parentName:"p"},"fontSize")," and ",Object(a.b)("inlineCode",{parentName:"p"},"textAlign")," props, this component also supports the shorthands ",Object(a.b)("inlineCode",{parentName:"p"},"size")," and ",Object(a.b)("inlineCode",{parentName:"p"},"align"),"."),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)(s.c,{__position:0,__code:'<Text as="h1" size="xl" lineHeight={1.3}>\n  Extra-large text with a smaller line height\n</Text>\n<Text dimmed as="p">\n  A dimmed subtitle with a{\' \'}\n  <Text bold dimmed={false}>\n    non-dimmed segment\n  </Text>\n</Text>\n<Text bold as="p" mt="m">\n  Bold text with some nested <Text bold={false}>non-bold</Text> text\n</Text>\n<Text as="p" caps="all" mt="m">\n  this text is all-lowercase, but displays in uppercase\n</Text>\n<Text as="p" caps="first">\n  this text is all-lowercase, but is displayed in title-case{\' \'}\n  <Text caps="none">(unless overwritten)</Text>\n</Text>\n<Text as="p" overflow="wrap" mt="m">\n  OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.\n</Text>\n<Text display="block" overflow="ellipsis" mt="m">\n  An overflow value of \'ellipsis\' will prevent line-breaks and cut off\n  overflowing text with an ellipsis (…). This only works with "block-level"\n  elements (e.g. div, p). If you want to use it with a non-block element like\n  `span`, set the `display` prop to \'block\'.\n</Text>',__scope:(t={props:m,DefaultLayout:o.a,Playground:s.c,Props:s.d,Text:p.a},t.DefaultLayout=o.a,t._frontmatter=r,t),mdxType:"Playground"},Object(a.b)(p.a,{as:"h1",size:"xl",lineHeight:1.3,mdxType:"Text"},"Extra-large text with a smaller line height"),Object(a.b)(p.a,{dimmed:!0,as:"p",mdxType:"Text"},"A dimmed subtitle with a"," ",Object(a.b)(p.a,{bold:!0,dimmed:!1,mdxType:"Text"},"non-dimmed segment")),Object(a.b)(p.a,{bold:!0,as:"p",mt:"m",mdxType:"Text"},"Bold text with some nested ",Object(a.b)(p.a,{bold:!1,mdxType:"Text"},"non-bold")," text"),Object(a.b)(p.a,{as:"p",caps:"all",mt:"m",mdxType:"Text"},"this text is all-lowercase, but displays in uppercase"),Object(a.b)(p.a,{as:"p",caps:"first",mdxType:"Text"},"this text is all-lowercase, but is displayed in title-case"," ",Object(a.b)(p.a,{caps:"none",mdxType:"Text"},"(unless overwritten)")),Object(a.b)(p.a,{as:"p",overflow:"wrap",mt:"m",mdxType:"Text"},"OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood."),Object(a.b)(p.a,{display:"block",overflow:"ellipsis",mt:"m",mdxType:"Text"},"An overflow value of 'ellipsis' will prevent line-breaks and cut off overflowing text with an ellipsis (…). This only works with \"block-level\" elements (e.g. div, p). If you want to use it with a non-block element like `span`, set the `display` prop to 'block'.")),Object(a.b)("h2",{id:"props"},"Props"),Object(a.b)(s.d,{of:p.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Text/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-text-readme-mdx-933cde3ad488574a5577.js.map