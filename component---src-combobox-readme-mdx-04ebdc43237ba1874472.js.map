{"version":3,"sources":["webpack:///../src/Combobox/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Combobox","ComboboxInput","ComboboxMenu","ComboboxMenuItem","defaultOptions","inputRef","React","value","setValue","options","setOptions","filteredOptions","filter","option","toLowerCase","includes","htmlFor","style","display","id","inputValue","resultCount","length","shouldShowStatusMessage","onSelect","selectedItem","current","focus","onInputChange","e","target","ref","aria-label","map","item","key","of","isMDXComponent"],"mappings":"gRAQaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,kGACA,0EAAyD,6BAAGC,WAAW,KAAQ,CAC3E,KAAQ,2DAD6C,kDAAzD,KAGA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,upDAA8tDC,SAAO,GACtwDL,QACAH,kBACAS,eACAC,UACAC,aACAC,kBACAC,iBACAC,sBARswD,gBAStwDd,IATswD,EAUtwDH,eAVswD,GAWrwDO,QAAQ,eACb,WACM,IAAMW,EAAiB,CAAC,QAAS,UAAW,SAAU,YAAa,SAAU,MAAO,SAAU,aAAc,YAAa,SAAU,OAAQ,UAAW,cAAe,SAAU,WAAY,QAAS,QAAS,YAAa,SAAU,SAAU,gBAAiB,OAAQ,YAAa,WAAY,YAAa,OAAQ,cAAe,SAAU,YAAa,YAAa,aAAc,aAAc,SAC9XC,EAAWC,WAFjB,EAG0BA,WAAe,IAAlCC,EAHP,KAGcC,EAHd,OAI8BF,WAAeF,GAAtCK,EAJP,KAIgBC,EAJhB,KASA,OAJAJ,aAAgB,WACd,IAAMK,EAAkBP,EAAeQ,QAAO,SAAAC,GAAM,OAAIA,EAAOC,cAAcC,SAASR,EAAMO,kBAC5FJ,EAAWC,KACV,CAACJ,IACG,wBACX,qBAAOS,QAAQ,iBAAiBC,MAAO,CAC/BC,QAAS,UADjB,gBAKA,YAAC,IAAD,CAAUC,GAAG,iBAAiBC,WAAYb,EAAOc,YAAaZ,EAAQa,OAAQC,yBAA0Bd,EAAQa,OAAQE,SAAU,SAAAC,GAC1HjB,EAASiB,EAAalB,OACtBF,EAASqB,QAAQC,SAChBC,cAAe,SAAAC,GAAC,OAAIrB,EAASqB,EAAEC,OAAOvB,QAAQd,QAAQ,YAC9D,YAAC,IAAD,CAAesC,IAAK1B,EAAUZ,QAAQ,kBACtC,YAAC,IAAD,CAAcuC,aAAW,SAASvC,QAAQ,gBACxCgB,EAAQwB,KAAI,SAAAC,GAAI,OAAI,YAAC,IAAD,CAAkBC,IAAKD,EAAMzC,QAAQ,oBACvDyC,YAOL,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOE,GAAIpC,IAAUP,QAAQ,gB,uMAKjCH,EAAW+C,gBAAiB","file":"component---src-combobox-readme-mdx-04ebdc43237ba1874472.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Combobox, ComboboxInput, ComboboxMenu, ComboboxMenuItem } from './';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"combobox\"\n    }}>{`Combobox`}</h1>\n    <p>{`An accessible combobox component that can be used with any input element.`}</p>\n    <p>{`Implemented based on the recommendations from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\"\n      }}>{`WAI-ARIA Authoring Practices 1.2 working draft`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const defaultOptions = [\\n    \\'Apple\\',\\n    \\'Apricot\\',\\n    \\'Banana\\',\\n    \\'Blueberry\\',\\n    \\'Cherry\\',\\n    \\'Fig\\',\\n    \\'Feijoa\\',\\n    \\'Gooseberry\\',\\n    \\'Jackfruit\\',\\n    \\'Jujube\\',\\n    \\'Kiwi\\',\\n    \\'Kumquat\\',\\n    \\'Lingonberry\\',\\n    \\'Lychee\\',\\n    \\'Mandarin\\',\\n    \\'Mango\\',\\n    \\'Melon\\',\\n    \\'Nectarine\\',\\n    \\'Orange\\',\\n    \\'Papaya\\',\\n    \\'Passion Fruit\\',\\n    \\'Pear\\',\\n    \\'Persimmon\\',\\n    \\'Physalis\\',\\n    \\'Pineapple\\',\\n    \\'Plum\\',\\n    \\'Pomegranate\\',\\n    \\'Pomelo\\',\\n    \\'Raspberry\\',\\n    \\'Starfruit\\',\\n    \\'Strawberry\\',\\n    \\'Watermelon\\',\\n    \\'Wumpa\\',\\n  ]\\n  const inputRef = React.useRef()\\n  const [value, setValue] = React.useState(\\'\\')\\n  const [options, setOptions] = React.useState(defaultOptions)\\n  React.useEffect(() => {\\n    const filteredOptions = defaultOptions.filter(option =>\\n      option.toLowerCase().includes(value.toLowerCase()),\\n    )\\n    setOptions(filteredOptions)\\n  }, [value])\\n  return (\\n    <form>\\n      <label htmlFor=\\\"fruit-selector\\\" style={{ display: \\'block\\' }}>\\n        Pick a fruit\\n      </label>\\n      <Combobox\\n        id=\\\"fruit-selector\\\"\\n        inputValue={value}\\n        resultCount={options.length}\\n        shouldShowStatusMessage={!options.length}\\n        onSelect={selectedItem => {\\n          setValue(selectedItem.value)\\n          inputRef.current.focus()\\n        }}\\n        onInputChange={e => setValue(e.target.value)}\\n      >\\n        <ComboboxInput ref={inputRef} />\\n        <ComboboxMenu aria-label=\\\"Fruits\\\">\\n          {options.map(item => (\\n            <ComboboxMenuItem key={item}>{item}</ComboboxMenuItem>\\n          ))}\\n        </ComboboxMenu>\\n      </Combobox>\\n    </form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Combobox,\n      ComboboxInput,\n      ComboboxMenu,\n      ComboboxMenuItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t{() => {\n        const defaultOptions = ['Apple', 'Apricot', 'Banana', 'Blueberry', 'Cherry', 'Fig', 'Feijoa', 'Gooseberry', 'Jackfruit', 'Jujube', 'Kiwi', 'Kumquat', 'Lingonberry', 'Lychee', 'Mandarin', 'Mango', 'Melon', 'Nectarine', 'Orange', 'Papaya', 'Passion Fruit', 'Pear', 'Persimmon', 'Physalis', 'Pineapple', 'Plum', 'Pomegranate', 'Pomelo', 'Raspberry', 'Starfruit', 'Strawberry', 'Watermelon', 'Wumpa'];\n        const inputRef = React.useRef();\n        const [value, setValue] = React.useState('');\n        const [options, setOptions] = React.useState(defaultOptions);\n        React.useEffect(() => {\n          const filteredOptions = defaultOptions.filter(option => option.toLowerCase().includes(value.toLowerCase()));\n          setOptions(filteredOptions);\n        }, [value]);\n        return <form>\n\t\t\t\t<label htmlFor=\"fruit-selector\" style={{\n            display: 'block'\n          }}>\n\t\t\t\t\tPick a fruit\n\t\t\t\t</label>\n\t\t\t\t<Combobox id=\"fruit-selector\" inputValue={value} resultCount={options.length} shouldShowStatusMessage={!options.length} onSelect={selectedItem => {\n            setValue(selectedItem.value);\n            inputRef.current.focus();\n          }} onInputChange={e => setValue(e.target.value)} mdxType=\"Combobox\">\n\t\t\t\t\t<ComboboxInput ref={inputRef} mdxType=\"ComboboxInput\" />\n\t\t\t\t\t<ComboboxMenu aria-label=\"Fruits\" mdxType=\"ComboboxMenu\">\n\t\t\t\t\t\t{options.map(item => <ComboboxMenuItem key={item} mdxType=\"ComboboxMenuItem\">\n\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t</ComboboxMenuItem>)}\n\t\t\t\t\t</ComboboxMenu>\n\t\t\t\t</Combobox>\n\t\t\t</form>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Combobox} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}