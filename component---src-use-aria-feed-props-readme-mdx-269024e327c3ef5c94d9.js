(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{sRFY:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var r=n("/FXl"),a=n("TjRS");n("ZFoC"),n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useAriaFeedProps/README.mdx"}});var s={_frontmatter:o},p=a.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(p,i({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"useariafeedprops"},"useAriaFeedProps"),Object(r.b)("p",null,"A React hook for implementing the ",Object(r.b)("a",i({parentName:"p"},{href:"https://www.w3.org/TR/wai-aria-practices-1.1/#feed"}),"WAI-ARIA 'Feed' pattern"),"."),Object(r.b)("p",null,"Supports the keyboard shortcuts recommended in the references:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Page up/down")," to navigate to the previous/next item"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Ctrl + Home/End")," to navigate to the first/last item\n(To do: Provide a way to pass in refs to first focusable elements before and after the feed & focus those instead)")),Object(r.b)("h2",{id:"example-usage"},"Example usage"),Object(r.b)("p",null,"Initialise ",Object(r.b)("inlineCode",{parentName:"p"},"useAriaFeedProps")," with an object containing the ",Object(r.b)("inlineCode",{parentName:"p"},"isLoading")," state of your feed, and, if available, the ",Object(r.b)("inlineCode",{parentName:"p"},"totalItemCount")," of the feed."),Object(r.b)("p",null,"The hook returns two ",Object(r.b)("a",i({parentName:"p"},{href:"https://kentcdodds.com/blog/how-to-give-rendering-control-to-users-with-prop-getters"}),"prop getters")," that have to be spread onto the wrapper of the feed and each item ('article')."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-jsx"}),"const {getWrapperProps, getItemProps} = useAriaFeedProps({\n    isLoading: hasMoreItems,\n    totalItemCount,\n});\n\nreturn (\n    <>\n        <h1 id={HEADING_ID}>My thrilling feed</h1>\n        <div {...getWrapperProps({labelledBy: HEADING_ID})}>\n            {items.map((item, index) => {\n                const ITEM_HEADING_ID = `${item.id}-title`;\n                const ITEM_DESC_ID = `${item.id}-description`;\n                return (\n                    <article\n                        key={item.id}\n                        {...getItemProps({\n                            index,\n                            labelledBy: ITEM_HEADING_ID,\n                            describedBy: ITEM_HEADING_ID,\n                        })}\n                    >\n                        <h2 id={ITEM_HEADING_ID}>{item.name}</h2>\n                        <p id={ITEM_DESC_ID}>{item.desc}</p>\n                    </article>\n                );\n            })}\n        </div>\n    </>\n);\n")))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useAriaFeedProps/README.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-aria-feed-props-readme-mdx-269024e327c3ef5c94d9.js.map