{"version":3,"sources":["webpack:///../src/PageTitleManager/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isToggle","of","PageTitle","isMDXComponent"],"mappings":"kRAQaA,G,UAAe,S,iNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,mIACA,sBACE,kBAAIC,WAAW,MAAf,qEACA,kBAAIA,WAAW,MAAf,2DAEF,oCAAmB,6BAAGA,WAAW,KAAQ,CACrC,KAAQ,6GADO,mCAAnB,KAGA,iBAAQ,CACN,GAAM,eADR,eAGA,iPACA,oUACA,4BAAW,0BAAYA,WAAW,KAAvB,sBAAX,QAAkF,0BAAYA,WAAW,KAAvB,eAAlF,6FAAuO,0BAAYA,WAAW,KAAvB,QAAvO,uFACA,iBAAQ,CACN,GAAM,SADR,SAGA,6GAA4F,0BAAYA,WAAW,KAAvB,oBAA5F,sCAA+L,0BAAYA,WAAW,KAAvB,YAA/L,8JAAkZ,0BAAYA,WAAW,KAAvB,qBAAlZ,mHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0QAWL,4EAA2D,0BAAYA,WAAW,KAAvB,aAA3D,iEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gNAYL,iBAAQ,CACN,GAAM,kBADR,kBAGA,qGAAoF,0BAAYA,WAAW,KAAvB,aAApF,wBAAkK,0BAAYA,WAAW,KAAvB,MAAlK,kBAAmO,0BAAYA,WAAW,KAAvB,aAAnO,WAAoS,0BAAYA,WAAW,KAAvB,MAApS,iEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iKAKL,4EAA2D,0BAAYA,WAAW,KAAvB,aAA3D,uBAAwI,0BAAYA,WAAW,KAAvB,MAAxI,wBACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gFAML,iBAAQ,CACN,GAAM,+BADR,+BAGA,0JAAyI,0BAAYA,WAAW,KAAvB,aAAzI,uBAAsN,0BAAYA,WAAW,KAAvB,kBAAtN,0HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yDAIL,iBAAQ,CACN,GAAM,4BADR,4BAGA,qKAAoJ,0BAAYA,WAAW,KAAvB,QAApJ,UACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yFAML,iBAAQ,CACN,GAAM,8BADR,8BAGA,yCAAwB,0BAAYA,WAAW,KAAvB,oBAAxB,kHACA,4CAA2B,0BAAYA,WAAW,KAAvB,qBAA3B,gBAAyG,0BAAYA,WAAW,KAAvB,oBAAzG,eACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6FAML,wNACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+JAUL,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,aAFH,UAGA,YAAC,IAAD,CAAOC,UAAQ,EAACC,GAAIC,IAAWJ,QAAQ,gB,+MAK3CH,EAAWQ,gBAAiB","file":"component---src-page-title-manager-readme-mdx-507c7363e0cec4b562b8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from 'docz';\nimport PageTitle from './PageTitle';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"pagetitlemanager\"\n    }}>{`PageTitleManager`}</h1>\n    <p>{`Create accessible page title announcements when navigating between pages in a single-page React app (SPA).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Move focus to a visible or hidden main page header on page change`}</li>\n      <li parentName=\"ul\">{`(Optionally) easily manage your site's document titles`}</li>\n    </ul>\n    <p>{`Inspired by `}<a parentName=\"p\" {...{\n        \"href\": \"https://hugogiraudel.com/2020/01/15/accessible-title-in-a-single-page-react-application/#title-announcer\"\n      }}>{`this blog post by Hugo Giraudel`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"the-problem\"\n    }}>{`The problem`}</h2>\n    <p>{`When browsing a traditional server-rendered website, following a link causes the page to reload with the content of the new page. Screenreaders take this as a signal to announce the title of the new page to the user.`}</p>\n    <p>{`In a SPA, this typically doesn't happen by default, as new content is displayed without a full page reload. Because of this, users of assistive technologies might miss out on the fact that a new page was loaded, or if they do, they'll still manually have to navigate to the main content of the page.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<PageTitleManager>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<PageTitle>`}</inlineCode>{` components help you mitigate both of these issues by moving the user's focus to the main `}<inlineCode parentName=\"p\">{`<h1>`}</inlineCode>{` heading element on the page – but only after an in-app navigation has taken place.`}</p>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`To keep track of the navigation state of the app, you need to wrap your app with the `}<inlineCode parentName=\"p\">{`PageTitleManager`}</inlineCode>{` component and provide it with the `}<inlineCode parentName=\"p\">{`pathname`}</inlineCode>{` prop, which you'd typically get from your client-side routing library. The content of this prop has to be a string, but it doesn't need to be the literal `}<inlineCode parentName=\"p\">{`location.pathname`}</inlineCode>{` attribute – you can also pass any other primitive value that will change when a client-side navigation occurs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {useLocation} from 'react-router';\nimport PageTitleManager from 'base5-ui/PageTitleManager';\n\nfunction YourApp({children}) {\n    const {pathname} = useLocation();\n\n    return <PageTitleManager pathname={pathname}>{children}</PageTitleManager>;\n}\n`}</code></pre>\n    <p>{`Once your app has been wrapped in this way, use the `}<inlineCode parentName=\"p\">{`PageTitle`}</inlineCode>{` component to render the main headings of each of your pages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {PageTitle} from 'base5-ui/PageTitleManager';\n\nfunction HomePage() {\n    return (\n        <main>\n            <PageTitle>Welcome to my accessible app!</PageTitle>\n        </main>\n    );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-styling\"\n    }}>{`Custom styling`}</h2>\n    <p>{`If you're already using styled heading components, you can pass those to the `}<inlineCode parentName=\"p\">{`PageTitle`}</inlineCode>{` component using the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop; or pass `}<inlineCode parentName=\"p\">{`PageTitle`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop of your styled component – both approaches should work.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PageTitle as={MainHeading}>Welcome to my super accessible app!</PageTitle>\n<MainHeading as={PageTitle}>Welcome to my super accessible app!</MainHeading>\n`}</code></pre>\n    <p>{`You can also create a new styled component based on `}<inlineCode parentName=\"p\">{`PageTitle`}</inlineCode>{`. It will render an `}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` element by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MainHeading = styled(PageTitle)\\`\n    /* Your heading styles */\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"visually-hiding-the-heading\"\n    }}>{`Visually hiding the heading`}</h2>\n    <p>{`If a page in your app doesn't have an obvious readable heading, you can still provide a title to screen reader users by using the `}<inlineCode parentName=\"p\">{`PageTitle`}</inlineCode>{` component with the `}<inlineCode parentName=\"p\">{`visuallyHidden`}</inlineCode>{` prop. This hides the heading from sighted users, while announcing & focusing it for users of assisitive technologies.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PageTitle visuallyHidden>Your Profile</PageTitle>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"complex-heading-contents\"\n    }}>{`Complex heading contents`}</h2>\n    <p>{`In case your PageTitle contains children more complex than a simple string, a text-only representation of the title must be provided via the `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PageTitle text=\"Welcome to my app!\">\n    Welcome to <b>my app!</b>\n</PageTitle>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-the-document-title\"\n    }}>{`Setting the document title`}</h2>\n    <p>{`You can also use `}<inlineCode parentName=\"p\">{`PageTitleManager`}</inlineCode>{` component to easily update your site's document title, i.e. the title that's shown in the page's browser tab.`}</p>\n    <p>{`To do this, add the `}<inlineCode parentName=\"p\">{`syncDocumentTitle`}</inlineCode>{` prop to the `}<inlineCode parentName=\"p\">{`PageTitleManager`}</inlineCode>{` component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PageTitleManager syncDocumentTitle pathname={pathname}>\n    ...\n</PageTitleManager>\n`}</code></pre>\n    <p>{`You can also define a \"base page title\" that will be added at the end of the document title. The code in the following example would change the title of your document to \"Home - My Site Name\"`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PageTitleManager\n    syncDocumentTitle\n    baseTitle=\"My Site Name\"\n    pathname={pathname}\n>\n    <PageTitle>Home</PageTitle>\n</PageTitleManager>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pagetitle-props\"\n    }}><inlineCode parentName=\"h2\">{`PageTitle`}</inlineCode>{` props`}</h2>\n    <Props isToggle of={PageTitle} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}