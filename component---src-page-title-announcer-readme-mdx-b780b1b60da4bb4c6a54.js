(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"9kF+":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return u}));var a=n("Fcif"),i=n("+I+c"),o=(n("mXGw"),n("/FXl")),l=n("TjRS"),p=n("ZFoC"),c=n("tU/s"),r=(n("aD51"),{});void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/PageTitleAnnouncer/README.mdx"}});var s={_frontmatter:r},b=l.a;function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(b,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"pagetitleannouncer"},"PageTitleAnnouncer"),Object(o.b)("p",null,"Create accessible page title announcements when navigating between pages in a single-page React app (SPA)."),Object(o.b)("p",null,"Inspired by ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://hugogiraudel.com/2020/01/15/accessible-title-in-a-single-page-react-application/#title-announcer"}),"this blog post by Hugo Giraudel"),"."),Object(o.b)("h2",{id:"the-problem"},"The problem"),Object(o.b)("p",null,"When browsing a traditional server-rendered website, following a link causes the page to reload with the content of the new page. Screenreaders take this as a signal to announce the title of the new page to the user."),Object(o.b)("p",null,"In a SPA, this typically doesn't happen by default, as new content is displayed without a full page reload. Because of this, users of assistive technologies might miss out on the fact that a new page was loaded, or if they do, they'll still manually have to navigate to the main content of the page."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"<PageTitleAnnouncer>")," and ",Object(o.b)("inlineCode",{parentName:"p"},"<PageTitle>")," components help you mitigate both of these issues by moving the user's focus to the main ",Object(o.b)("inlineCode",{parentName:"p"},"<h1>")," heading element on the page – but only after an in-app navigation has taken place."),Object(o.b)("h2",{id:"setup"},"Setup"),Object(o.b)("p",null,"To keep track of the navigation state of the app, you need to wrap your app with the ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitleAnnouncer")," component and provide it with the ",Object(o.b)("inlineCode",{parentName:"p"},"pathname")," prop, which you'd typically get from your client-side routing library. The content of this prop has to be a string, but it doesn't need to be the literal ",Object(o.b)("inlineCode",{parentName:"p"},"location.pathname")," attribute – you can also pass any other primitive value that will change when a client-side navigation occurs."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {useLocation} from 'react-router';\nimport PageTitleAnnouncer from 'base5-ui/PageTitleAnnouncer';\n\nfunction YourApp({children}) {\n    const {pathname} = useLocation();\n\n    return (\n        <PageTitleAnnouncer pathname={pathname}>{children}</PageTitleAnnouncer>\n    );\n}\n")),Object(o.b)("p",null,"Once your app has been wrapped in this way, use the ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitle")," component to render the main headings of each of your pages:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {PageTitle} from 'base5-ui/PageTitleAnnouncer';\n\nfunction HomePage() {\n    return (\n        <main>\n            <PageTitle>Welcome to my accessible app!</PageTitle>\n        </main>\n    );\n}\n")),Object(o.b)("h2",{id:"custom-styling"},"Custom styling"),Object(o.b)("p",null,"If you're already using styled heading components, you can pass those to the ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitle")," component using the ",Object(o.b)("inlineCode",{parentName:"p"},"as")," prop; or pass ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitle")," to the ",Object(o.b)("inlineCode",{parentName:"p"},"as")," prop of your styled component – both approaches should work."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<PageTitle as={MainHeading}>Welcome to my super accessible app!</PageTitle>\n<MainHeading as={PageTitle}>Welcome to my super accessible app!</MainHeading>\n")),Object(o.b)("p",null,"You can also create a new styled component based on ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitle"),". It will render an ",Object(o.b)("inlineCode",{parentName:"p"},"h1")," element by default."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const MainHeading = styled(PageTitle)`\n    /* Your heading styles */\n`;\n")),Object(o.b)("h2",{id:"visually-hiding-the-heading"},"Visually hiding the heading"),Object(o.b)("p",null,"If a page in your app doesn't have an obvious readable heading, you can still provide a title to screen reader users by using the ",Object(o.b)("inlineCode",{parentName:"p"},"PageTitle")," component with the ",Object(o.b)("inlineCode",{parentName:"p"},"visuallyHidden")," prop. This hides the heading from sighted users, while announcing & focusing it for users of assisitive technologies."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<PageTitle visuallyHidden>Your Profile</PageTitle>\n")),Object(o.b)("h2",{id:"complex-heading-contents"},"Complex heading contents"),Object(o.b)("p",null,"In case your PageTitle contains children more complex than a simple string, a text-only representation of the title must be provided via the ",Object(o.b)("inlineCode",{parentName:"p"},"text")," prop:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<PageTitle text="Welcome to my app!">\n    Welcome to <b>my app!</b>\n</PageTitle>\n')),Object(o.b)("h2",{id:"pagetitle-props"},Object(o.b)("inlineCode",{parentName:"h2"},"PageTitle")," props"),Object(o.b)(p.d,{isToggle:!0,of:c.a,mdxType:"Props"}))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/PageTitleAnnouncer/README.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-page-title-announcer-readme-mdx-b780b1b60da4bb4c6a54.js.map