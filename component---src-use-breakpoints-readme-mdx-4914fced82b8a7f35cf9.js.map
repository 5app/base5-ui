{"version":3,"sources":["webpack:///../src/useBreakpoints/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAOaA,G,oBAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,8NAEA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,mFAML,gFAA+D,0BAAYA,WAAW,KAAvB,aAA/D,iDAAsK,0BAAYA,WAAW,KAAvB,QAAtK,gCAAuP,sBAAQA,WAAW,KAAnB,SAAvP,yBACA,qBAAG,sBAAQA,WAAW,KAAnB,oBAAH,mGACA,iBAAQ,CACN,GAAM,YADR,YAGA,sBACE,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,qDAA0E,0BAAYA,WAAW,MAAvB,qBAA1E,SACA,kBAAIA,WAAW,MAAf,0HAEF,iBAAQ,CACN,GAAM,SADR,SAGA,4CAA2B,0BAAYA,WAAW,KAAvB,kBAA3B,uCAA6H,0BAAYA,WAAW,KAAvB,uBAA7H,0GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kUAkBL,iBAAQ,CACN,GAAM,SADR,SAGA,8EAA6D,0BAAYA,WAAW,KAAvB,kBAA7D,8BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wUAoBL,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,8EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oDAIL,iBAAQ,CACN,GAAM,kCADR,kCAGA,wMACA,wGAAuF,0BAAYA,WAAW,KAAvB,qBAAvF,SACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gM,6MAeTJ,EAAWK,gBAAiB","file":"component---src-use-breakpoints-readme-mdx-4914fced82b8a7f35cf9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usebreakpoints\"\n    }}>{`useBreakpoints`}</h1>\n    <p>{`A hook that returns an object containing the state of the current theme's media query breakpoints.\nThis can be useful when you need to render different markup depending on the user's screen width.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const {m, xl} = useBreakpoints();\n\nconsole.log(m, xl); // e.g. true, false\n`}</code></pre>\n    <p>{`The breakpoint states are resolved using \"mobile-first\" `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` queries, i.e. they are reported as matching (`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`) when the viewport width is `}<strong parentName=\"p\">{`wider`}</strong>{` than the breakpoint.`}</p>\n    <p><strong parentName=\"p\">{`Word of warning:`}</strong>{` Due to its reliance on client-side JS, this hook is not compatible with server-side rendering.`}</p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Choose your own breakpoints and breakpoint names`}</li>\n      <li parentName=\"ul\">{`Works without resize event listeners (It uses the `}<inlineCode parentName=\"li\">{`window.matchMedia`}</inlineCode>{` API)`}</li>\n      <li parentName=\"ul\">{`Keeps track of Media Query state in a single place, minimising the number of Media Query change listeners on the page`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`In order to use the `}<inlineCode parentName=\"p\">{`useBreakpoints`}</inlineCode>{` hook, wrap your React app with the `}<inlineCode parentName=\"p\">{`BreakpointsProvider`}</inlineCode>{` component and initialise it with a configuration object that contains the widths of your breakpoints.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {BreakpointsProvider} from 'base5-ui/useBreakpoints';\n...\nconst myBreakpoints = {\n    smol: '360px',\n    medium: '480px',\n    largo: '840px',\n};\n\nfunction MyApp() {\n    return (\n        <BreakpointsProvider breakpoints={myBreakpoints}>\n            <App />\n        </BreakpointsProvider>\n    )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Once your app has been set up as described above, the `}<inlineCode parentName=\"p\">{`useBreakpoints`}</inlineCode>{` hook is ready to be used.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import useBreakpoints from 'base5-ui/useBreakpoints';\n\n...\n\nfunction Component() {\n    const {smol, medium, largo} = useBreakpoints();\n\n    return (\n        <nav>\n            {medium ? (\n                <DesktopMenu />\n            ) : (\n                <MobileMenu />\n            )}\n        </nav>\n    )\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Tip:`}</strong>{` Rename your breakpoints while destructuring for a more readable variable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const {medium: isDesktop} = useBreakpoints();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-the-current-breakpoint\"\n    }}>{`Getting the current breakpoint`}</h2>\n    <p>{`If you need to read the currently active breakpoint, you need to provide the hook with an array of the breakpoint names you're interested in, ordered from smallest to largest.`}</p>\n    <p>{`The hook will then return the name of the largest matching breakpoint under the `}<inlineCode parentName=\"p\">{`currentBreakpoint`}</inlineCode>{` key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`    const {currentBreakpoint} = useBreakpoints(['smol', 'largo']);\n\n    return (\n        <p>\n            The current breakpoint is {currentBreakpoint}!\n        </p>\n    )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}