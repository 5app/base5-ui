(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{HKRM:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return m}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var o=t("/FXl"),c=t("TjRS"),l=t("ZFoC"),r=t("7DY4"),s=t("CRV5");t("aD51");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/DocumentClickListener/README.mdx"}});var u={_frontmatter:a},p=c.a;function m(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,c={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,["components"]);return Object(o.b)(p,i({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"documentclicklistener"},"DocumentClickListener"),Object(o.b)("p",null,"A helper component that does not render any elements, but sets up a click listener on the body.\nIf you want to ignore clicks on a certain element, you can pass in the ref of that element using the ",Object(o.b)("inlineCode",{parentName:"p"},"excludedElementRef")," prop."),Object(o.b)("p",null,"Useful for tooltips and dropdown menus."),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("p",null,'The below example shows how to use this component and also demonstrates why this is a component and not just a hook: Due to the "',Object(o.b)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/hooks-rules.html"}),"rules of hooks"),"\", it's not possible to conditionally call a hook, while it's very easy to conditionally render a component."),Object(o.b)(l.c,{__position:0,__code:"<Example />",__scope:{props:t,DefaultLayout:c.a,Playground:l.c,Props:l.d,DocumentClickListener:r.a,Example:s.a},mdxType:"Playground"},Object(o.b)(s.a,{mdxType:"Example"})),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-jsx"}),"function DocumentClickExample() {\n    const [count, setCount] = useState(0);\n    const [isActive, setActive] = useState(true);\n    const excludedElement = useRef(null);\n    return (\n        <>\n            <h1>Document clicks: {count}</h1>\n            <p\n                ref={excludedElement}\n                style={{padding: '1em', border: '2px dashed grey'}}\n            >\n                Clicks inside this box will be ignored.\n            </p>\n            {isActive && (\n                <DocumentClickListener\n                    onClick={() => setCount(count + 1)}\n                    excludedElementRef={excludedElement}\n                />\n            )}\n            <Box mt=\"m\">\n                <Switch\n                    checked={isActive}\n                    onChange={() => setActive(prevActive => !prevActive)}\n                    id=\"switch\"\n                />{' '}\n                <label htmlFor=\"switch\">Count clicks</label>\n            </Box>\n        </>\n    );\n}\n")),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)(l.d,{of:r.a,mdxType:"Props"}))}m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/DocumentClickListener/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-document-click-listener-readme-mdx-9f522bf64c3ed67ce76e.js.map