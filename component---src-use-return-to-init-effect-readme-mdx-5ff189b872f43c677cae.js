(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"EU4/":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return s}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var a=n("/FXl"),i=n("TjRS");n("ZFoC"),n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useReturnToInitEffect/README.mdx"}});var u={_frontmatter:r},c=i.a;function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(c,o({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"usereturntoiniteffect"},"useReturnToInitEffect"),Object(a.b)("p",null,"A custom hook for those weird times when you need to run an effect only after a condition has ",Object(a.b)("em",{parentName:"p"},"returned")," to its original value."),Object(a.b)("p",null,"Some people use a ",Object(a.b)("inlineCode",{parentName:"p"},"usePreviousState")," hook for that, but I find this hook to be a bit more declarative:\nYou just pass your callback and a value. The callback will not be run initially, but only after the value has changed and then returned to its original value."),Object(a.b)("p",null,"Note that unlike the regular ",Object(a.b)("inlineCode",{parentName:"p"},"useEffect")," hook, ",Object(a.b)("inlineCode",{parentName:"p"},"useReturnToInitEffect"),' only accepts a single "dependency" which is not wrapped in an array.'),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import useReturnToInitEffect from 'base5-ui/useReturnToInitEffect';\n\nfunction Comment({data}) {\n    const [isEditing, setIsEditing] = useState(false);\n    const editButtonRef = useRef();\n\n    useReturnToInitEffect(() => {\n        // Focus the edit button when exiting edit mode\n        editButtonRef.current?.focus();\n    }, isEditing);\n\n    if (isEditing) {\n        return (\n            <EditComment data={data} onSubmit={() => setIsEditing(false)} />\n        )\n    }\n\n    return (\n        <Comment data={data} onEdit={() => setIsEditing(true)}>\n    );\n}\n")))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useReturnToInitEffect/README.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-return-to-init-effect-readme-mdx-5ff189b872f43c677cae.js.map