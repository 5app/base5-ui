{"version":3,"sources":["webpack:///../src/useOnClickOutside/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","React","count","setCount","isEnabled","setIsEnabled","excludedElement","useOnClickOutside","spacing","ref","p","border","checked","onChange","prevEnabled","id","htmlFor","isMDXComponent"],"mappings":"oTAWaA,G,UAAe,S,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,4MACE,yBAAgB,CACd,WAAc,KADhB,sBADF,UAKA,iBAAQ,CACN,GAAM,cADR,cAGA,sBAEE,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,sBAFH,oCAME,yBAAgB,CACd,WAAc,MADhB,UANF,OAUE,yBAAgB,CACd,WAAc,MADhB,aAVF,+DAcE,yBAAgB,CACd,WAAc,MADhB,WAdF,aAoBA,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,WAFH,iFAQA,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,aAFH,8CAQF,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYA,QAAQ,eACjB,WAAM,MACqBC,WAAe,GAAlCC,EADF,KACSC,EADT,OAE6BF,YAAe,GAA1CG,EAFF,KAEaC,EAFb,KAGCC,EAAkBL,SAAa,MAErC,OADAM,YAAkBD,GAAiB,kBAAMH,EAASD,EAAQ,KAAIE,GACvD,YAAC,IAAD,CAAOI,QAAQ,IAAIR,QAAQ,SACtC,0CAAsBE,GACtB,YAAC,IAAD,CAAKO,IAAKH,EAAiBI,EAAE,IAAIC,OAAO,SAASX,QAAQ,OAAzD,2CAGG,4BACC,YAAC,IAAD,CAAQY,QAASR,EAAWS,SAAU,kBAAMR,GAAa,SAAAS,GAAW,OAAKA,MAAcC,GAAG,SAASf,QAAQ,WAAY,IACvH,qBAAOgB,QAAQ,UAAf,2B,gNASRnB,EAAWoB,gBAAiB","file":"component---src-use-on-click-outside-readme-mdx-a25badf575c976e96103.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport useOnClickOutside from './';\nimport Box from '../Box';\nimport Stack from '../Stack';\nimport Switch from '../Switch';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useonclickoutside\"\n    }}>{`useOnClickOutside`}</h1>\n    <p>{`This hook lets you run a callback whenever the body of the page (or any other element) is clicked, and allows you to ignore clicks on a certain element within it by specifying the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`excludedElementRef`}</inlineCode>\n      {` prop.`}</p>\n    <h2 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h2>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`excludedElementRef`}</inlineCode>\n        {` - A React ref (as obtained from `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`useRef`}</inlineCode>\n        {` or `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`createRef`}</inlineCode>\n        {`) to an element that should be excluded from triggering the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`onClick`}</inlineCode>\n        {` callback`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`onClick`}</inlineCode>\n        {` - Function that's called when a click occurs outside of the excluded element`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`isEnabled`}</inlineCode>\n        {`=true] - Set to false to disable the hook`}</li>\n\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground mdxType=\"Playground\">\n      {() => {\n        const [count, setCount] = React.useState(0);\n        const [isEnabled, setIsEnabled] = React.useState(true);\n        const excludedElement = React.useRef(null);\n        useOnClickOutside(excludedElement, () => setCount(count + 1), isEnabled);\n        return <Stack spacing=\"m\" mdxType=\"Stack\">\n  \t\t<h1>Document clicks: {count}</h1>\n  \t\t<Box ref={excludedElement} p=\"m\" border=\"dashed\" mdxType=\"Box\">\n  \t\t\tClicks inside this box will be ignored.\n  \t\t</Box>\n    \t\t\t<>\n    \t\t\t\t<Switch checked={isEnabled} onChange={() => setIsEnabled(prevEnabled => !prevEnabled)} id=\"switch\" mdxType=\"Switch\" />{' '}\n    \t\t\t\t<label htmlFor=\"switch\">Count clicks</label>\n    \t\t\t</>\n    \t\t</Stack>;\n      }}\n    </Playground>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}