(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{D1Cl:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return O}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("jr56"),n("kBzq"),n("kr69"),n("mXGw");var a=n("/FXl"),l=n("TjRS"),o=n("ZFoC"),i=n("7xDH"),r=n("2mC/"),m=n("CNeP"),b=n("Wuz6"),d=n("Q+Gn"),c=n("FZFq"),p=n("k1eI");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Table/README.mdx"}});var h={_frontmatter:u},j=l.a;function O(e){var t,n,O,y,C=e.components,f=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)(j,s({},h,f,{components:C,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"table"},"Table"),Object(a.b)("p",null,"A table component with a sticky header row and clickable headers for sorting."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"By default, all columns have an equal width"),Object(a.b)("li",{parentName:"ul"},"Control the width of columns by specifying a fixed or percentage width"),Object(a.b)("li",{parentName:"ul"},"Define a breakpoint under which a list-like ",Object(a.b)("strong",{parentName:"li"},"mobile view"),' will be enabled (by default this is "xs")'),Object(a.b)("li",{parentName:"ul"},"Columns can be defined in JSX using the ",Object(a.b)("inlineCode",{parentName:"li"},"Column")," component, or using the ",Object(a.b)("inlineCode",{parentName:"li"},"columns")," prop")),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("h3",{id:"simple-example-with-jsx-column-config"},"Simple example with JSX column config"),Object(a.b)("p",null,"The table data is provided as an array of objects. The ",Object(a.b)("inlineCode",{parentName:"p"},"title"),' given to each column will be used to select a field from the data row (i.e. the "Email" column will get its data from ',Object(a.b)("inlineCode",{parentName:"p"},"item.email"),"). If you want to specify a field different from the title, you can do so either using the ",Object(a.b)("inlineCode",{parentName:"p"},"name")," prop (which must be a simple string like ",Object(a.b)("inlineCode",{parentName:"p"},"title"),"), or using the ",Object(a.b)("inlineCode",{parentName:"p"},"cellRenderer"),' prop for more complex cases (see "Country" column below).'),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"cellRenderer")," is also used to generally customise the rendering of a table cell."),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'<Table data={dummyData.slice(0, 4)} itemKey="name">\n    <Column title="Name" />\n    <Column title="Country" name="region" />\n    <Column title="Domain" cellRenderer={item => item.email.split(\'@\')[1]} />\n    <Column title="Type" />\n    <Column title="Time" />\n</Table>\n')),Object(a.b)(o.c,{__position:0,__code:'<Table data={dummyData.slice(0, 4)} itemKey="name">\n  <Column title="Name" />\n  <Column title="Country" name="region" />\n  <Column\n    title="Email domain"\n    cellRenderer={item => item.email.split(\'@\')[1]}\n  />\n  <Column title="Type" />\n  <Column title="Time" />\n</Table>',__scope:(t={props:f,DefaultLayout:l.a,Playground:o.c,Props:o.d,Box:i.a,Icon:r.a,Table:m.a,Column:b.a,CenterContent:d.a,dummyData:c.a,DemoTableState:p.a},t.DefaultLayout=l.a,t._frontmatter=u,t),mdxType:"Playground"},Object(a.b)(m.a,{data:c.a.slice(0,4),itemKey:"name",mdxType:"Table"},Object(a.b)(b.a,{title:"Name",mdxType:"Column"}),Object(a.b)(b.a,{title:"Country",name:"region",mdxType:"Column"}),Object(a.b)(b.a,{title:"Email domain",cellRenderer:function(e){return e.email.split("@")[1]},mdxType:"Column"}),Object(a.b)(b.a,{title:"Type",mdxType:"Column"}),Object(a.b)(b.a,{title:"Time",mdxType:"Column"}))),Object(a.b)("h3",{id:"simple-example-with-object-column-config"},"Simple example with object column config"),Object(a.b)("p",null,"You can also define your columns as an array of objects, if you prefer:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-jsx"}),"<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {title: 'Name'},\n        {title: 'Country', name: 'region'},\n        {title: 'Email domain', cellRenderer: item => item.email.split('@')[1]},\n        {title: 'Type'},\n        {title: 'Time'},\n    ]}\n/>\n")),Object(a.b)("h3",{id:"customisation-example"},"Customisation example"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Wrapped in a box with rounded corners (not part of component API)"),Object(a.b)("li",{parentName:"ul"},"Use ",Object(a.b)("inlineCode",{parentName:"li"},"cellRenderer")," to easily customise the way a cell's content is rendered"),Object(a.b)("li",{parentName:"ul"},"Use the ",Object(a.b)("inlineCode",{parentName:"li"},"rowHeader")," prop to specify which column will be used as the header in the mobile view (only needs to be specified if it's not the first column)"),Object(a.b)("li",{parentName:"ul"},"Use fixed or percentage ",Object(a.b)("inlineCode",{parentName:"li"},"width")," values to customise column sizes"),Object(a.b)("li",{parentName:"ul"},"Use the ",Object(a.b)("inlineCode",{parentName:"li"},"shadedHeader")," prop for a shaded table header background"),Object(a.b)("li",{parentName:"ul"},"Use the ",Object(a.b)("inlineCode",{parentName:"li"},"subtitle")," prop to add a subtitle to a column header"),Object(a.b)("li",{parentName:"ul"},"Use the ",Object(a.b)("inlineCode",{parentName:"li"},"pl")," or ",Object(a.b)("inlineCode",{parentName:"li"},"pr")," props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules"),Object(a.b)("li",{parentName:"ul"},"Enable sortable columns by adding ",Object(a.b)("inlineCode",{parentName:"li"},"<Column sortable />")," props and passing ",Object(a.b)("inlineCode",{parentName:"li"},"sort")," and ",Object(a.b)("inlineCode",{parentName:"li"},"onRequestSort")," props to ",Object(a.b)("inlineCode",{parentName:"li"},"Table"))),Object(a.b)(o.c,{__position:1,__code:'<Box border="thin" borderRadius="panels">\n  <DemoTableState data={dummyData.slice(4, 8)}>\n    {({ data, sort: { column, order }, handleSort }) => (\n      <Table\n        shadedHeader\n        data={data}\n        itemKey="name"\n        rowHeader="Name"\n        sort={{\n          column,\n          order,\n        }}\n        onRequestSort={handleSort}\n        pl="xl"\n        pr={20}\n      >\n        <Column\n          title="Role"\n          width={40}\n          cellRenderer={item => (\n            <Icon\n              name={item.role === \'manager\' ? \'star\' : \'user\'}\n              aria-label={item.role === \'manager\' ? \'Manager\' : \'User\'}\n            />\n          )}\n        />\n        <Column\n          sortable\n          title="Name"\n          width="40%"\n          cellRenderer={item => <strong>{item.name}</strong>}\n        />\n        <Column sortable title="Type" subtitle="Random characters" />\n        <Column sortable title="Time" defaultOrder="desc" />\n      </Table>\n    )}\n  </DemoTableState>\n</Box>',__scope:(n={props:f,DefaultLayout:l.a,Playground:o.c,Props:o.d,Box:i.a,Icon:r.a,Table:m.a,Column:b.a,CenterContent:d.a,dummyData:c.a,DemoTableState:p.a},n.DefaultLayout=l.a,n._frontmatter=u,n),mdxType:"Playground"},Object(a.b)(i.a,{border:"thin",borderRadius:"panels",mdxType:"Box"},Object(a.b)(p.a,{data:c.a.slice(4,8),mdxType:"DemoTableState"},(function(e){var t=e.data,n=e.sort,l=n.column,o=n.order,i=e.handleSort;return Object(a.b)(m.a,{shadedHeader:!0,data:t,itemKey:"name",rowHeader:"Name",sort:{column:l,order:o},onRequestSort:i,pl:"xl",pr:20,mdxType:"Table"},Object(a.b)(b.a,{title:"Role",width:40,cellRenderer:function(e){return Object(a.b)(r.a,{name:"manager"===e.role?"star":"user","aria-label":"manager"===e.role?"Manager":"User",mdxType:"Icon"})},mdxType:"Column"}),Object(a.b)(b.a,{sortable:!0,title:"Name",width:"40%",cellRenderer:function(e){return Object(a.b)("strong",null,e.name)},mdxType:"Column"}),Object(a.b)(b.a,{sortable:!0,title:"Type",subtitle:"Random characters",mdxType:"Column"}),Object(a.b)(b.a,{sortable:!0,title:"Time",defaultOrder:"desc",mdxType:"Column"}))})))),Object(a.b)("h3",{id:"sorting"},"Sorting"),Object(a.b)("p",null,"To add clickable column headers to a table, first add the ",Object(a.b)("inlineCode",{parentName:"p"},"sortable")," prop to any columns that you want to be sortable."),Object(a.b)("p",null,"Then add a ",Object(a.b)("inlineCode",{parentName:"p"},"sort")," prop to ",Object(a.b)("inlineCode",{parentName:"p"},"<Table />")," that defines the current sort order via an object with the keys ",Object(a.b)("inlineCode",{parentName:"p"},"order")," ('asc' || 'desc') and ",Object(a.b)("inlineCode",{parentName:"p"},"column")," (",Object(a.b)("inlineCode",{parentName:"p"},"name")," of the sorted column). If a column wasn't given a ",Object(a.b)("inlineCode",{parentName:"p"},"name")," prop, its ",Object(a.b)("inlineCode",{parentName:"p"},"title")," will be used instead."),Object(a.b)("p",null,"Finally you'll need to tell the Table what to do when a header is clicked. That's what the ",Object(a.b)("inlineCode",{parentName:"p"},"onRequestSort")," prop is for â€“ it's called with an object in the same shape as the ",Object(a.b)("inlineCode",{parentName:"p"},"sort")," prop to define the desired target sorting."),Object(a.b)("h3",{id:"responsive-example"},"Responsive example"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Mobile view:")," The table changes to a more list-like view when the screen width shrinks below the breakpoint defined using the ",Object(a.b)("inlineCode",{parentName:"li"},"mobileViewBreakpoint")," prop."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Hiding columns:")," You can hide columns below a certain breakpoint using the ",Object(a.b)("inlineCode",{parentName:"li"},"hideBelowBreakpoint")," prop. Columns hidden this way will become visible again in the mobile view.")),Object(a.b)("p",null,"The table below uses both modes â€“ on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens."),Object(a.b)(o.c,{__position:2,__code:'<Table\n  mobileViewBreakpoint="xxs"\n  data={dummyData.slice(8, 12)}\n  itemKey="name"\n  rowHeader="Name"\n>\n  <Column\n    title="Role"\n    width={40}\n    cellRenderer={item => (\n      <Icon name={item.role === \'manager\' ? \'star\' : \'user\'} />\n    )}\n  />\n  <Column\n    title="Name"\n    width="40%"\n    cellRenderer={item => <strong>{item.name}</strong>}\n  />\n  <Column title="Region" hideBelowBreakpoint="m" />\n  <Column title="Type" />\n  <Column title="Time" />\n</Table>',__scope:(O={props:f,DefaultLayout:l.a,Playground:o.c,Props:o.d,Box:i.a,Icon:r.a,Table:m.a,Column:b.a,CenterContent:d.a,dummyData:c.a,DemoTableState:p.a},O.DefaultLayout=l.a,O._frontmatter=u,O),mdxType:"Playground"},Object(a.b)(m.a,{mobileViewBreakpoint:"xxs",data:c.a.slice(8,12),itemKey:"name",rowHeader:"Name",mdxType:"Table"},Object(a.b)(b.a,{title:"Role",width:40,cellRenderer:function(e){return Object(a.b)(r.a,{name:"manager"===e.role?"star":"user",mdxType:"Icon"})},mdxType:"Column"}),Object(a.b)(b.a,{title:"Name",width:"40%",cellRenderer:function(e){return Object(a.b)("strong",null,e.name)},mdxType:"Column"}),Object(a.b)(b.a,{title:"Region",hideBelowBreakpoint:"m",mdxType:"Column"}),Object(a.b)(b.a,{title:"Type",mdxType:"Column"}),Object(a.b)(b.a,{title:"Time",mdxType:"Column"}))),Object(a.b)("h3",{id:"empty-state"},"Empty state"),Object(a.b)("p",null,"When no ",Object(a.b)("inlineCode",{parentName:"p"},"data")," array is provided, or when its length is ",Object(a.b)("inlineCode",{parentName:"p"},"0"),', the message "No data to display" will be shown below the column headers. You can customise this message using the ',Object(a.b)("inlineCode",{parentName:"p"},"emptyContent")," prop."),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"CenterContent")," component to make the content appear centred and take up a minimum height."),Object(a.b)(o.c,{__position:3,__code:'<Table\n  emptyContent={<CenterContent height={180}>Here be dragons</CenterContent>}\n  rowHeader="Name"\n>\n  <Column title="Role" width={40} />\n  <Column title="Name" width="40%" />\n  <Column title="Region" hideBelowBreakpoint="m" />\n  <Column title="Type" hideBelowBreakpoint="xs" />\n  <Column title="Time" />\n</Table>',__scope:(y={props:f,DefaultLayout:l.a,Playground:o.c,Props:o.d,Box:i.a,Icon:r.a,Table:m.a,Column:b.a,CenterContent:d.a,dummyData:c.a,DemoTableState:p.a},y.DefaultLayout=l.a,y._frontmatter=u,y),mdxType:"Playground"},Object(a.b)(m.a,{emptyContent:Object(a.b)(d.a,{height:180,mdxType:"CenterContent"},"Here be dragons"),rowHeader:"Name",mdxType:"Table"},Object(a.b)(b.a,{title:"Role",width:40,mdxType:"Column"}),Object(a.b)(b.a,{title:"Name",width:"40%",mdxType:"Column"}),Object(a.b)(b.a,{title:"Region",hideBelowBreakpoint:"m",mdxType:"Column"}),Object(a.b)(b.a,{title:"Type",hideBelowBreakpoint:"xs",mdxType:"Column"}),Object(a.b)(b.a,{title:"Time",mdxType:"Column"}))),Object(a.b)("h2",{id:"table-props"},"Table props"),Object(a.b)(o.d,{of:m.a,mdxType:"Props"}),Object(a.b)("h2",{id:"column-props"},"Column props"),Object(a.b)(o.d,{of:b.a,mdxType:"Props"}))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Table/README.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-table-readme-mdx-3d05c3408bd28dd582e4.js.map