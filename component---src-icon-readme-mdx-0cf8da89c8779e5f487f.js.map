{"version":3,"sources":["webpack:///../src/Icon/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","name","as","size","scale","vAlign","dimmed","rotate","flip","of","Icon","isMDXComponent"],"mappings":"oWAeaA,G,UAAe,S,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,QADR,QAGA,qEACA,qBAAG,gBAAO,CACN,KAAQ,6BACR,WAAc,KAFf,kCAIH,iBAAQ,CACN,GAAM,+BADR,+BAGA,kCACE,yBAAgB,CACd,WAAc,KADhB,YADF,wPAKA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAMC,KAAK,OAAOD,QAAQ,SAC1B,YAAC,IAAD,CAAMC,KAAK,OAAOD,QAAQ,SAC1B,YAAC,IAAD,CAAME,GAAG,MAAMC,KAAK,MAAMH,QAAQ,QAChC,YAAC,IAAD,CAAMC,KAAK,SAASD,QAAQ,SAC5B,YAAC,IAAD,CAAMC,KAAK,SAASG,MAAO,EAAGJ,QAAQ,WAG1C,iBAAQ,CACN,GAAM,0BADR,0BAGA,qHACA,uBAAK,mBAAU,CACX,UAAa,cACb,WAAc,OAFb,gJAOL,+CACA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,UAAD,CAAUA,QAAQ,aAClB,YAAC,UAAD,CAAUA,QAAQ,aAClB,YAAC,UAAD,CAAYA,QAAQ,gBAEtB,iBAAQ,CACN,GAAM,4BADR,4BAGA,mOACE,yBAAgB,CACd,WAAc,KADhB,UADF,QAKE,yBAAgB,CACd,WAAc,KADhB,UALF,0DASE,yBAAgB,CACd,WAAc,KADhB,UATF,kGAaE,yBAAgB,CACd,WAAc,KADhB,UAbF,0EAiBA,YAAC,IAAD,CAAYA,QAAQ,cAClB,qBAAG,YAAC,UAAD,CAAUA,QAAQ,aAArB,iCAGE,uBAHF,KAME,uBANF,KASE,YAAC,UAAD,CAAUK,QAAM,EAACC,QAAM,EAACN,QAAQ,aATlC,4BAYF,iBAAQ,CACN,GAAM,sBADR,sBAGA,4DACA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,UAAD,CAAWO,OAAQ,GAAIP,QAAQ,cAC/B,YAAC,UAAD,CAAWO,OAAQ,GAAIP,QAAQ,cAC/B,YAAC,UAAD,CAAWO,QAAS,GAAIP,QAAQ,cAChC,YAAC,UAAD,CAAWO,QAAS,GAAIP,QAAQ,cAChC,YAAC,UAAD,CAAWA,QAAQ,cACnB,YAAC,UAAD,CAAWQ,KAAK,IAAIR,QAAQ,cAC5B,YAAC,UAAD,CAAWA,QAAQ,cACnB,YAAC,UAAD,CAAWQ,KAAK,IAAIR,QAAQ,cAC5B,YAAC,UAAD,CAAUA,QAAQ,aAClB,YAAC,UAAD,CAAOA,QAAQ,WAEjB,iBAAQ,CACN,GAAM,SADR,SAGA,gHACE,yBAAgB,CACd,WAAc,KADhB,YADF,eAKA,YAAC,IAAD,CAAOS,GAAIC,IAAMV,QAAQ,gB,mMAK7BH,EAAWc,gBAAiB","file":"component---src-icon-readme-mdx-0cf8da89c8779e5f487f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Icon from './';\nimport Text from '../Text';\nimport ArrowIcon from '../icons/Arrow';\nimport DiskIcon from '../icons/Disk';\nimport PlusIcon from '../icons/Plus';\nimport SearchIcon from '../icons/Search';\nimport InfoIcon from '../icons/Info';\nimport XIcon from '../icons/X';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"icon\"\n    }}>{`Icon`}</h1>\n    <p>{`An image says more than a thousand words. ;)`}</p>\n    <p><a {...{\n        \"href\": \"/base5-ui/src-icons-readme\",\n        \"parentName\": \"p\"\n      }}>{`View all available icons here`}</a></p>\n    <h2 {...{\n      \"id\": \"using-the-wrapper-component\"\n    }}>{`Using the Wrapper component`}</h2>\n    <p>{`Using the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<Icon />`}</inlineCode>\n      {` wrapper component allows you to dynamically display icons by their (kebab-cased, not CamelCased) name. Using the Icon component will bundle the whole base5 icon set with your app. See the next section if you only need a few icons from the set.`}</p>\n    <Playground mdxType=\"Playground\">\n      <Icon name=\"disk\" mdxType=\"Icon\" />\n      <Icon name=\"plus\" mdxType=\"Icon\" />\n      <Text as=\"div\" size=\"xxl\" mdxType=\"Text\">\n        <Icon name=\"search\" mdxType=\"Icon\" />\n        <Icon name=\"search\" scale={0} mdxType=\"Icon\" />\n      </Text>\n    </Playground>\n    <h2 {...{\n      \"id\": \"using-individual-icons\"\n    }}>{`Using individual icons`}</h2>\n    <p>{`If you don't want to bundle the whole icon set with your app, import the icons individually:`}</p>\n    <pre><code {...{\n        \"className\": \"language-js\",\n        \"parentName\": \"pre\"\n      }}>{`import DiskIcon from 'base5-ui/icons/Disk';\nimport PlusIcon from 'base5-ui/icons/Plus';\nimport SearchIcon from 'base5-ui/icons/Search';\n`}</code></pre>\n    <p>{`and use them directly:`}</p>\n    <Playground mdxType=\"Playground\">\n      <DiskIcon mdxType=\"DiskIcon\" />\n      <PlusIcon mdxType=\"PlusIcon\" />\n      <SearchIcon mdxType=\"SearchIcon\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"aligning-icons-with-text\"\n    }}>{`Aligning icons with text`}</h2>\n    <p>{`When placed next to or inside of text, icons tend to sit a bit too low compared to the text's baseline. They also often look darker than text, even if they \"technically\" have the same colour. The props `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`vAlign`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`dimmed`}</inlineCode>\n      {` exist to compensate for these issues. Use the Boolean `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`vAlign`}</inlineCode>\n      {` prop to nudge the icon up by a few pixels to visually align it with its surrounding text. Use `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`dimmed`}</inlineCode>\n      {` to make the icon slightly transparent to match the text's appearance.`}</p>\n    <Playground mdxType=\"Playground\">\n      <p><PlusIcon mdxType=\"PlusIcon\" />\n        {` Without vAlign and undimmed\n`}\n        <br />\n        {`\n`}\n        <br />\n        {`\n`}\n        <PlusIcon vAlign dimmed mdxType=\"PlusIcon\" />\n        {` With vAlign and dimmed`}</p>\n    </Playground>\n    <h2 {...{\n      \"id\": \"transforming-icons\"\n    }}>{`Transforming icons`}</h2>\n    <p>{`You can both rotate and flip icons.`}</p>\n    <Playground mdxType=\"Playground\">\n      <ArrowIcon rotate={90} mdxType=\"ArrowIcon\" />\n      <ArrowIcon rotate={90} mdxType=\"ArrowIcon\" />\n      <ArrowIcon rotate={-90} mdxType=\"ArrowIcon\" />\n      <ArrowIcon rotate={-90} mdxType=\"ArrowIcon\" />\n      <ArrowIcon mdxType=\"ArrowIcon\" />\n      <ArrowIcon flip=\"x\" mdxType=\"ArrowIcon\" />\n      <ArrowIcon mdxType=\"ArrowIcon\" />\n      <ArrowIcon flip=\"x\" mdxType=\"ArrowIcon\" />\n      <InfoIcon mdxType=\"InfoIcon\" />\n      <XIcon mdxType=\"XIcon\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p>{`The following props are available on both the individual icon components as well as the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<Icon />`}</inlineCode>\n      {` component:`}</p>\n    <Props of={Icon} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}