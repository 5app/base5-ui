{"version":3,"sources":["webpack:///../src/useOnClickOutside/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useOnClickOutside","Box","Stack","Switch","React","count","setCount","isEnabled","setIsEnabled","excludedElement","spacing","ref","p","border","checked","onChange","prevEnabled","id","htmlFor","isMDXComponent"],"mappings":"oTAWaA,G,UAAe,S,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,4MAA2L,0BAAYC,WAAW,KAAvB,sBAA3L,UACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,oCAAwH,0BAAYA,WAAW,MAAvB,UAAxH,OAAmL,0BAAYA,WAAW,MAAvB,aAAnL,+DAAyS,0BAAYA,WAAW,MAAvB,WAAzS,aACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,iFACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,8CAEF,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,orBAA+rBC,SAAO,GACvuBL,QACAH,kBACAS,eACAC,UACAC,sBACAC,QACAC,UACAC,YARuuB,gBASvuBd,IATuuB,EAUvuBH,eAVuuB,GAWtuBO,QAAQ,eACb,WAAM,MAC0BW,WAAe,GAAlCC,EADP,KACcC,EADd,OAEkCF,YAAe,GAA1CG,EAFP,KAEkBC,EAFlB,KAGMC,EAAkBL,SAAa,MAErC,OADAJ,YAAkBS,GAAiB,kBAAMH,EAASD,EAAQ,KAAIE,GACvD,YAAC,IAAD,CAAOG,QAAQ,IAAIjB,QAAQ,SACtC,0CAAsBY,GACtB,YAAC,IAAD,CAAKM,IAAKF,EAAiBG,EAAE,IAAIC,OAAO,SAASpB,QAAQ,OAAzD,2CAGG,4BACC,YAAC,IAAD,CAAQqB,QAASP,EAAWQ,SAAU,kBAAMP,GAAa,SAAAQ,GAAW,OAAKA,MAAcC,GAAG,SAASxB,QAAQ,WAAY,IACvH,qBAAOyB,QAAQ,UAAf,2B,gNASR5B,EAAW6B,gBAAiB","file":"component---src-use-on-click-outside-readme-mdx-a593892d0e389b6d2cbb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport useOnClickOutside from './';\nimport Box from '../Box';\nimport Stack from '../Stack';\nimport Switch from '../Switch';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useonclickoutside\"\n    }}>{`useOnClickOutside`}</h1>\n    <p>{`This hook lets you run a callback whenever the body of the page (or any other element) is clicked, and allows you to ignore clicks on a certain element within it by specifying the `}<inlineCode parentName=\"p\">{`excludedElementRef`}</inlineCode>{` prop.`}</p>\n    <h2 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`excludedElementRef`}</inlineCode>{` - A React ref (as obtained from `}<inlineCode parentName=\"li\">{`useRef`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`createRef`}</inlineCode>{`) to an element that should be excluded from triggering the `}<inlineCode parentName=\"li\">{`onClick`}</inlineCode>{` callback`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onClick`}</inlineCode>{` - Function that's called when a click occurs outside of the excluded element`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isEnabled`}</inlineCode>{`=true] - Set to false to disable the hook`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [count, setCount] = React.useState(0)\\n  const [isEnabled, setIsEnabled] = React.useState(true)\\n  const excludedElement = React.useRef(null)\\n  useOnClickOutside(excludedElement, () => setCount(count + 1), isEnabled)\\n  return (\\n    <Stack spacing=\\\"m\\\">\\n      <h1>Document clicks: {count}</h1>\\n      <Box ref={excludedElement} p=\\\"m\\\" border=\\\"dashed\\\">\\n        Clicks inside this box will be ignored.\\n      </Box>\\n      <>\\n        <Switch\\n          checked={isEnabled}\\n          onChange={() => setIsEnabled(prevEnabled => !prevEnabled)}\\n          id=\\\"switch\\\"\\n        />{\\' \\'}\\n        <label htmlFor=\\\"switch\\\">Count clicks</label>\\n      </>\\n    </Stack>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useOnClickOutside,\n      Box,\n      Stack,\n      Switch,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t{() => {\n        const [count, setCount] = React.useState(0);\n        const [isEnabled, setIsEnabled] = React.useState(true);\n        const excludedElement = React.useRef(null);\n        useOnClickOutside(excludedElement, () => setCount(count + 1), isEnabled);\n        return <Stack spacing=\"m\" mdxType=\"Stack\">\n\t\t\t\t<h1>Document clicks: {count}</h1>\n\t\t\t\t<Box ref={excludedElement} p=\"m\" border=\"dashed\" mdxType=\"Box\">\n\t\t\t\t\tClicks inside this box will be ignored.\n\t\t\t\t</Box>\n    \t\t\t<>\n    \t\t\t\t<Switch checked={isEnabled} onChange={() => setIsEnabled(prevEnabled => !prevEnabled)} id=\"switch\" mdxType=\"Switch\" />{' '}\n    \t\t\t\t<label htmlFor=\"switch\">Count clicks</label>\n    \t\t\t</>\n    \t\t</Stack>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}