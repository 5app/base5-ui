(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./src/useEventListener/README.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));var s=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},c="wrapper";function r(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)(c,Object.assign({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"useeventlistener"},"useEventListener"),Object(a.b)("p",null,"A simple hook that adds a global event listener & cleans up after it when the component unmounts."),Object(a.b)("p",null,"By default, the event listener is added on ",Object(a.b)("inlineCode",{parentName:"p"},"document"),", but you can change the element by passing a custom target element to it as the third parameter."),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"useEventListener('click', onBodyClick);\n")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"useEventListener('scroll', onScroll, scrollContainerRef.current);\n")))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/useEventListener/README.mdx"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=src-use-event-listener-readme.6800513b0f9a40f1db8d.js.map