(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"./src/useInterval/README.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return c});var s=t("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),a=(t("./node_modules/docz/dist/index.esm.js"),{}),r="wrapper";function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)(r,Object.assign({},a,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"useinterval"},"useInterval"),Object(o.b)("p",null,"A hook for safely & declaratively setting up intervals in functional React components."),Object(o.b)("p",null,"Based on Dan Abramov's blog post ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://overreacted.io/making-setinterval-declarative-with-react-hooks/"}),'"Making setInterval Declarative with React Hooks"')),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"import useInterval from 'base5-ui/useInterval';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n\n    useInterval(() => {\n        // Your custom logic here\n        setCount(count + 1);\n    }, 1000);\n\n    return <h1>{count}</h1>;\n}\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/useInterval/README.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=src-use-interval-readme.737bfaac334bc001b784.js.map