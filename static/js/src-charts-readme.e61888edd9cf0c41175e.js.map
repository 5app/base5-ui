{"version":3,"sources":["/home/circleci/repo/src/charts/useChartist.js","/home/circleci/repo/src/charts/SimpleChart/index.js","/home/circleci/repo/src/charts/SimpleGauge/index.js","/home/circleci/repo/src/charts/README.mdx"],"names":["useChartist","hostRef","data","options","type","preserveAspectRatio","chartRef","useRef","useEffect","current","Chartist","detach","on","node","svg","_node","setAttribute","clientWidth","clientHeight","ChartWrapper","styled","div","p","getColorBlock","color","theme","defaultOptions","showArea","showPoint","lineSmooth","fullWidth","chartPadding","top","bottom","left","right","axisX","offset","showLabel","showGrid","axisY","low","SimpleChart","labels","height","series","ref","Wrapper","css","pxToRem","donut","donutWidth","startAngle","total","SimpleGauge","value","fraction","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","__codesandbox","isMDXComponent"],"mappings":"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","file":"static/js/src-charts-readme.49af885b.js","sourcesContent":["import {useRef, useEffect} from 'react';\nimport Chartist from 'chartist';\n\nfunction useChartist(\n\thostRef,\n\t{data, options, type = 'Line', preserveAspectRatio}\n) {\n\tconst chartRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tchartRef.current = new Chartist[type](hostRef.current, data, options);\n\t\treturn function cleanUp() {\n\t\t\tchartRef.current.detach();\n\t\t};\n\t}, [data, hostRef, options, type]);\n\n\t// This effect adds a viewBox attribute to the generated SVG element,\n\t// which allows it to grow/shwink along with the container when the size\n\t// of it changes - in case the change is not due to a window resize,\n\t// which Chartist already handles by redrawing the chart.\n\tuseEffect(() => {\n\t\tfunction updateViewBox(data) {\n\t\t\tconst node = data.svg && data.svg._node;\n\t\t\tif (node) {\n\t\t\t\tnode.setAttribute(\n\t\t\t\t\t'viewBox',\n\t\t\t\t\t`0 0 ${node.clientWidth} ${node.clientHeight}`\n\t\t\t\t);\n\t\t\t\tif (preserveAspectRatio) {\n\t\t\t\t\tnode.setAttribute(\n\t\t\t\t\t\t'preserveAspectRatio',\n\t\t\t\t\t\tpreserveAspectRatio\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tchartRef.current.on('created', updateViewBox);\n\t}, [chartRef, preserveAspectRatio]);\n}\n\nexport default useChartist;\n","import React, {useRef} from 'react';\nimport styled from 'styled-components';\n\nimport {getColorBlock} from '../../utils/colors';\n\nimport useChartist from '../useChartist';\n\nconst ChartWrapper = styled.div`\n\tcolor: ${p => getColorBlock(p.color, p.theme)};\n\n\t> svg {\n\t\tvertical-align: middle;\n\t}\n\t.ct-line {\n\t\tfill: none;\n\t\tstroke: currentColor;\n\t\tstroke-width: 4px;\n\t}\n\t.ct-area {\n\t\tfill: currentColor;\n\t\topacity: 0.1;\n\t}\n\t.ct-grid {\n\t\tstroke: black;\n\t\topacity: 0.1;\n\t}\n`;\n\nconst defaultOptions = {\n\tshowArea: true,\n\tshowPoint: false,\n\tlineSmooth: false,\n\tfullWidth: true,\n\tchartPadding: {\n\t\ttop: 4,\n\t\tbottom: 4,\n\t\tleft: 0,\n\t\tright: 0,\n\t},\n\taxisX: {\n\t\toffset: 0,\n\t\tshowLabel: false,\n\t\tshowGrid: false,\n\t},\n\taxisY: {\n\t\toffset: 0,\n\t\tshowLabel: false,\n\t\tshowGrid: false,\n\t\tlow: 0,\n\t},\n};\n\nfunction SimpleChart({labels, data, height, color = 'links'}) {\n\tconst hostRef = useRef(null);\n\n\tconst options = {\n\t\t...defaultOptions,\n\t\theight,\n\t};\n\n\tuseChartist(hostRef, {\n\t\ttype: 'Line',\n\t\tdata: {\n\t\t\tlabels,\n\t\t\tseries: [data],\n\t\t},\n\t\toptions,\n\t\tpreserveAspectRatio: 'none',\n\t});\n\n\treturn <ChartWrapper ref={hostRef} color={color} />;\n}\n\nexport default SimpleChart;\n","import React, {useRef} from 'react';\nimport styled, {css} from 'styled-components';\n\nimport {pxToRem} from '../../utils/units';\nimport {getColorBlock} from '../../utils/colors';\n\nimport useChartist from '../useChartist';\n\nconst Wrapper = styled.div`\n\toverflow: hidden;\n\t${p =>\n\t\tp.height &&\n\t\tcss`\n\t\t\theight: ${pxToRem(p.height)};\n\t\t`}\n\n\tcolor: ${p => getColorBlock(p.color, p.theme)};\n\n\t> svg {\n\t\tvertical-align: middle;\n\t}\n\t.ct-slice-donut {\n\t\tfill: none;\n\t}\n\t.ct-series-a {\n\t\tstroke: currentColor;\n\t}\n\t.ct-series-b {\n\t\tstroke: currentColor;\n\t\topacity: 0.2;\n\t}\n`;\n\nconst defaultOptions = {\n\tdonut: true,\n\tdonutWidth: '80%',\n\tstartAngle: 270,\n\ttotal: 200,\n\tshowLabel: false,\n\tchartPadding: 0,\n};\n\nfunction SimpleGauge({value, height, color = 'links'}) {\n\tconst hostRef = useRef(null);\n\n\tconst fraction = value * 100;\n\n\tconst options = {\n\t\t...defaultOptions,\n\t\theight,\n\t};\n\n\tuseChartist(hostRef, {\n\t\ttype: 'Pie',\n\t\tdata: {\n\t\t\tseries: [fraction, 100 - fraction],\n\t\t},\n\t\toptions,\n\t});\n\n\treturn <Wrapper ref={hostRef} height={height / 2} color={color} />;\n}\n\nexport default SimpleGauge;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {Playground, Props} from 'docz';\nimport SimpleChart from './SimpleChart';\nimport SimpleGauge from './SimpleGauge';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"charts\"\n    }}>{`Charts`}</h1>\n    <p>{`base5-UI provides a few very simple charts to illustrate trends and metrics in your UI.`}</p>\n    <p>{`The chart's colours can be customised by providing a `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` name from either the theme's `}<inlineCode parentName=\"p\">{`colorBlock`}</inlineCode>{` or current `}<inlineCode parentName=\"p\">{`section`}</inlineCode>{` palette, or any valid CSS color.`}</p>\n    <p>{`Both charts will take up the full width of their container and their height can be set using the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` prop.`}</p>\n    <p>{`The charts are generated using `}<a parentName=\"p\" {...{\n        \"href\": \"http://gionkunz.github.io/chartist-js\"\n      }}>{`Chartist.js`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"simplechart\"\n    }}>{`SimpleChart`}</h2>\n    <p>{`Takes a `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` prop that must contain of a simple array of number values which will then be plotted out as a pretty graph.`}</p>\n    <Playground __position={0} __code={'<SimpleChart data={[5, 3, 4, 2, 5, 2, 1]} height={125} color=\\\"links\\\" />\\n<br />\\n<SimpleChart data={[2, 1, 9, 6, 6, 3, 7]} height={125} color=\\\"highlight\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SimpleChart,\n      SimpleGauge\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtKZnEI2B7D8e0jVldoPTgARyG-CiCDgSQSN_cjXGFAiIPYNiyRgABxMI0iw6jaPoxjOOY1jSME4SYG4oj2EDSVRJNTV2jBVBdBRY5Tlw5wCESLF2G4dhgHWKIBGeVArnaAAGdgkxmLB2j3asZg7FgZzsgAWFz2AANhctz1jAYCADFvWgRI7P4ZxDgRB1MBgoR-CWIhqEoOBPIRULq3CmgSNwy52AARl89z5C0nSpgAQTmUz2AjKDyBsKB0DDdh5A5UyxGa6MZHYFFjJgbhgDwwzRrgeQtxrYA2ugTrggAMhW8ZEnmShmkWjquu4A65TAZDJQGVB2nYAB-DYlrDCNequXbltQarqykGQqzfMwYXVY4YDAMIoCme6-oGt6GuXasExUggcAizIUivAg5prWs-LIpjjmiVxxoAbQAViWJMlkq9gACYlkJ8mljKgBdTDNggFJCHGsqyfxzCqCgIU-BAKA0G2OB-HYTcVwTDwjlFqGa0YdGYA44UxZrdBsbxinyqWABOJZAp1omlgAdnppWLEZ5mCFZ9nXtR1GuZ5_gbGZ_nzf4JWpdRqQYbhhGkbmqQIc-swvxAOiGLaqSWLlhWCEkVRsH_LQKGA_QGEI36YaWYA8hgMUwEwqj1LNRTfpG2AcgL9pS-yc1PnXGg4D9W1fuAU9HG5gRr25nZ87dGiPRwD1wmgFi7YEBuVX9VA0_tbPo9sKVe4HyRZ6Y-fG-06hdOjgB1TI5gyJqq_QHAZGKMECFHq4ABJgBmUHW8odvO9ObYIxmD5H6FUkcAmGAjw5eQE9z79TgKwWcFl_SiAIKwDIMQ4hQHNPEJmtl2BEC4OgWAQCCCvV4LDSU5p-bOnMufXBkAEhXFQNQGAWDcEoiENsUqvQBBhgIG3IUNDmKokoAw80OJ0ATCuP5LAWCcF4ItJxcUxDIGkOgFAR6fQWFsIEBwyguUXixXYPZHAZURHnw-BaRCXApG4NoVwhhVwPBwR2CotRRkrhaJ0efV6xQgEb1QLpTAANQhAx1DMbs7imoQNocMEYdVTRXFRAydywTRjQUoGgAgVwAZQDgDAaJBBCEwGcJlEQeAknxFSek46CRt5cAEeMNEaTz7h2FNBLyBQrhBKgREGYgj0m4K8DcSIbSSEZP-okzR7TURM0IPY9JShz6uCwLYAAGo03p20wCpIGfZIZcAQkABlXCBDkYaApVTpHMRCQJfo6B8kpIObgiZkCpm2AAJrzMOYs5ZYzenrNGFsnZ5zClvOOac75lyoHcxGK8yB1zAFaWOtpfxvFZLRxanBHZcAlgqwIK4JYZtCBLFHk1dohDBbtB6sYi-m8pjDBRLnJq2dc4RlQN4qAH4tK4NqnsPxZ07BmSabggeJ9_qAwIL4_xyLemYoIOM1xuCV5SXnhGclBBc6Z16UZeYdkNloAUkM1FrhHkmKBds-cwrDm0IyBAeAVxcZatpkM65urVFCqGf2eAGQYF1RylseV0QBh2Uoc6fKVzGWT1wV0AgfRzCMB3nvWEE5_rjTlbnTmn8BDjVHphTcE8cHOiwEpTx_LYXsSYhPYOodJLCkjrJIS6IYCx3DBoROQE9CgXAkpDO5lqX_R7thU0ioJ7TymEfTOZwZpqUrkZMuNdHRUPruvXt5kXKWEoGKIgHaxL90HjEFJy8p7MWLvaFuo4lHP27sOpeS8h4btHuPLSM6pXCnnseweqS54onXiy3eswo1mSPifNgZ9IGUBgQIMAwKrg2E7HQLBN877cCrLq9-or2BrV6YO39urcGiuvrfLA87F1v3wDAEZBAAEcOKBm5liaMNQf6g_J-XdX7v1Ht_X-_8IWBuRsNMBxLcEAbgfERBzsUFoM7Jgpxej8FwH5giS01BwicYIGQ3ZPrqEicgfo80qS4RwEQbJuh3DGEKP0Eo3RKmxMmvgOaDw2mzF6eYQZxNNiJTqPsTgMmRmXE1VJX9LxPi2Wb0CefE4dKBmRMBQF8IpT-F5LlAADnsgAUj9ZwqSdUZywCuGTA2qzz4RDRbssm9lMuQPeSMT584AXpJqQQOpnYGmDLMCxswULTrMjlhWtILVWDxCib4fD5tsWJtxfihuRKmksrjf9KlqSaV0oXBKkl7iF5mjOk1DrUAGTsCMOVfLs2WV2vZX5w5PKc3eIFT59xQzRXiqZSGx9q8USyuyvK_6irDnKtKu0aCpqEu4K1TqqBxqNPmulIt6gNN8vsHNK6YHqArW9JtVA3bm9xkBvPsG0NtY337yOF0MAsaHvxu6wR2NPXCAi3Jgm9uybE2prEOmrSP17RHaBnm_irWlOoCLRJM9I9E1wAToBXQIEDBgRnW1GUrhh2i8iK4c0mgX0efiDMPwTUIwMZCJlZChG-rVLwGLlXiavpQJwArvwEZvRtBoAb7lg77quJZWgnwZk9ftz6-3ZwuVuhmXaHgcTr5QYRg8BSJRSwzca96tB7XYucD2_94HxNLuv5q_N2Kwsrv3fI7cR4ziDDzBmWj-0SxEpthuRNCkDwr5bceedoQYIueIBYEfCMGwtBi-dFL-X9z83OBwC1FnpqOLoMbF16PDkOBVtoNQO4BEINGCaJwL5JME8WW2DVebPv_WB8AEJbA94EK_YfrjHjKVHGj8XAvMgogKOMbAUwcXhSOOL54MDzAB52Ihc3OQ7Z9A77pM__gpiO-qTj38yzyUVxWsgDwjFWUGWgK0QNg5ASyr1YXXzlEbxeAUjMDD36gjG3yzydyFF6mukQNAKuBVl3yUXT0Pz1FcAYRCBTyFFoI8HHEQIPnoNIIYQEHckP0wHmAwEv2ZEb1HE2COHHFsFoLYL2COEQLoIEG_zJRGSkMd1VwBklHoLMgcUwPPhwN3zwIEAIPYGYNQB0KWGUIiF0PYBIKzzoCML2RUN0NcUaxhWoyFEPT3zj3xD_hgF6iaVRwEHMCYxgFxlHlpnYAAB8Qj3CjwTxuYA8UkP4aMX44BAjE1giwjpDadJ56dIJJkoBFd0Vz57d0k2C6B0kDDytgJz8xVz5HY8BED0ktDtg6i4AV8sVz4nCO5aMqpC0lAQ4JIKsWIb0YgUQ-dtABcU5hceIs5JsntchUkzwwAwB3Vl1C5u0m57Qn0F5sIKs157CToYUBiZUqi8cntz4JpsYlgEczsNp5hcU1VfVSQuh1MXU3VJQRRPVKBXovDADO8KtKUzI20wBaV6V09JVZj5j3UIwQYB8uUL4mJc4Ph9NMwzJnQxh1jcZXtaZ7sKV_p4SbMaAUUzjWUhVkcoEfDzAHCltyByRUAABVGYEGaE5lWE7EphFhXlNFNqG3WHERJYC1AksbMAc407ZFK4mAWmYEmOSQKwAkaEME1SLyOwcXVgU1EYa8bwEIG4foDwcIboCIdwkcZ0TIWgHIZwAANQEmhEvH0HSUP1QLahCASFGDsHHF1LfxGEkHWRxFQF2HiGoFnHzDxF_kLBoFcHVSOAEL8M2GGggBKnPkP22k4Bvz8BnHgHB04HMDiFST1PDmTK73YEoSmHQDW11PF09JODGAeOjMBRtJsDtPWPtNNHQGSCTIwRTI8GSC6E6lcE9NnEDIqxwHPmzjmIWMlAhMwNk3JOZFCBmFRRgBNOVNVPry1U-KNTm10koRSjMi1RwFAVnDWixjRW3LARwAAH11y2dUMYhmhaVARlyLzcEzztzRw6oNSIAtTaAowVzdV2glSYAVTvAvs_soFihHJHIb4HzKTTUaBwsJhMIwLAQPh-Z9AAAJYnbBFDQC3BYki8iAK8x1R4mAV1eYF4t428jCqBB85ZZ84ZN8mAD8u8wC9oPC51Ai54j1bsAC-ipigQJ4oitigYXpC8rCwC0RXVES7BJDJksAHE1k6gR8cgU0I04vKcmcuc38hc4kpQdgQIyS-4p1bili3i147sMU9I76LNX6RnKYfYlELo5QYtLnTdF4XnACEY5ORtFlIQEQCKYCYqD3cqQKHY6FJbLoIgedaCevEK0ijyv-DlaNIgbct4OhAoSApYEK0fOgFIAsCHJMYk0k9gAAahCrsA208oIG8qKkrNMtQAnPMDnQXXnE9RgTfhJHYAD1SXKoIF8qWGQheAADlvRPDiU8qAproApJS2qYAOrfKCrcgt1-qjxzDZrPF1V0AqqWU6rF0moAoB8NqGqYgmqXJUrnwprKylh5RrR091qsNKAzxZRHdDrWqKQmpSqTqSoxzdq4J9raKHqJqzq_528MjzLd0XqfLTq4qwqWrdqiBSRrrbqWNg5cpthXA0gE5qB-c3KhcQAIELB-AJ8jx-Arh-AfhixqgMhzQfx-J0p1h-AAN8hqACb2B-AtFmaqbqx-Byh5KIBTsGb-A6oozfxoQsBvR-I_oyRKBEhcw8hL8u0LRia_hSxWacaQAog0AeaVAa0E5FbGaQBuC6BMBtJTUhYkApFUZ2b9I1aAA9MqZzHAeyLWpWmWtWsqQKHAKLHAQKe27Wo-cddMfQI2wmkAXyHAJMZzT2omnXKXGXf27Wi2smW2ufMOnQW7UQY2_gC2hxa2pMROmWqTIgJ2l2t2j2kAdYV6eQIteW3AXQSAFIVG9nVyhtTGiyEAWgH0LIAmomhSmAc0HO99fgMu-QAeoAA`} mdxType=\"Playground\">\n\t<SimpleChart data={[5, 3, 4, 2, 5, 2, 1]} height={125} color=\"links\" mdxType=\"SimpleChart\" />\n\t<br />\n\t<SimpleChart data={[2, 1, 9, 6, 6, 3, 7]} height={125} color=\"highlight\" mdxType=\"SimpleChart\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"simplegauge\"\n    }}>{`SimpleGauge`}</h2>\n    <p>{`Takes a single `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop that must be a Number value between `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` which will then be plotted out as a pretty (half of a) pie chart.`}</p>\n    <Playground __position={1} __code={'<SimpleGauge value={0.3} height={200} />\\n<br />\\n<SimpleGauge value={0.8} height={150} color=\\\"positive\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SimpleChart,\n      SimpleGauge\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtKZnEI2B7D8e0jVldoPTgARyG-CiCDgSQSN_cjXGFAiIPYNiyRgABxMI0iw6jaPoxjOOY1jSME4SYG4oj2EDSVRJNTV2jBVBdBRY5Tlw5wCESLF2G4dhgHWKIBGeVArnaAAGdgkxmLB2j3asZg7FgZzsgAWFz2AANhctz1jAYCADFvWgRI7P4ZxDgRB1MBgoR-CWIhqEoOBPIRULq3CmgSNwy52AARl89z5C0nSpgAQTmUz2AjKDyBsKB0DDdh5A5UyxGa6MZHYFFjJgbhgDwwzRrgeQtxrYA2ugTrggAMhW8ZEnmShmkWjquu4A65TAZDJQGVB2nYAB-DYlrDCNequXbltQarqykGQqzfMwYXVY4YDAMIoCme6-oGt6GuXasExUggcAizIUivAg5prWs-NgIT0W6Vh4gZcb7JwJNMM2CAUkIcaACZ7PszDNxXBMPCOOmoZrRh0bkrH2BxqA8eAAmAA5iZgUnyeAMqAFYacLKAhT4EBBXyGJWEZEB2GZ1GpBhuGEaRuapAhz6zC_EA6IYtqpJY9mOOFSRVGwf8tAoYD9AYQjfphpZgDyGAxTATCqPUs1FN-kbYByAP2lD7JzU-dcaDgP1bV-4BT0cGWBGvGWdn9t0aI9HAPXCaAWKodOE5Vf1UDd-1vetmJdIjgvJFrpjbBfCuzFqhwmIAdUyOYMiaqP0BwGRijBAhS6FK4ABJgBmUHU8odPM9ObYIxmD5l6FUkcAmGAjw5eQO_9ZHhtYWcLNP3gCGV4VYnic14lJ2z2CILh0FgDuCFem-PgtKAaBuhXxvjfSACQrioGoDAb-N8URCG2KVXoAgwwEDTkKWBzFUSUEQeaHE6AJhXH8lgb-v9YaSifqacyE8wHQCgI9PoqD0ECEwZQXKLxYrsAJmVUhE9_7mkQlwah18sEINKh4OCOxWHsKMlcbhvDUDFBPl3TAANQhAx1DMbsqA7BmRAcxYYIw6qmiuKiBk7k4GGOgpQNABArgAygHAGAFiCCAOdM4TKIg8D2PiE4lxx0Eg9y4IQ8YaJnET3NsKaCXkChXH0TfCIMwiEuJvl4G4kRkk0Ncf9OxXCUmohFrk-yLilAT1cFgWwAANOJWTtpgCcUU_JcBDEABlXCBHoYaXx4SRHNNGAJfo6AfGOJ6TfUpp9ym2AAJo1JEXUhpcimmtPafOYZfisl9JGAMrgazRmiFcaMRZE9xnHy0sdbS2jeKyTri1OCHS4BLHQNEVwSwSZkwIEsKeRwzLtDcdsBOPVhE3y7sMFEvsmre19hGVA6ioAfi0sC6guk2HaN0UC_ZBdR7_UBgQTRqL8lvMICUk-N8W5STbhGUFBBfaeyyUZeYdkWlAPyqAggTyCCuFmaym-dz5wPKyXAjIEB4BXAANrstcAAXXyeM1lKKzr8pEf2eAGRlZ1Rylsal0QBh2Sgc6FlP94WVxvl0AgfRzCMDrn3WYsIJz_XGlS32mEvnjS-bTMQFdf7OiwEpVROKrnsSYhXY2ptJLCktrJTGaRbbhg0I7ICehQLgSUh7cykL_o52wqaRUFdq5TGHp7M4M01KRyMmHGOjpoHx0TlXHi88sCWEoGKIgmaxL50LjERxzcq7MWDvaFOo5mGr2ziWpuTci5dq-eXLSebchOLrm3Udhd52txRDWru1qB7fOGmW7Io82Dj1PpQO-YAZYjCuDYTsdBv5zwXtwKsrLN6EqmGtLJRbD3cv3oU2e9bG3No3vgYW7yj6YOKF6xF6cf13v6kvFeWd16by-bvfeh9TnGrPnAC-6Kb53xiHEKAT9AEpFfu_TsX9jl8IoXAQBCJLTUHCNhgg4DOl6pgRR0-_CnFwjgE_Rj8CcFIMYfoZhCi_5UaFfAc0Hg-PYMQQwlBwnt4sNqTIzhBMKYKKUTVJFUw_XqNxVohVTV9EnBhbksxezTPhCCQQ7xcp-b2QAKQGpRFJOqM5YBXApgAdmKRPCIHLOlUz86fTZbSOm7JcZEgg0TOyxLyWYNDZhzmnWZOzKNMAWrc3Mb4IDRLpZCiar8tA_z2iAv0SC7K1L_oQqcVCmFC4SWTx066M0Z0mrZe6EYcq1Mmtd3lUi4zWTMV6Y0YZpFBK8sfOOU1sl98USUqqzSxj9LSrtGgsKg1N8JVcv2YK7jYrpRteoEsMq1N2Dmla6l1A0qsmyv2QNnRJSjUT1Nea2sm7bVdDAA6pbGbcuFIdVNtW7AKbOqU66pT7rPVaR-vaUbxFI3yWDUoE2EkJ0lyU3AB2gFdAgQMGBWdbUZSuBLcTyIrhzSaHXS1-IMw_BNQjEhkImVkIEF6veiJeASdM6U19DFdO_ARm9G0Gg_OxNwDgPdZRLX34-DMrz9OnylPOFyt0H5eBqOvlBhGDwFJmFLBF2zjnD7J7c4pzgOXuv9dKeV0rlnouPkFYEKriUMAXvaRa08gQiDzBmSt-0CREpthuRNCkDwr4Zc6KmERwgwR_cQCwI-EYNhaCh86OHyP2no-cDgFqTiuwzJfNBuTqIiuhQchwDzd-qB3AIhBowLhOBfJJgrl3WwTL3lNWL_e9gABCWw-effl4EB7x4ylRzvdJ3jzIKICjjGwFMYv4Ujik-eMrcweudiIVFzkKefRs-6Rn_4KYCuIm24nt77YzCivWT1xGYpeSn8E28xyA1se0FKaKynl4CkzAm-akHwLxH16mug_xvyuCv2YTH0kHYD1FcEQRCGdyQI8HHA_0HkKyvwyHcnH0wHmAwHn2ZBT1HE2COHHFsCQKvz2COA_2d0PymBsDJloIV2ZwBklEKzMm4RNwniAOHy-VAPYHQNQBHyWDYIiFH3YEgILzoBEK6XYNHxPhS0uVgyFGHXXmZxQ3d3RTewEHME0NFS-UlXYAAB9jD8QD4_xMRKA9dHEt44M144ADClMjDTDncYdK44dIIykoB6cXkJ45cXEsDUAXEhCotgJZ9ptT5GC8AP8XFeDtg4i4BO8iUJ4VCM54MqoUdlBQ1osWI5t65YYAJtA8cXZCc6100wAlhvYzwwAwBNVW1A4c0k57QF0G5c5os24a0lD2t8iKUJ5HV_oXEJpnklhHsHkNp5gismV9VSQuguM1UNVJQRRtVKBXpeoKsWtotwUzIKjoVYUPdSUnEai6jJQIwQZe94kzcpJfYPghNMwzJnQxhWiCBRVVtJVFswV_pbiFMaBHkRi9hxsdEXt9kdDzBujmRyByRUAABVGYEGS44FJiG45BVBLFDlNqaXO7UhJYcVf4gYyogE_FCYmASVA4ggcfawCg_6E4qYLyOwUnVgYVEYa8bwEIG4foDwcIboCIcwkcZ0TIWgHIZwAANQEmhEvH0BcXHx_zahCASFGDsHHB5J3xGEkGaRxFQF2HiGoFnHzDxH3kLBoFcCASOGIL0M2GGggBKgnnH22k4CXz8BnHgAu04HMDiCcV5PNidNz3YCgV0wZCHCQI1JODGDmKtL2WlJsFlOeLlNNHQGSEdM_mdI8GSC6E6lcA1NnANOixwAnmqNqM1TOIAMuPBPMFCBmHZRgGFKZJZKTwlXWIFWaxzygRSjMglRwEw1nDWmOGeQ7IvhwAAH0Wy2MREb4IBmhoVAQGzRz9lhyOzRw6p2SIBOTaAowZzWV2hGSYBmTvAts9t9lihHJHI545zIThUaAbMJhMITzAQPhAF9AAAJKbeQD9fcm-YEz9cc5qZVeYmAdVeYJYlY6cz9VlOchpRcgpFczLRsz9doH81VP8xYrVbsPckC24OYhC_8zVZY7sGC_ZD8_cshVlIin-N9JEr4lE48agR8cgU0QU0Pcsys6s7c2s4EpQdgAw8igk-CgQBYgC5CgYUk9w76H1X6BHOdGAZ4rItHBiDHbtF4bHIop2RNAnBNXSIQEQCKYCYqdXcqQKRQk6S5LoIgRtaCJPYy4Cps9Sg-NFYyjst4eBAoB_JYOy2AGcAsS7JMYE0E9gAAamMrsG6w0oIC0qKnDOEtQFLL7AbSbXnG1WVg3hJHYD1ycVCoIB0qqJ7QADlvQtD9EfKAproApYCUqYA0qdK_LchsrcrJCqrVEgF0AIqu4XI_0D4moApe8WrYq4IlZMsXIXLnxyrwylh5RrQPdmqYqzxZQFd-rkqKQmpgqhqSoACuqxQeq2A-qkrSqRqD4s8PDRL-1FrtLhq7UTLKAzLSQYrm1LrG0pq0NjZcpthXA0gHZqBcdnYk0r4LB-Ba8jx-Arh-AfhixqgMhzQfx-J0p1h-A758hqB_r2B-ACYkbIbqx-ByhaKIBAT4b-A6pLTfxoQsBvR-I_oyRKBEhcw8h59s0LQga_hSwUbvqQAog0BsaVBY0HYGaEaQA8C6BMBtJhU4B4avqaw0b9JWaAA9MqHACmHAeyTmxm6m1msqQKHAfmHAQKeWrm4eCtdMfQQWpALm3yQmaWzWwG83KIKnfWgGkAcWmWgmXyU2nQVdUQA2_gcW7hKWpMR26mujIgJWlWtWjWkAdYV6eQENOm3AXQSAFIV61Ad6lShgCyEAWgH0LIf6wGuimAc0H2m1fgMO-QAuoAA`} mdxType=\"Playground\">\n\t<SimpleGauge value={0.3} height={200} mdxType=\"SimpleGauge\" />\n\t<br />\n\t<SimpleGauge value={0.8} height={150} color=\"positive\" mdxType=\"SimpleGauge\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}