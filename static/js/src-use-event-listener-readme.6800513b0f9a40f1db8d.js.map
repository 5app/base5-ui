{"version":3,"sources":["/home/circleci/repo/src/useEventListener/README.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wXAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,0HACA,mEAAkD,0BAAYC,WAAW,KAAvB,YAAlD,qGACA,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yE,qLAQTJ,EAAWK,gBAAiB","file":"static/js/src-use-event-listener-readme.2b7a5a51.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useeventlistener\"\n    }}>{`useEventListener`}</h1>\n    <p>{`A simple hook that adds a global event listener & cleans up after it when the component unmounts.`}</p>\n    <p>{`By default, the event listener is added on `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{`, but you can change the element by passing a custom target element to it as the third parameter.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useEventListener('click', onBodyClick);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useEventListener('scroll', onScroll, scrollContainerRef.current);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}