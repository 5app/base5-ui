{"version":3,"sources":["webpack:///../src/TextLink/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","spacing","href","as","bold","stealthy","of","TextLink","isMDXComponent"],"mappings":"8RASaA,G,UAAe,S,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,YADR,YAGA,+DACE,yBAAgB,CACd,WAAc,KADhB,OADF,wCAKE,yBAAgB,CACd,WAAc,KADhB,MALF,sDASA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAYC,QAAQ,IAAID,QAAQ,cAC9B,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,uCAEF,YAAC,IAAD,CAAUG,GAAG,SAASD,KAAK,IAAIF,QAAQ,YACrC,+CAEF,YAAC,IAAD,CAAUI,MAAI,EAACF,KAAK,IAAIF,QAAQ,YAC9B,kCAEF,YAAC,IAAD,CAAUK,UAAQ,EAACH,KAAK,IAAIF,QAAQ,YAClC,4DAIN,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOM,GAAIC,IAAUP,QAAQ,gB,uMAKjCH,EAAWW,gBAAiB","file":"component---src-text-link-readme-mdx-d772c4c7b1bb19ed4414.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport InlineList from '../InlineList';\nimport TextLink from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"textlink\"\n    }}>{`TextLink`}</h1>\n    <p>{`Simple styled text link. Renders as an `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<a>`}</inlineCode>\n      {` tag by default, but you can use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`as`}</inlineCode>\n      {` prop to render as a button or a router link, too.`}</p>\n    <Playground mdxType=\"Playground\">\n      <InlineList spacing=\"s\" mdxType=\"InlineList\">\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`Hello, world!`}</p>\n        </TextLink>\n        <TextLink as=\"button\" href=\"#\" mdxType=\"TextLink\">\n          <p>{`I'm secretly a button`}</p>\n        </TextLink>\n        <TextLink bold href=\"#\" mdxType=\"TextLink\">\n          <p>{`I'm bold`}</p>\n        </TextLink>\n        <TextLink stealthy href=\"#\" mdxType=\"TextLink\">\n          <p>{`I blend in with my surroundings!`}</p>\n        </TextLink>\n      </InlineList>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={TextLink} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}