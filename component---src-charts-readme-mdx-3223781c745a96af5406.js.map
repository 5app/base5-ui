{"version":3,"sources":["webpack:///../src/charts/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","data","height","color","name","labels","isEmpty","of","SimpleChart","value","SimpleGauge","isMDXComponent"],"mappings":"8RASaA,G,UAAe,S,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,UADR,UAGA,gHACA,6EACE,yBAAgB,CACd,WAAc,KADhB,SADF,iCAKE,yBAAgB,CACd,WAAc,KADhB,cALF,eASE,yBAAgB,CACd,WAAc,KADhB,WATF,qCAaA,yHACE,yBAAgB,CACd,WAAc,KADhB,UADF,UAKA,uDACE,gBAAO,CACL,KAAQ,wCACR,WAAc,KAFhB,eADF,KAMA,iBAAQ,CACN,GAAM,eADR,eAGA,gCACE,yBAAgB,CACd,WAAc,KADhB,QADF,gHAKA,+CACE,yBAAgB,CACd,WAAc,KADhB,QADF,+CAKE,yBAAgB,CACd,WAAc,KADhB,UALF,8HASA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAaC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,OAAQ,IAAKC,MAAM,QAAQH,QAAQ,gBAC7E,uBACA,YAAC,IAAD,CAAaI,KAAK,QAAQH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAKI,OAAQ,CAAC,MAAO,MAAO,OAAQH,OAAQ,IAAKC,MAAM,YAAYH,QAAQ,gBAC7I,uBACA,YAAC,IAAD,CAAaM,SAAO,EAACJ,OAAQ,IAAKC,MAAM,WAAWH,QAAQ,iBAE7D,iBAAQ,CACN,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAOO,GAAIC,IAAaR,QAAQ,UAChC,iBAAQ,CACN,GAAM,eADR,eAGA,uCACE,yBAAgB,CACd,WAAc,KADhB,SADF,6CAKE,yBAAgB,CACd,WAAc,KADhB,KALF,QASE,yBAAgB,CACd,WAAc,KADhB,KATF,sEAaA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAaS,MAAO,GAAKP,OAAQ,IAAKF,QAAQ,gBAC9C,uBACA,YAAC,IAAD,CAAaS,MAAO,GAAKP,OAAQ,GAAIC,MAAM,WAAWH,QAAQ,gBAC9D,uBACA,YAAC,IAAD,CAAaM,SAAO,EAACJ,OAAQ,GAAIC,MAAM,WAAWH,QAAQ,iBAE5D,iBAAQ,CACN,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAOO,GAAIG,IAAaV,QAAQ,gB,qMAKpCH,EAAWc,gBAAiB","file":"component---src-charts-readme-mdx-3223781c745a96af5406.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport SimpleChart from './SimpleChart';\nimport SimpleGauge from './SimpleGauge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"charts\"\n    }}>{`Charts`}</h1>\n    <p>{`base5-UI provides a few very simple charts to illustrate trends and metrics in your UI.`}</p>\n    <p>{`The chart's colours can be customised by providing a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`color`}</inlineCode>\n      {` name from either the theme's `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`colorBlock`}</inlineCode>\n      {` or current `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`section`}</inlineCode>\n      {` palette, or any valid CSS color.`}</p>\n    <p>{`Both charts will take up the full width of their container and their height can be set using the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`height`}</inlineCode>\n      {` prop.`}</p>\n    <p>{`The charts are generated using `}\n      <a {...{\n        \"href\": \"http://gionkunz.github.io/chartist-js\",\n        \"parentName\": \"p\"\n      }}>{`Chartist.js`}</a>\n      {`.`}</p>\n    <h2 {...{\n      \"id\": \"simplechart\"\n    }}>{`SimpleChart`}</h2>\n    <p>{`Takes a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`data`}</inlineCode>\n      {` prop that must contain of a simple array of number values which will then be plotted out as a pretty graph.`}</p>\n    <p>{`You can also provide a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`name`}</inlineCode>\n      {` prop for the tooltip value and an array of `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`labels`}</inlineCode>\n      {` for the x axis. When you specify more data points than labels, the labels will repeat to match the number of data values.`}</p>\n    <Playground mdxType=\"Playground\">\n      <SimpleChart data={[5, 3, 4, 0, 5, 2, 1]} height={125} color=\"links\" mdxType=\"SimpleChart\" />\n      <br />\n      <SimpleChart name=\"Opens\" data={[2, 1, 9, 6, 6, 3, 7, 3, 6, 7, 8, 10]} labels={['Mon', 'Tue', 'Wed']} height={125} color=\"highlight\" mdxType=\"SimpleChart\" />\n      <br />\n      <SimpleChart isEmpty height={125} color=\"positive\" mdxType=\"SimpleChart\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"simplechart-props\"\n    }}>{`SimpleChart Props`}</h3>\n    <Props of={SimpleChart} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"simplegauge\"\n    }}>{`SimpleGauge`}</h2>\n    <p>{`Takes a single `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`value`}</inlineCode>\n      {` prop that must be a Number value between `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`0`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`1`}</inlineCode>\n      {` which will then be plotted out as a pretty (half of a) pie chart.`}</p>\n    <Playground mdxType=\"Playground\">\n      <SimpleGauge value={0.3} height={125} mdxType=\"SimpleGauge\" />\n      <br />\n      <SimpleGauge value={0.8} height={80} color=\"positive\" mdxType=\"SimpleGauge\" />\n      <br />\n      <SimpleGauge isEmpty height={80} color=\"negative\" mdxType=\"SimpleGauge\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"simplegauge-props\"\n    }}>{`SimpleGauge Props`}</h3>\n    <Props of={SimpleGauge} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}