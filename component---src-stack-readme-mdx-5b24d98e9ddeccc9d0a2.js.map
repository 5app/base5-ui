{"version":3,"sources":["webpack:///../src/Stack/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","spacing","href","as","breakpoints","above","of","Stack","isMDXComponent"],"mappings":"gUAYaA,G,UAAe,S,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,SADR,SAGA,mFACE,yBAAgB,CACd,WAAc,KADhB,OADF,iBAKA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAOC,QAAQ,MAAMD,QAAQ,SAC3B,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,8BAEF,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,kCAEF,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,oCAIN,iBAAQ,CACN,GAAM,uCADR,uCAGA,oLACA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,yGASL,iGACE,qBAAY,CACV,WAAc,KADhB,OADF,iDAKA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,sNAUL,iBAAQ,CACN,GAAM,mCADR,mCAGA,gCACE,yBAAgB,CACd,WAAc,KADhB,UADF,wJAMA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAOG,GAAG,OAAOF,QAAS,CAAC,EAAG,IAAK,MAAOG,YAAa,CAAC,IAAK,KAAMJ,QAAQ,SACzE,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,+BAEF,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,8BAEF,YAAC,IAAD,CAAQK,MAAM,KAAKL,QAAQ,UACzB,YAAC,IAAD,CAAUE,KAAK,IAAIF,QAAQ,YACzB,iCAKR,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOM,GAAIC,IAAOP,QAAQ,gB,oMAK9BH,EAAWW,gBAAiB","file":"component---src-stack-readme-mdx-5b24d98e9ddeccc9d0a2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Box from '../Box';\nimport Hidden from '../Hidden';\nimport Text from '../Text';\nimport TextLink from '../TextLink';\nimport Stack from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"stack\"\n    }}>{`Stack`}</h1>\n    <p>{`Control vertical spacing between Stack items. Supports all `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`Box`}</inlineCode>\n      {` style props.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground mdxType=\"Playground\">\n      <Stack spacing=\"xxs\" mdxType=\"Stack\">\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`Home`}</p>\n        </TextLink>\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`Projects`}</p>\n        </TextLink>\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`About us`}</p>\n        </TextLink>\n      </Stack>\n    </Playground>\n    <h2 {...{\n      \"id\": \"conditionally-rendering-stack-items\"\n    }}>{`Conditionally rendering Stack items`}</h2>\n    <p>{`To conditionally render Stack items, simply ensure that a falsy value is returned as a direct child of the Stack component in place of the respective item.`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`<Stack spacing=\"s\">\n    <>Milk</>\n    <>Eggs</>\n    {shouldRenderItem && <>Cheese</>}\n</Stack>\n`}</code></pre>\n    <p>{`Please note that a nested falsy return as shown in the next example will `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`not`}</strong>\n      {` work, and will generate superfluous spacing:`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`<Stack spacing=\"s\">\n    <Item>Milk</Item>\n    <Item>Eggs</Item>\n    {/* Don't do this, it will create extra spacing for the hidden item: */}\n    <Item isHidden={shouldRenderItem}>Cheese</Item>\n</Stack>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"responsively-hiding-stack-items\"\n    }}>{`Responsively hiding Stack items`}</h2>\n    <p>{`Use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`Hidden`}</inlineCode>\n      {` component to hide Stack items below or above a certain breakpoint.\nThe following list has a third list item that will be hidden on larger screens.`}</p>\n    <Playground mdxType=\"Playground\">\n      <Stack as=\"list\" spacing={[0, 's', 'xl']} breakpoints={['m', 'l']} mdxType=\"Stack\">\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`Milch`}</p>\n        </TextLink>\n        <TextLink href=\"#\" mdxType=\"TextLink\">\n          <p>{`Eier`}</p>\n        </TextLink>\n        <Hidden above=\"xl\" mdxType=\"Hidden\">\n          <TextLink href=\"#\" mdxType=\"TextLink\">\n            <p>{`KÃ¤se`}</p>\n          </TextLink>\n        </Hidden>\n      </Stack>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Stack} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}