{"version":3,"sources":["webpack:///../src/BackButton/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","InlineList","BackButton","BackButtonProvider","Button","TextLink","pathname","baseComponent","as","href","icon","of","isMDXComponent"],"mappings":"gjBAWO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,mFACA,iBAAQ,CACN,GAAM,eADR,eAGA,qRACA,kGAAiF,0BAAYC,WAAW,KAAvB,gBAAjF,+NACA,sFAAqE,0BAAYA,WAAW,KAAvB,sBAArE,yFAA6N,0BAAYA,WAAW,KAAvB,eAA7N,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8RAaL,qBAAG,0BAAYA,WAAW,KAAvB,sBAAH,+FAAiK,0BAAYA,WAAW,KAAvB,cAAjK,2BAAmP,0BAAYA,WAAW,KAAvB,cAAnP,0BAAoU,0BAAYA,WAAW,KAAvB,YAApU,oDACA,iEAAgD,0BAAYA,WAAW,KAAvB,iBAAhD,iEAA2K,mBAAGA,WAAW,KAAQ,CAC7L,KAAQ,2BACP,0BAAYA,WAAW,KAAvB,eAFL,yGAEyK,0BAAYA,WAAW,KAAvB,MAFzK,0FAGA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0UAAuVC,SAAO,GAC/XL,QACAH,kBACAS,eACAC,UACAC,eACAC,eACAC,uBACAC,WACAC,cAT+X,gBAU/Xf,IAV+X,EAW/XH,eAX+X,GAY9XO,QAAQ,cACd,YAAC,IAAD,CAAoBY,SAAS,eAAeZ,QAAQ,sBACnD,YAAC,IAAD,CAAYa,cAAeH,IAAQI,GAAG,IAAIC,KAAK,iBAAiBC,KAAK,QAAQhB,QAAQ,cAArF,eAGA,uBACA,uBACA,YAAC,IAAD,CAAYa,cAAeF,IAAUG,GAAG,IAAIC,KAAK,iBAAiBf,QAAQ,cAA1E,cAKE,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOiB,GAAIT,IAAYR,QAAQ,gB,yMAKnCH,EAAWqB,gBAAiB","file":"component---src-back-button-readme-mdx-d8efaa09f607e05fa81f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport InlineList from '../InlineList';\nimport BackButton, { BackButtonProvider } from './';\nimport Button from '../Button';\nimport TextLink from '../TextLink';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"backbutton\"\n    }}>{`BackButton`}</h1>\n    <p>{`A component for handling backlinks for navigation in apps.`}</p>\n    <h2 {...{\n      \"id\": \"the-problem\"\n    }}>{`The problem`}</h2>\n    <p>{`Hard-coding back links in an app where pages may have different entry points can quickly lead to a bad user experience. Users expect a link or button labelled \"Back\" to take them back to the page they came from â€“ just like their browser's back button.`}</p>\n    <p>{`So, one might think, why not just trigger the browser's back button using `}<inlineCode parentName=\"p\">{`history.back`}</inlineCode>{`? The answer is that we need back buttons to have a sensible fallback for when there's no browser history yet, for example after a link has been opened in a new window, or when a page was reached via a link in an email.`}</p>\n    <p>{`This is where this component comes in. Wrap your app with the `}<inlineCode parentName=\"p\">{`BackButtonProvider`}</inlineCode>{` component and pass it the current pathname. In react-router, you can get it from the `}<inlineCode parentName=\"p\">{`useLocation`}</inlineCode>{` hook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {useLocation} from 'react-router';\nimport {BackButtonProvider} from 'base5-ui/BackButton';\n\nfunction YourApp({children}) {\n    const {pathname} = useLocation();\n\n    return (\n        <BackButtonProvider pathname={pathname}>{children}</BackButtonProvider>\n    );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`BackButtonProvider`}</inlineCode>{` tracks whether the user has navigated in the app. It then provides this information to the `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` component via context. `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` then either renders a `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` element, or the fallback link specified by you.`}</p>\n    <p>{`For visual customisation, you can pass a `}<inlineCode parentName=\"p\">{`baseComponent`}</inlineCode>{` prop which changes the component that's rendered by default (`}<a parentName=\"p\" {...{\n        \"href\": \"src-button-core-readme\"\n      }}><inlineCode parentName=\"a\">{`ButtonCore`}</inlineCode></a>{`). Please make sure that this component has support for changing the rendered element type using the '`}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`' prop (by default this is the case for any components built using styled-components).`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'<BackButtonProvider pathname=\\\"/current/url\\\">\\n  <BackButton\\n    baseComponent={Button}\\n    as=\\\"a\\\"\\n    href=\\\"/fallback-link\\\"\\n    icon=\\\"arrow\\\"\\n  >\\n    Back button\\n  </BackButton>\\n  <br />\\n  <br />\\n  <BackButton baseComponent={TextLink} as=\\\"a\\\" href=\\\"/fallback-link\\\">\\n    Backlink\\n  </BackButton>\\n</BackButtonProvider>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      InlineList,\n      BackButton,\n      BackButtonProvider,\n      Button,\n      TextLink,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<BackButtonProvider pathname=\"/current/url\" mdxType=\"BackButtonProvider\">\n\t\t<BackButton baseComponent={Button} as=\"a\" href=\"/fallback-link\" icon=\"arrow\" mdxType=\"BackButton\">\n\t\t\tBack button\n\t\t</BackButton>\n\t\t<br />\n\t\t<br />\n\t\t<BackButton baseComponent={TextLink} as=\"a\" href=\"/fallback-link\" mdxType=\"BackButton\">\n\t\t\tBacklink\n\t\t</BackButton>\n\t</BackButtonProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={BackButton} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}