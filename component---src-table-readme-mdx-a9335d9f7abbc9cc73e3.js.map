{"version":3,"sources":["webpack:///../src/Table/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Icon","Table","Column","CenterContent","dummyData","isLoading","data","slice","itemKey","isHeading","name","cellRenderer","item","region","style","border","borderRadius","shadedHeader","pl","pr","width","role","aria-label","subtitle","mobileViewBreakpoint","emptyContent","height","hideBelowBreakpoint","of","isMDXComponent"],"mappings":"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","file":"component---src-table-readme-mdx-a9335d9f7abbc9cc73e3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Icon from '../Icon';\nimport Table from './';\nimport Column from './Column';\nimport CenterContent from '../CenterContent';\nimport dummyData from './dummyData';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`A table component with a sticky header row.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`By default, all columns have an equal width`}</li>\n      <li parentName=\"ul\">{`Control the width of columns by specifying a fixed or percentage width`}</li>\n      <li parentName=\"ul\">{`You can define a breakpoint under which a list-like `}<strong parentName=\"li\">{`mobile view`}</strong>{` will be enabled (by default this is \"xs\")`}</li>\n      <li parentName=\"ul\">{`Columns can be defined in JSX using the `}<inlineCode parentName=\"li\">{`Column`}</inlineCode>{` component, or using the `}<inlineCode parentName=\"li\">{`columns`}</inlineCode>{` prop`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"simple-example-with-jsx-column-config\"\n    }}>{`Simple example with JSX column config`}</h3>\n    <p>{`The table data is provided as an array of objects. The column names defined will be used to select a field from the data row by default, but in most cases you'll want to specify a custom field, which you can do using the `}<inlineCode parentName=\"p\">{`cellRenderer`}</inlineCode>{` prop (see \"Country\" column below).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table data={dummyData.slice(0, 4)} itemKey=\"name\">\n    <Column isHeading name=\"Name\" />\n    <Column name=\"Email\" />\n    <Column name=\"Country\" cellRenderer={item => item.region} />\n    <Column name=\"Type\" />\n    <Column name=\"Time\" />\n</Table>\n`}</code></pre>\n    <Playground __position={0} __code={'<Table isLoading data={dummyData.slice(0, 4)} itemKey=\\\"name\\\">\\n  <Column isHeading name=\\\"Name\\\" />\\n  <Column name=\\\"Email\\\" />\\n  <Column name=\\\"Country\\\" cellRenderer={item => item.region} />\\n  <Column name=\\\"Type\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData\n    }} mdxType=\"Playground\">\n\t<Table isLoading data={dummyData.slice(0, 4)} itemKey=\"name\" mdxType=\"Table\">\n\t\t<Column isHeading name=\"Name\" mdxType=\"Column\" />\n\t\t<Column name=\"Email\" mdxType=\"Column\" />\n\t\t<Column name=\"Country\" cellRenderer={item => item.region} mdxType=\"Column\" />\n\t\t<Column name=\"Type\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"simple-example-with-object-column-config\"\n    }}>{`Simple example with object column config`}</h3>\n    <p>{`You can also define your columns as an array of objects, if you prefer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {name: 'Name', isHeading: true},\n        {name: 'Email'},\n        {name: 'Country', cellRenderer: item => item.region},\n        {name: 'Type'},\n        {name: 'Time'},\n    ]}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customisation-example\"\n    }}>{`Customisation example`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Wrapped in a box with rounded corners (not part of component API)`}</li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`cellRenderer`}</inlineCode>{` to easily customise the way a cell's content is rendered`}</li>\n      <li parentName=\"ul\">{`Use fixed or percentage `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{` values to customise column sizes`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`shadedHeader`}</inlineCode>{` prop for a shaded table header background`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`subtitle`}</inlineCode>{` prop to add a subtitle to a column header`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`pl`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`pr`}</inlineCode>{` props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules`}</li>\n    </ul>\n    <Playground __position={1} __code={'<div style={{ border: \\'1px solid grey\\', borderRadius: 10 }}>\\n  <Table\\n    shadedHeader\\n    data={dummyData.slice(4, 8)}\\n    itemKey=\\\"name\\\"\\n    pl=\\\"xl\\\"\\n    pr={20}\\n  >\\n    <Column\\n      name=\\\"Role\\\"\\n      width={32}\\n      cellRenderer={item => (\\n        <Icon\\n          name={item.role === \\'manager\\' ? \\'star\\' : \\'user\\'}\\n          aria-label={item.role === \\'manager\\' ? \\'Manager\\' : \\'User\\'}\\n        />\\n      )}\\n    />\\n    <Column\\n      isHeading\\n      name=\\\"Name\\\"\\n      width=\\\"40%\\\"\\n      cellRenderer={item => <strong>{item.name}</strong>}\\n    />\\n    <Column name=\\\"Type\\\" subtitle=\\\"Random characters\\\" />\\n    <Column name=\\\"Time\\\" />\\n  </Table>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData\n    }} mdxType=\"Playground\">\n\t<div style={{\n        border: '1px solid grey',\n        borderRadius: 10\n      }}>\n\t\t<Table shadedHeader data={dummyData.slice(4, 8)} itemKey=\"name\" pl=\"xl\" pr={20} mdxType=\"Table\">\n\t\t\t<Column name=\"Role\" width={32} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} aria-label={item.role === 'manager' ? 'Manager' : 'User'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n\t\t\t<Column isHeading name=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n\t\t\t<Column name=\"Type\" subtitle=\"Random characters\" mdxType=\"Column\" />\n\t\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t\t</Table>\n\t</div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"responsiveness-examples\"\n    }}>{`Responsiveness examples`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Mobile view:`}</strong>{` The table changes to a more list-like view when the screen width gets lower than the breakpoint defined using the `}<inlineCode parentName=\"li\">{`mobileViewBreakpoint`}</inlineCode>{` prop.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Hiding columns:`}</strong>{` When the mobile view is not active, you can hide columns below a certain breakpoint using the `}<inlineCode parentName=\"li\">{`hideBelowBreakpoint`}</inlineCode>{` prop. Columns hidden this way will become visible again in the mobile view.`}</li>\n    </ul>\n    <p>{`The table below uses both modes – on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens.`}</p>\n    <Playground __position={2} __code={'<Table\\n  mobileViewBreakpoint=\\\"xxs\\\"\\n  data={dummyData.slice(8, 12)}\\n  itemKey=\\\"name\\\"\\n>\\n  <Column\\n    name=\\\"Role\\\"\\n    width={32}\\n    cellRenderer={item => (\\n      <Icon name={item.role === \\'manager\\' ? \\'star\\' : \\'user\\'} />\\n    )}\\n  />\\n  <Column\\n    isHeading\\n    name=\\\"Name\\\"\\n    width=\\\"40%\\\"\\n    cellRenderer={item => <strong>{item.name}</strong>}\\n  />\\n  <Column name=\\\"Region\\\" />\\n  <Column name=\\\"Type\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData\n    }} mdxType=\"Playground\">\n\t<Table mobileViewBreakpoint=\"xxs\" data={dummyData.slice(8, 12)} itemKey=\"name\" mdxType=\"Table\">\n\t\t<Column name=\"Role\" width={32} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n\t\t<Column isHeading name=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n\t\t<Column name=\"Region\" mdxType=\"Column\" />\n\t\t<Column name=\"Type\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"empty-state\"\n    }}>{`Empty state`}</h3>\n    <p>{`When no `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` array is provided, or when its length is `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, the message \"No data to display\" will be shown below the column headers. You can customise this message using the `}<inlineCode parentName=\"p\">{`emptyContent`}</inlineCode>{` prop.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`CenterContent`}</inlineCode>{` component to make the content appear centred and take up a minimum height.`}</p>\n    <Playground __position={3} __code={'<Table\\n  emptyContent={<CenterContent height={180}>Here be dragons</CenterContent>}\\n>\\n  <Column name=\\\"Role\\\" width={32} />\\n  <Column isHeading name=\\\"Name\\\" width=\\\"40%\\\" />\\n  <Column name=\\\"Region\\\" hideBelowBreakpoint=\\\"m\\\" />\\n  <Column name=\\\"Type\\\" hideBelowBreakpoint=\\\"xs\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData\n    }} mdxType=\"Playground\">\n\t<Table emptyContent={<CenterContent height={180} mdxType=\"CenterContent\">Here be dragons</CenterContent>} mdxType=\"Table\">\n\t\t<Column name=\"Role\" width={32} mdxType=\"Column\" />\n\t\t<Column isHeading name=\"Name\" width=\"40%\" mdxType=\"Column\" />\n\t\t<Column name=\"Region\" hideBelowBreakpoint=\"m\" mdxType=\"Column\" />\n\t\t<Column name=\"Type\" hideBelowBreakpoint=\"xs\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-props\"\n    }}>{`Table props`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"column-props\"\n    }}>{`Column props`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}