(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{pMrV:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n("Fcif"),l=n("+I+c"),r=(n("mXGw"),n("/FXl")),c=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useEventListener/README.mdx"}});var i={_frontmatter:o},s=c.a;function b(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)(s,Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"useeventlistener"},"useEventListener"),Object(r.b)("p",null,"A simple hook that adds a global event listener & cleans up after it when the component unmounts."),Object(r.b)("p",null,"An options object can be added as a third parameter. Available options are:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isEnabled"),": Can be used to conditionally disable the hook. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"true"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"targetElement"),": Add the event listener to a custom target element. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"document"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"capture"),": Use this for capturing events that don't bubble, e.g. to react to focus events within an element. (See ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"}),"addEventListener docs on MDN"),")")),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"useEventListener('click', onBodyClick);\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"useEventListener('click', closeTooltip, {\n    isEnabled: shouldCloseOnBodyClick,\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"useEventListener('scroll', onScroll, {\n    targetElement: scrollContainerRef.current,\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"useEventListener('focus', onFocus, {\n    capture: true,\n});\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useEventListener/README.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-event-listener-readme-mdx-f89ab90ebf28b35a6ec5.js.map