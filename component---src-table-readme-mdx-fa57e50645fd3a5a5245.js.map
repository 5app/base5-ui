{"version":3,"sources":["webpack:///../src/Table/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Box","Icon","Table","Column","CenterContent","dummyData","DemoTableState","data","slice","itemKey","name","cellRenderer","item","region","border","borderRadius","sort","column","order","handleSort","shadedHeader","rowHeader","onRequestSort","pl","pr","width","role","aria-label","sortable","subtitle","defaultOrder","mobileViewBreakpoint","hideBelowBreakpoint","emptyContent","height","of","isMDXComponent"],"mappings":"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","file":"component---src-table-readme-mdx-fa57e50645fd3a5a5245.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Box from '../Box';\nimport Icon from '../Icon';\nimport Table from './';\nimport Column from './Column';\nimport CenterContent from '../CenterContent';\nimport dummyData from './demo/dummyData';\nimport DemoTableState from './demo/DemoTableState';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`A table component with a sticky header row and clickable headers for sorting.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`By default, all columns have an equal width`}</li>\n      <li parentName=\"ul\">{`Control the width of columns by specifying a fixed or percentage width`}</li>\n      <li parentName=\"ul\">{`Define a breakpoint under which a list-like `}<strong parentName=\"li\">{`mobile view`}</strong>{` will be enabled (by default this is \"xs\")`}</li>\n      <li parentName=\"ul\">{`Columns can be defined in JSX using the `}<inlineCode parentName=\"li\">{`Column`}</inlineCode>{` component, or using the `}<inlineCode parentName=\"li\">{`columns`}</inlineCode>{` prop`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"simple-example-with-jsx-column-config\"\n    }}>{`Simple example with JSX column config`}</h3>\n    <p>{`The table data is provided as an array of objects. The column names defined will be used to select a field from the data row by default (i.e. the \"Email\" column will get its data from `}<inlineCode parentName=\"p\">{`item.email`}</inlineCode>{`), but in most cases you'll want to specify a custom field, which you can do using the `}<inlineCode parentName=\"p\">{`cellRenderer`}</inlineCode>{` prop (see \"Country\" column below).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table data={dummyData.slice(0, 4)} itemKey=\"name\">\n    <Column name=\"Name\" />\n    <Column name=\"Email\" />\n    <Column name=\"Country\" cellRenderer={item => item.region} />\n    <Column name=\"Type\" />\n    <Column name=\"Time\" />\n</Table>\n`}</code></pre>\n    <Playground __position={0} __code={'<Table data={dummyData.slice(0, 4)} itemKey=\\\"name\\\">\\n  <Column name=\\\"Name\\\" />\\n  <Column name=\\\"Email\\\" />\\n  <Column name=\\\"Country\\\" cellRenderer={item => item.region} />\\n  <Column name=\\\"Type\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData,\n      DemoTableState\n    }} mdxType=\"Playground\">\n\t<Table data={dummyData.slice(0, 4)} itemKey=\"name\" mdxType=\"Table\">\n\t\t<Column name=\"Name\" mdxType=\"Column\" />\n\t\t<Column name=\"Email\" mdxType=\"Column\" />\n\t\t<Column name=\"Country\" cellRenderer={item => item.region} mdxType=\"Column\" />\n\t\t<Column name=\"Type\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"simple-example-with-object-column-config\"\n    }}>{`Simple example with object column config`}</h3>\n    <p>{`You can also define your columns as an array of objects, if you prefer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {name: 'Name'},\n        {name: 'Email'},\n        {name: 'Country', cellRenderer: item => item.region},\n        {name: 'Type'},\n        {name: 'Time'},\n    ]}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customisation-example\"\n    }}>{`Customisation example`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Wrapped in a box with rounded corners (not part of component API)`}</li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`cellRenderer`}</inlineCode>{` to easily customise the way a cell's content is rendered`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`rowHeader`}</inlineCode>{` prop to specify which column will be used as the header in the mobile view (only needs to be specified if it's not the first column)`}</li>\n      <li parentName=\"ul\">{`Use fixed or percentage `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{` values to customise column sizes`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`shadedHeader`}</inlineCode>{` prop for a shaded table header background`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`subtitle`}</inlineCode>{` prop to add a subtitle to a column header`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`pl`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`pr`}</inlineCode>{` props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules`}</li>\n      <li parentName=\"ul\">{`Enable sortable columns by adding `}<inlineCode parentName=\"li\">{`<Column sortable />`}</inlineCode>{` props and passing `}<inlineCode parentName=\"li\">{`sort`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`onRequestSort`}</inlineCode>{` props to `}<inlineCode parentName=\"li\">{`Table`}</inlineCode></li>\n    </ul>\n    <Playground __position={1} __code={'<Box border=\\\"thin\\\" borderRadius=\\\"panels\\\">\\n  <DemoTableState data={dummyData.slice(4, 8)}>\\n    {({ data, sort: { column, order }, handleSort }) => (\\n      <Table\\n        shadedHeader\\n        data={data}\\n        itemKey=\\\"name\\\"\\n        rowHeader=\\\"Name\\\"\\n        sort={{\\n          column,\\n          order,\\n        }}\\n        onRequestSort={handleSort}\\n        pl=\\\"xl\\\"\\n        pr={20}\\n      >\\n        <Column\\n          name=\\\"Role\\\"\\n          width={40}\\n          cellRenderer={item => (\\n            <Icon\\n              name={item.role === \\'manager\\' ? \\'star\\' : \\'user\\'}\\n              aria-label={item.role === \\'manager\\' ? \\'Manager\\' : \\'User\\'}\\n            />\\n          )}\\n        />\\n        <Column\\n          sortable\\n          name=\\\"Name\\\"\\n          width=\\\"40%\\\"\\n          cellRenderer={item => <strong>{item.name}</strong>}\\n        />\\n        <Column sortable name=\\\"Type\\\" subtitle=\\\"Random characters\\\" />\\n        <Column sortable name=\\\"Time\\\" defaultOrder=\\\"desc\\\" />\\n      </Table>\\n    )}\\n  </DemoTableState>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData,\n      DemoTableState\n    }} mdxType=\"Playground\">\n\t<Box border=\"thin\" borderRadius=\"panels\" mdxType=\"Box\">\n\t\t<DemoTableState data={dummyData.slice(4, 8)} mdxType=\"DemoTableState\">\n\t\t\t{({\n            data,\n            sort: {\n              column,\n              order\n            },\n            handleSort\n          }) => <Table shadedHeader data={data} itemKey=\"name\" rowHeader=\"Name\" sort={{\n            column,\n            order\n          }} onRequestSort={handleSort} pl=\"xl\" pr={20} mdxType=\"Table\">\n\t\t\t\t\t<Column name=\"Role\" width={40} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} aria-label={item.role === 'manager' ? 'Manager' : 'User'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n\t\t\t\t\t<Column sortable name=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n\t\t\t\t\t<Column sortable name=\"Type\" subtitle=\"Random characters\" mdxType=\"Column\" />\n\t\t\t\t\t<Column sortable name=\"Time\" defaultOrder=\"desc\" mdxType=\"Column\" />\n\t\t\t\t</Table>}\n\t\t</DemoTableState>\n\t</Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"responsiveness-examples\"\n    }}>{`Responsiveness examples`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Mobile view:`}</strong>{` The table changes to a more list-like view when the screen width goes below the breakpoint defined using the `}<inlineCode parentName=\"li\">{`mobileViewBreakpoint`}</inlineCode>{` prop.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Hiding columns:`}</strong>{` You can hide columns below a certain breakpoint using the `}<inlineCode parentName=\"li\">{`hideBelowBreakpoint`}</inlineCode>{` prop. Columns hidden this way will become visible again in the mobile view.`}</li>\n    </ul>\n    <p>{`The table below uses both modes – on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens.`}</p>\n    <Playground __position={2} __code={'<Table\\n  mobileViewBreakpoint=\\\"xxs\\\"\\n  data={dummyData.slice(8, 12)}\\n  itemKey=\\\"name\\\"\\n  rowHeader=\\\"Name\\\"\\n>\\n  <Column\\n    name=\\\"Role\\\"\\n    width={40}\\n    cellRenderer={item => (\\n      <Icon name={item.role === \\'manager\\' ? \\'star\\' : \\'user\\'} />\\n    )}\\n  />\\n  <Column\\n    name=\\\"Name\\\"\\n    width=\\\"40%\\\"\\n    cellRenderer={item => <strong>{item.name}</strong>}\\n  />\\n  <Column name=\\\"Region\\\" hideBelowBreakpoint=\\\"m\\\" />\\n  <Column name=\\\"Type\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData,\n      DemoTableState\n    }} mdxType=\"Playground\">\n\t<Table mobileViewBreakpoint=\"xxs\" data={dummyData.slice(8, 12)} itemKey=\"name\" rowHeader=\"Name\" mdxType=\"Table\">\n\t\t<Column name=\"Role\" width={40} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n\t\t<Column name=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n\t\t<Column name=\"Region\" hideBelowBreakpoint=\"m\" mdxType=\"Column\" />\n\t\t<Column name=\"Type\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"empty-state\"\n    }}>{`Empty state`}</h3>\n    <p>{`When no `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` array is provided, or when its length is `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, the message \"No data to display\" will be shown below the column headers. You can customise this message using the `}<inlineCode parentName=\"p\">{`emptyContent`}</inlineCode>{` prop.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`CenterContent`}</inlineCode>{` component to make the content appear centred and take up a minimum height.`}</p>\n    <Playground __position={3} __code={'<Table\\n  emptyContent={<CenterContent height={180}>Here be dragons</CenterContent>}\\n  rowHeader=\\\"Name\\\"\\n>\\n  <Column name=\\\"Role\\\" width={40} />\\n  <Column name=\\\"Name\\\" width=\\\"40%\\\" />\\n  <Column name=\\\"Region\\\" hideBelowBreakpoint=\\\"m\\\" />\\n  <Column name=\\\"Type\\\" hideBelowBreakpoint=\\\"xs\\\" />\\n  <Column name=\\\"Time\\\" />\\n</Table>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Icon,\n      Table,\n      Column,\n      CenterContent,\n      dummyData,\n      DemoTableState\n    }} mdxType=\"Playground\">\n\t<Table emptyContent={<CenterContent height={180} mdxType=\"CenterContent\">Here be dragons</CenterContent>} rowHeader=\"Name\" mdxType=\"Table\">\n\t\t<Column name=\"Role\" width={40} mdxType=\"Column\" />\n\t\t<Column name=\"Name\" width=\"40%\" mdxType=\"Column\" />\n\t\t<Column name=\"Region\" hideBelowBreakpoint=\"m\" mdxType=\"Column\" />\n\t\t<Column name=\"Type\" hideBelowBreakpoint=\"xs\" mdxType=\"Column\" />\n\t\t<Column name=\"Time\" mdxType=\"Column\" />\n\t</Table>\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-props\"\n    }}>{`Table props`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"column-props\"\n    }}>{`Column props`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}