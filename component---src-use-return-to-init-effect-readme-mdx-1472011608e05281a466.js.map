{"version":3,"sources":["webpack:///../src/useReturnToInitEffect/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAOaA,G,oBAAe,S,sNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,sHAAqG,kBAAIC,WAAW,KAAf,YAArG,2BACA,0CAAyB,0BAAYA,WAAW,KAAvB,oBAAzB,sOAEA,qDAAoC,0BAAYA,WAAW,KAAvB,aAApC,UAAoG,0BAAYA,WAAW,KAAvB,yBAApG,yEACA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4kB,oNA4BTJ,EAAWK,gBAAiB","file":"component---src-use-return-to-init-effect-readme-mdx-1472011608e05281a466.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usereturntoiniteffect\"\n    }}>{`useReturnToInitEffect`}</h1>\n    <p>{`A custom hook for those weird times when you need to run an effect only after a condition has `}<em parentName=\"p\">{`returned`}</em>{` to its original value.`}</p>\n    <p>{`Some people use a `}<inlineCode parentName=\"p\">{`usePreviousState`}</inlineCode>{` hook for that, but I find this hook to be a bit more declarative:\nYou just pass your callback and a value. The callback will not be run initially, but only after the value has changed and then returned to its original value.`}</p>\n    <p>{`Note that unlike the regular `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` hook, `}<inlineCode parentName=\"p\">{`useReturnToInitEffect`}</inlineCode>{` only accepts a single \"dependency\" which is not wrapped in an array.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import useReturnToInitEffect from 'base5-ui/useReturnToInitEffect';\n\nfunction Comment({data}) {\n    const [isEditing, setIsEditing] = useState(false);\n    const editButtonRef = useRef();\n\n    useReturnToInitEffect(() => {\n        // Focus the edit button when exiting edit mode\n        editButtonRef.current?.focus();\n    }, isEditing);\n\n    if (isEditing) {\n        return (\n            <EditComment data={data} onSubmit={() => setIsEditing(false)} />\n        )\n    }\n\n    return (\n        <Comment data={data} onEdit={() => setIsEditing(true)}>\n    );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}