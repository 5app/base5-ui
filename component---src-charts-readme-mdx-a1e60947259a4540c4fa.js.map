{"version":3,"sources":["webpack:///../src/charts/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","SimpleChart","SimpleGauge","data","height","color","name","labels","isEmpty","of","value","isMDXComponent"],"mappings":"yhBASO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,gHACA,6EAA4D,0BAAYC,WAAW,KAAvB,SAA5D,iCAA+I,0BAAYA,WAAW,KAAvB,cAA/I,eAAqN,0BAAYA,WAAW,KAAvB,WAArN,qCACA,yHAAwG,0BAAYA,WAAW,KAAvB,UAAxG,UACA,uDAAsC,mBAAGA,WAAW,KAAQ,CACxD,KAAQ,0CAD0B,eAAtC,KAGA,iBAAQ,CACN,GAAM,eADR,eAGA,gCAAe,0BAAYA,WAAW,KAAvB,QAAf,gHACA,+CAA8B,0BAAYA,WAAW,KAAvB,QAA9B,+CAA8H,0BAAYA,WAAW,KAAvB,UAA9H,8HACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gTAAyTC,SAAO,GACjWL,QACAH,kBACAS,eACAC,UACAC,gBACAC,iBANiW,gBAOjWZ,IAPiW,EAQjWH,eARiW,GAShWO,QAAQ,cACd,YAAC,IAAD,CAAaS,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,OAAQ,IAAKC,MAAM,QAAQX,QAAQ,gBAC7E,uBACA,YAAC,IAAD,CAAaY,KAAK,QAAQH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAKI,OAAQ,CAAC,MAAO,MAAO,OAAQH,OAAQ,IAAKC,MAAM,YAAYX,QAAQ,gBAC7I,uBACA,YAAC,IAAD,CAAac,SAAO,EAACJ,OAAQ,IAAKC,MAAM,WAAWX,QAAQ,iBAExD,iBAAQ,CACN,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAOe,GAAIR,IAAaP,QAAQ,UAChC,iBAAQ,CACN,GAAM,eADR,eAGA,uCAAsB,0BAAYC,WAAW,KAAvB,SAAtB,6CAAqH,0BAAYA,WAAW,KAAvB,KAArH,QAA2K,0BAAYA,WAAW,KAAvB,KAA3K,sEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2KAAgLC,SAAO,GACxNL,QACAH,kBACAS,eACAC,UACAC,gBACAC,iBANwN,gBAOxNZ,IAPwN,EAQxNH,eARwN,GASvNO,QAAQ,cACd,YAAC,IAAD,CAAagB,MAAO,GAAKN,OAAQ,IAAKV,QAAQ,gBAC9C,uBACA,YAAC,IAAD,CAAagB,MAAO,GAAKN,OAAQ,GAAIC,MAAM,WAAWX,QAAQ,gBAC9D,uBACA,YAAC,IAAD,CAAac,SAAO,EAACJ,OAAQ,GAAIC,MAAM,WAAWX,QAAQ,iBAEvD,iBAAQ,CACN,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAOe,GAAIP,IAAaR,QAAQ,gB,qMAKpCH,EAAWoB,gBAAiB","file":"component---src-charts-readme-mdx-a1e60947259a4540c4fa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport SimpleChart from './SimpleChart';\nimport SimpleGauge from './SimpleGauge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"charts\"\n    }}>{`Charts`}</h1>\n    <p>{`base5-UI provides a few very simple charts to illustrate trends and metrics in your UI.`}</p>\n    <p>{`The chart's colours can be customised by providing a `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` name from either the theme's `}<inlineCode parentName=\"p\">{`colorBlock`}</inlineCode>{` or current `}<inlineCode parentName=\"p\">{`section`}</inlineCode>{` palette, or any valid CSS color.`}</p>\n    <p>{`Both charts will take up the full width of their container and their height can be set using the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` prop.`}</p>\n    <p>{`The charts are generated using `}<a parentName=\"p\" {...{\n        \"href\": \"http://gionkunz.github.io/chartist-js\"\n      }}>{`Chartist.js`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"simplechart\"\n    }}>{`SimpleChart`}</h2>\n    <p>{`Takes a `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` prop that must contain of a simple array of number values which will then be plotted out as a pretty graph.`}</p>\n    <p>{`You can also provide a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` prop for the tooltip value and an array of `}<inlineCode parentName=\"p\">{`labels`}</inlineCode>{` for the x axis. When you specify more data points than labels, the labels will repeat to match the number of data values.`}</p>\n    <Playground __position={0} __code={'<SimpleChart data={[5, 3, 4, 0, 5, 2, 1]} height={125} color=\\\"links\\\" />\\n<br />\\n<SimpleChart\\n  name=\\\"Opens\\\"\\n  data={[2, 1, 9, 6, 6, 3, 7, 3, 6, 7, 8, 10]}\\n  labels={[\\'Mon\\', \\'Tue\\', \\'Wed\\']}\\n  height={125}\\n  color=\\\"highlight\\\"\\n/>\\n<br />\\n<SimpleChart isEmpty height={125} color=\\\"positive\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SimpleChart,\n      SimpleGauge,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<SimpleChart data={[5, 3, 4, 0, 5, 2, 1]} height={125} color=\"links\" mdxType=\"SimpleChart\" />\n\t<br />\n\t<SimpleChart name=\"Opens\" data={[2, 1, 9, 6, 6, 3, 7, 3, 6, 7, 8, 10]} labels={['Mon', 'Tue', 'Wed']} height={125} color=\"highlight\" mdxType=\"SimpleChart\" />\n\t<br />\n\t<SimpleChart isEmpty height={125} color=\"positive\" mdxType=\"SimpleChart\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"simplechart-props\"\n    }}>{`SimpleChart Props`}</h3>\n    <Props of={SimpleChart} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"simplegauge\"\n    }}>{`SimpleGauge`}</h2>\n    <p>{`Takes a single `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop that must be a Number value between `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` which will then be plotted out as a pretty (half of a) pie chart.`}</p>\n    <Playground __position={2} __code={'<SimpleGauge value={0.3} height={125} />\\n<br />\\n<SimpleGauge value={0.8} height={80} color=\\\"positive\\\" />\\n<br />\\n<SimpleGauge isEmpty height={80} color=\\\"negative\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SimpleChart,\n      SimpleGauge,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<SimpleGauge value={0.3} height={125} mdxType=\"SimpleGauge\" />\n\t<br />\n\t<SimpleGauge value={0.8} height={80} color=\"positive\" mdxType=\"SimpleGauge\" />\n\t<br />\n\t<SimpleGauge isEmpty height={80} color=\"negative\" mdxType=\"SimpleGauge\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"simplegauge-props\"\n    }}>{`SimpleGauge Props`}</h3>\n    <Props of={SimpleGauge} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}