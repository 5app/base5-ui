{"version":3,"sources":["webpack:///../src/Table/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","data","dummyData","slice","itemKey","title","name","cellRenderer","item","email","split","border","borderRadius","sort","column","order","handleSort","shadedHeader","rowHeader","onRequestSort","pl","pr","width","role","aria-label","sortable","subtitle","defaultOrder","mobileViewBreakpoint","hideBelowBreakpoint","emptyContent","height","of","Table","Column","isMDXComponent"],"mappings":"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","file":"component---src-table-readme-mdx-c7808e230b6a219520e9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Box from '../Box';\nimport Icon from '../Icon';\nimport Table from './';\nimport Column from './Column';\nimport CenterContent from '../CenterContent';\nimport dummyData from './demo/dummyData';\nimport DemoTableState from './demo/DemoTableState';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`A table component with a sticky header row and clickable headers for sorting.`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`By default, all columns have an equal width`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Control the width of columns by specifying a fixed or percentage width`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Define a breakpoint under which a list-like `}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`mobile view`}</strong>\n        {` will be enabled (by default this is \"xs\")`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Columns can be defined in JSX using the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`Column`}</inlineCode>\n        {` component, or using the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`columns`}</inlineCode>\n        {` prop`}</li>\n\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"simple-example-with-jsx-column-config\"\n    }}>{`Simple example with JSX column config`}</h3>\n    <p>{`The table data is provided as an array of objects. The `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`title`}</inlineCode>\n      {` given to each column will be used to select a field from the data row (i.e. the \"Email\" column will get its data from `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`item.email`}</inlineCode>\n      {`). If you want to specify a field different from the title, you can do so either using the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`name`}</inlineCode>\n      {` prop (which must be a simple string like `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`title`}</inlineCode>\n      {`), or using the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`cellRenderer`}</inlineCode>\n      {` prop for more complex cases (see \"Country\" column below).`}</p>\n    <p><inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`cellRenderer`}</inlineCode>\n      {` is also used to generally customise the rendering of a table cell.`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`<Table data={dummyData.slice(0, 4)} itemKey=\"name\">\n    <Column title=\"Name\" />\n    <Column title=\"Country\" name=\"region\" />\n    <Column title=\"Domain\" cellRenderer={item => item.email.split('@')[1]} />\n    <Column title=\"Type\" />\n    <Column title=\"Time\" />\n</Table>\n`}</code></pre>\n    <Playground mdxType=\"Playground\">\n      <Table data={dummyData.slice(0, 4)} itemKey=\"name\" mdxType=\"Table\">\n        <Column title=\"Name\" mdxType=\"Column\" />\n        <Column title=\"Country\" name=\"region\" mdxType=\"Column\" />\n        <Column title=\"Email domain\" cellRenderer={item => item.email.split('@')[1]} mdxType=\"Column\" />\n        <Column title=\"Type\" mdxType=\"Column\" />\n        <Column title=\"Time\" mdxType=\"Column\" />\n      </Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"simple-example-with-object-column-config\"\n    }}>{`Simple example with object column config`}</h3>\n    <p>{`You can also define your columns as an array of objects, if you prefer:`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {title: 'Name'},\n        {title: 'Country', name: 'region'},\n        {title: 'Email domain', cellRenderer: item => item.email.split('@')[1]},\n        {title: 'Type'},\n        {title: 'Time'},\n    ]}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customisation-example\"\n    }}>{`Customisation example`}</h3>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Wrapped in a box with rounded corners (not part of component API)`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`cellRenderer`}</inlineCode>\n        {` to easily customise the way a cell's content is rendered`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`rowHeader`}</inlineCode>\n        {` prop to specify which column will be used as the header in the mobile view (only needs to be specified if it's not the first column)`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use fixed or percentage `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`width`}</inlineCode>\n        {` values to customise column sizes`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`shadedHeader`}</inlineCode>\n        {` prop for a shaded table header background`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`subtitle`}</inlineCode>\n        {` prop to add a subtitle to a column header`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Use the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`pl`}</inlineCode>\n        {` or `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`pr`}</inlineCode>\n        {` props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Enable sortable columns by adding `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`<Column sortable />`}</inlineCode>\n        {` props and passing `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`sort`}</inlineCode>\n        {` and `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`onRequestSort`}</inlineCode>\n        {` props to `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`Table`}</inlineCode></li>\n\n    </ul>\n    <Playground mdxType=\"Playground\">\n      <Box border=\"thin\" borderRadius=\"panels\" mdxType=\"Box\">\n        <DemoTableState data={dummyData.slice(4, 8)} mdxType=\"DemoTableState\">\n          {({\n            data,\n            sort: {\n              column,\n              order\n            },\n            handleSort\n          }) => <Table shadedHeader data={data} itemKey=\"name\" rowHeader=\"Name\" sort={{\n            column,\n            order\n          }} onRequestSort={handleSort} pl=\"xl\" pr={20} mdxType=\"Table\">\n  \t\t<Column title=\"Role\" width={40} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} aria-label={item.role === 'manager' ? 'Manager' : 'User'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n  \t\t<Column sortable title=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n  \t\t<Column sortable title=\"Type\" subtitle=\"Random characters\" mdxType=\"Column\" />\n  \t\t<Column sortable title=\"Time\" defaultOrder=\"desc\" mdxType=\"Column\" />\n  \t</Table>}\n        </DemoTableState>\n      </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"sorting\"\n    }}>{`Sorting`}</h3>\n    <p>{`To add clickable column headers to a table, first add the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`sortable`}</inlineCode>\n      {` prop to any columns that you want to be sortable.`}</p>\n    <p>{`Then add a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`sort`}</inlineCode>\n      {` prop to `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<Table />`}</inlineCode>\n      {` that defines the current sort order via an object with the keys `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`order`}</inlineCode>\n      {` ('asc' || 'desc') and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`column`}</inlineCode>\n      {` (`}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`name`}</inlineCode>\n      {` of the sorted column). If a column wasn't given a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`name`}</inlineCode>\n      {` prop, its `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`title`}</inlineCode>\n      {` will be used instead.`}</p>\n    <p>{`Finally you'll need to tell the Table what to do when a header is clicked. That's what the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`onRequestSort`}</inlineCode>\n      {` prop is for – it's called with an object in the same shape as the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`sort`}</inlineCode>\n      {` prop to define the desired target sorting.`}</p>\n    <h3 {...{\n      \"id\": \"responsive-example\"\n    }}>{`Responsive example`}</h3>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><strong {...{\n          \"parentName\": \"li\"\n        }}>{`Mobile view:`}</strong>\n        {` The table changes to a more list-like view when the screen width shrinks below the breakpoint defined using the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`mobileViewBreakpoint`}</inlineCode>\n        {` prop.`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><strong {...{\n          \"parentName\": \"li\"\n        }}>{`Hiding columns:`}</strong>\n        {` You can hide columns below a certain breakpoint using the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`hideBelowBreakpoint`}</inlineCode>\n        {` prop. Columns hidden this way will become visible again in the mobile view.`}</li>\n\n    </ul>\n    <p>{`The table below uses both modes – on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens.`}</p>\n    <Playground mdxType=\"Playground\">\n      <Table mobileViewBreakpoint=\"xxs\" data={dummyData.slice(8, 12)} itemKey=\"name\" rowHeader=\"Name\" mdxType=\"Table\">\n        <Column title=\"Role\" width={40} cellRenderer={item => <Icon name={item.role === 'manager' ? 'star' : 'user'} mdxType=\"Icon\" />} mdxType=\"Column\" />\n        <Column title=\"Name\" width=\"40%\" cellRenderer={item => <strong>{item.name}</strong>} mdxType=\"Column\" />\n        <Column title=\"Region\" hideBelowBreakpoint=\"m\" mdxType=\"Column\" />\n        <Column title=\"Type\" mdxType=\"Column\" />\n        <Column title=\"Time\" mdxType=\"Column\" />\n      </Table>\n    </Playground>\n    <h3 {...{\n      \"id\": \"empty-state\"\n    }}>{`Empty state`}</h3>\n    <p>{`When no `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`data`}</inlineCode>\n      {` array is provided, or when its length is `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`0`}</inlineCode>\n      {`, the message \"No data to display\" will be shown below the column headers. You can customise this message using the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`emptyContent`}</inlineCode>\n      {` prop.`}</p>\n    <p>{`Use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`CenterContent`}</inlineCode>\n      {` component to make the content appear centred and take up a minimum height.`}</p>\n    <Playground mdxType=\"Playground\">\n      <Table emptyContent={<CenterContent height={180} mdxType=\"CenterContent\">Here be dragons</CenterContent>} rowHeader=\"Name\" mdxType=\"Table\">\n        <Column title=\"Role\" width={40} mdxType=\"Column\" />\n        <Column title=\"Name\" width=\"40%\" mdxType=\"Column\" />\n        <Column title=\"Region\" hideBelowBreakpoint=\"m\" mdxType=\"Column\" />\n        <Column title=\"Type\" hideBelowBreakpoint=\"xs\" mdxType=\"Column\" />\n        <Column title=\"Time\" mdxType=\"Column\" />\n      </Table>\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-props\"\n    }}>{`Table props`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"column-props\"\n    }}>{`Column props`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}