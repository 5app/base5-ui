{"version":3,"sources":["webpack:///../src/TextLink/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","InlineList","TextLink","spacing","href","bold","stealthy","as","disabled","isDisabled","isToggle","of","isMDXComponent"],"mappings":"8RASaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,YADR,YAGA,+DAA8C,0BAAYC,WAAW,KAAvB,OAA9C,wCAAsI,0BAAYA,WAAW,KAAvB,MAAtI,sDACA,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,iBAAyE,0BAAYA,WAAW,KAAvB,YAAzE,OAAqI,0BAAYA,WAAW,KAAvB,cAArI,gIAA0T,0BAAYA,WAAW,KAAvB,QAA1T,gEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mbAAkcC,SAAO,GAC1eL,QACAH,kBACAS,eACAC,UACAC,eACAC,cAN0e,gBAO1eZ,IAP0e,EAQ1eH,eAR0e,GASzeO,QAAQ,cACd,YAAC,IAAD,CAAYS,QAAQ,IAAIT,QAAQ,cAC/B,YAAC,IAAD,CAAUU,KAAK,IAAIV,QAAQ,YAA3B,iBACA,YAAC,IAAD,CAAUW,MAAI,EAACD,KAAK,IAAIV,QAAQ,YAAhC,YAGA,YAAC,IAAD,CAAUY,UAAQ,EAACF,KAAK,IAAIV,QAAQ,YAApC,oCAGA,YAAC,IAAD,CAAUa,GAAG,SAASb,QAAQ,YAA9B,yBACA,YAAC,IAAD,CAAUa,GAAG,SAASC,UAAQ,EAACd,QAAQ,YAAvC,sBAGA,YAAC,IAAD,CAAUU,KAAK,IAAIK,YAAU,EAACf,QAAQ,YAAtC,qBAKE,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOgB,UAAQ,EAACC,GAAIT,IAAUR,QAAQ,gB,uMAK1CH,EAAWqB,gBAAiB","file":"component---src-text-link-readme-mdx-eb9cc88c5a65c48d62c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport InlineList from '../InlineList';\nimport TextLink from './';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"textlink\"\n    }}>{`TextLink`}</h1>\n    <p>{`Simple styled text link. Renders as an `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{` tag by default, but you can use the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to render as a button or a router link, too.`}</p>\n    <p><inlineCode parentName=\"p\">{`TextLink`}</inlineCode>{` supports the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`isDisabled`}</inlineCode>{` prop whether it's used to render a button or a link. Since \"disabled links\" don't exist in HTML, we simply render them as `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` elements and remove all link-specific attributes from them.`}</p>\n    <Playground __position={0} __code={'<InlineList spacing=\\\"s\\\">\\n  <TextLink href=\\\"#\\\">Hello, world!</TextLink>\\n  <TextLink bold href=\\\"#\\\">\\n    I\\'m bold\\n  </TextLink>\\n  <TextLink stealthy href=\\\"#\\\">\\n    I blend in with my surroundings!\\n  </TextLink>\\n  <TextLink as=\\\"button\\\">I\\'m actually a button</TextLink>\\n  <TextLink as=\\\"button\\\" disabled>\\n    I can be disabled!\\n  </TextLink>\\n  <TextLink href=\\\"#\\\" isDisabled>\\n    Even as a link!\\n  </TextLink>\\n</InlineList>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      InlineList,\n      TextLink,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<InlineList spacing=\"s\" mdxType=\"InlineList\">\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Hello, world!</TextLink>\n\t\t<TextLink bold href=\"#\" mdxType=\"TextLink\">\n\t\t\tI'm bold\n\t\t</TextLink>\n\t\t<TextLink stealthy href=\"#\" mdxType=\"TextLink\">\n\t\t\tI blend in with my surroundings!\n\t\t</TextLink>\n\t\t<TextLink as=\"button\" mdxType=\"TextLink\">I'm actually a button</TextLink>\n\t\t<TextLink as=\"button\" disabled mdxType=\"TextLink\">\n\t\t\tI can be disabled!\n\t\t</TextLink>\n\t\t<TextLink href=\"#\" isDisabled mdxType=\"TextLink\">\n\t\t\tEven as a link!\n\t\t</TextLink>\n\t</InlineList>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props isToggle of={TextLink} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}