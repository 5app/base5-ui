{"version":3,"sources":["webpack:///../src/Status/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Status","Button","React","showConfirmation","setShowConfirmation","isActive","onClick","v","of","isMDXComponent"],"mappings":"4RASaA,G,UAAe,S,uMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,UADR,UAGA,yKACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,8EAIL,+EACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mbAAsbC,SAAO,GAC9dL,QACAH,kBACAS,eACAC,UACAC,WACAC,YAN8d,gBAO9dZ,IAP8d,EAQ9dH,eAR8d,GAS7dO,QAAQ,eACb,WAAM,MACgDS,YAAe,GAAxDC,EADP,KACyBC,EADzB,KAEA,OAAO,4BACX,YAAC,IAAD,CAAQC,SAAUF,EAAkBG,QAAS,kBAAMF,GAAoB,SAAAG,GAAC,OAAKA,MAAId,QAAQ,UAAzF,YAGA,YAAC,IAAD,CAAQA,QAAQ,UACdU,GAAoB,+FAKtB,iBAAQ,CACN,GAAM,cADR,cAGA,2CAA0B,0BAAYT,WAAW,KAAvB,UAA1B,6JAA0O,sBAAQA,WAAW,KAAnB,OAA1O,iBACA,0DACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2FAML,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOc,GAAIR,IAAQP,QAAQ,gB,qMAK/BH,EAAWmB,gBAAiB","file":"component---src-status-readme-mdx-d29f5a58e81dfcae32a8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Status from './';\nimport Button from '../Button';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"status\"\n    }}>{`Status`}</h1>\n    <p>{`Any changes to the textual content of this component are reported to users of screen readers. It's equivalent to a div with the following props:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" />\n`}</code></pre>\n    <p>{`For more control you can override each of these props.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [showConfirmation, setShowConfirmation] = React.useState(false)\\n  return (\\n    <>\\n      <Button\\n        isActive={showConfirmation}\\n        onClick={() => setShowConfirmation(v => !v)}\\n      >\\n        Click me\\n      </Button>\\n      <Status>\\n        {showConfirmation &&\\n          \\'Congrats, you have clicked the button! This message will be read out by screen readers.\\'}\\n      </Status>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Status,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t{() => {\n        const [showConfirmation, setShowConfirmation] = React.useState(false);\n        return <>\n\t\t\t\t<Button isActive={showConfirmation} onClick={() => setShowConfirmation(v => !v)} mdxType=\"Button\">\n\t\t\t\t\tClick me\n\t\t\t\t</Button>\n\t\t\t\t<Status mdxType=\"Status\">\n\t\t\t\t\t{showConfirmation && 'Congrats, you have clicked the button! This message will be read out by screen readers.'}\n\t\t\t\t</Status>\n\t\t\t</>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"usage-note\"\n    }}>{`Usage note`}</h2>\n    <p>{`Make sure that the `}<inlineCode parentName=\"p\">{`Status`}</inlineCode>{` component is always rendered – even when it's empty – before you update its contents. If the element is added alongside its content, screen readers will `}<strong parentName=\"p\">{`not`}</strong>{` announce it!`}</p>\n    <p>{`The example below would not work:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`{\n    showConfirmation && <Status>This status will NOT BE announced :(</Status>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Status} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}