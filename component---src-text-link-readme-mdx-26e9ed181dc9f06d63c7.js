(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{"9qu6":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return d})),t.d(n,"default",(function(){return m}));var i=t("Fcif"),a=t("+I+c"),o=(t("mXGw"),t("/FXl")),b=t("TjRS"),r=t("ZFoC"),l=t("inYB"),s=t("BbnS"),d=(t("aD51"),{});void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/TextLink/README.mdx"}});var c={_frontmatter:d},p=b.a;function m(e){var n,t=e.components,m=Object(a.a)(e,["components"]);return Object(o.b)(p,Object(i.a)({},c,m,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"textlink"},"TextLink"),Object(o.b)("p",null,"Simple styled text link. Renders as an ",Object(o.b)("inlineCode",{parentName:"p"},"<a>")," tag by default, but you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"as")," prop to render as a button or a router link, too."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"TextLink")," supports the ",Object(o.b)("inlineCode",{parentName:"p"},"disabled")," or ",Object(o.b)("inlineCode",{parentName:"p"},"isDisabled")," prop whether it's used to render a button or a link. Since \"disabled links\" don't exist in HTML, we simply render them as ",Object(o.b)("inlineCode",{parentName:"p"},"span")," elements and remove all link-specific attributes from them."),Object(o.b)(r.c,{__position:0,__code:'<InlineList spacing="s">\n  <TextLink href="#">Hello, world!</TextLink>\n  <TextLink bold href="#">\n    I\'m bold\n  </TextLink>\n  <TextLink stealthy href="#">\n    I blend in with my surroundings!\n  </TextLink>\n  <TextLink as="button">I\'m actually a button</TextLink>\n  <TextLink as="button" disabled>\n    I can be disabled!\n  </TextLink>\n  <TextLink href="#" isDisabled>\n    Even as a link!\n  </TextLink>\n</InlineList>',__scope:(n={props:m,DefaultLayout:b.a,Playground:r.c,Props:r.d,InlineList:l.a,TextLink:s.a},n.DefaultLayout=b.a,n._frontmatter=d,n),mdxType:"Playground"},Object(o.b)(l.a,{spacing:"s",mdxType:"InlineList"},Object(o.b)(s.a,{href:"#",mdxType:"TextLink"},"Hello, world!"),Object(o.b)(s.a,{bold:!0,href:"#",mdxType:"TextLink"},"I'm bold"),Object(o.b)(s.a,{stealthy:!0,href:"#",mdxType:"TextLink"},"I blend in with my surroundings!"),Object(o.b)(s.a,{as:"button",mdxType:"TextLink"},"I'm actually a button"),Object(o.b)(s.a,{as:"button",disabled:!0,mdxType:"TextLink"},"I can be disabled!"),Object(o.b)(s.a,{href:"#",isDisabled:!0,mdxType:"TextLink"},"Even as a link!"))),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)(r.d,{isToggle:!0,of:s.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/TextLink/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-text-link-readme-mdx-26e9ed181dc9f06d63c7.js.map