{"version":3,"sources":["webpack:///../src/useFocusOnMount/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","React","hasDialog","setHasDialog","spacing","icon","isActive","onClick","prev","onClose","isMDXComponent"],"mappings":"wSAUaA,G,UAAe,S,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,gMACA,oIACA,8NACE,gBAAO,CACL,KAAQ,uCACR,WAAc,KACb,yBAAgB,CACf,WAAc,KADf,yBAHH,SADF,+EASA,iBAAQ,CACN,GAAM,WADR,WAGA,4DACE,yBAAgB,CACd,WAAc,KADhB,UADF,yBAKA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,0+BAkCL,YAAC,IAAD,CAAYA,QAAQ,eACjB,WAAM,MAC6BC,YAAe,GAA1CC,EADF,KACaC,EADb,KAEL,OAAO,YAAC,IAAD,CAAOC,QAAQ,IAAIJ,QAAQ,SACrC,YAAC,IAAD,CAAQK,KAAK,WAAWC,SAAUJ,EAAWK,QAAS,kBAAMJ,GAAa,SAAAK,GAAI,OAAKA,MAAOR,QAAQ,UAAjG,yBAGCE,GAAa,YAAC,IAAD,CAAQO,QAAS,kBAAMN,GAAa,IAAQH,QAAQ,eAInE,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,sBADR,sBAGA,0HACA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,8JAWL,iBAAQ,CACN,GAAM,2CADR,gBAGE,yBAAgB,CACd,WAAc,MADhB,WAHF,QAOE,yBAAgB,CACd,WAAc,MADhB,mBAGF,8HACE,yBAAgB,CACd,WAAc,KADhB,WADF,QAKE,yBAAgB,CACd,WAAc,KADhB,kBALF,yFASA,kKACA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,+LAaL,iBAAQ,CACN,GAAM,sBADR,sBAGA,mEACE,yBAAgB,CACd,WAAc,KADhB,WADF,YAKA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,gM,8MAiBTH,EAAWa,gBAAiB","file":"component---src-use-focus-on-mount-readme-mdx-86fac8c33855a2e47824.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Button from '../Button';\nimport Stack from '../Stack';\nimport Dialog from './DemoExample';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"usefocusonmount\"\n    }}>{`useFocusOnMount`}</h1>\n    <p>{`A hook that will focus a chosen element when the component it is in is mounted, and crucially, will move focus back to where it was before when the component unmounts.`}</p>\n    <p>{`This is useful for moving focus into non-modal dialogs (for modal dialogs, please use the Modal component).`}</p>\n    <p>{`Note: This hook can only restore focus to the previously focused element if that element has not been unmounted or replaced by the dialog. If your design requires this, you can additionally use the `}\n      <a {...{\n        \"href\": \"src-use-return-to-init-effect-readme\",\n        \"parentName\": \"p\"\n      }}><inlineCode {...{\n          \"parentName\": \"a\"\n        }}>{`useReturnToInitEffect`}</inlineCode>\n        {` hook`}</a>\n      {` in the parent component to explicitly set focus when the dialog is closed.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`See below for a live example of the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`Dialog`}</inlineCode>\n      {` component in action.`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`function Dialog({onClose}) {\n    const buttonRef = useFocusOnMount();\n    return (\n        <Box role=\"dialog\" aria-labelledby=\"heading\" p=\"s\" background=\"shaded\">\n            <Stack spacing=\"s\">\n                <Text as=\"h2\" bold size=\"l\" id=\"heading\">\n                    Do you really want to hrmpf!?\n                </Text>\n                <InlineList spacing=\"s\">\n                    <Button\n                        ref={buttonRef}\n                        icon=\"x\"\n                        size=\"medium\"\n                        onClick={onClose}\n                    >\n                        Nah\n                    </Button>\n                    <Button\n                        icon=\"ok\"\n                        color=\"primary\"\n                        size=\"medium\"\n                        onClick={onClose}\n                    >\n                        Sure\n                    </Button>\n                </InlineList>\n            </Stack>\n        </Box>\n    );\n}\n`}</code></pre>\n    <Playground mdxType=\"Playground\">\n      {() => {\n        const [hasDialog, setHasDialog] = React.useState(false);\n        return <Stack spacing=\"s\" mdxType=\"Stack\">\n  \t\t\t<Button icon=\"eye-open\" isActive={hasDialog} onClick={() => setHasDialog(prev => !prev)} mdxType=\"Button\">\n  \t\t\t\tShow non-modal dialog\n  \t\t\t</Button>\n  \t\t\t{hasDialog && <Dialog onClose={() => setHasDialog(false)} mdxType=\"Dialog\" />}\n  \t\t</Stack>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h2>\n    <h3 {...{\n      \"id\": \"using-your-own-ref\"\n    }}>{`Using your own ref`}</h3>\n    <p>{`Instead of attaching the ref returned by the hook, you can also pass in your own ref to the hook.`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`function Dialog() {\n    const buttonRef = React.useRef();\n    useFocusOnMount({ref: buttonRef});\n    return (\n        // Your Dialog code\n    )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hooking-into-onfocus-and-onrestorefocus\"\n    }}>{`Hooking into `}\n      <inlineCode {...{\n        \"parentName\": \"h3\"\n      }}>{`onFocus`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"h3\"\n      }}>{`onRestoreFocus`}</inlineCode></h3>\n    <p>{`If you need more control over what happens when focus is (re-)set, you can pass in your own callbacks `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`onFocus`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`onRestoreFocus`}</inlineCode>\n      {`. These will be called after focus was set. They are called with the focused element.`}</p>\n    <p>{`This can be useful if, for example, you want to set focus to an input field, and not just move focus to it, but also select its contents.`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`function Dialog() {\n    const inputRef = useFocusOnMount({\n        onFocus: focusedElement => focusedElement.select(),\n    });\n\n    return (\n        // Your Dialog code\n    )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"disabling-the-hook\"\n    }}>{`Disabling the hook`}</h3>\n    <p>{`You can disable the hook by passing in the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`disable`}</inlineCode>\n      {` option:`}</p>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`function Dialog({focusInputOnMount}) {\n    const inputRef = useFocusOnMount({\n        disable: focusInputOnMount,\n    });\n\n    return (\n        // Your Dialog code\n    )\n}\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}