{"version":3,"sources":["webpack:///../src/useEventListener/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,0HACA,oGACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBAApB,oEAAmJ,0BAAYA,WAAW,MAAvB,YAAnJ,KACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,4GAAqL,mBAAGA,WAAW,MAAS,CACxM,KAAQ,kFADyK,gCAArL,MAIF,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kGAML,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0E,+MAUTJ,EAAWK,gBAAiB","file":"component---src-use-event-listener-readme-mdx-7d7ef0e2e548c2ac1059.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useeventlistener\"\n    }}>{`useEventListener`}</h1>\n    <p>{`A simple hook that adds a global event listener & cleans up after it when the component unmounts.`}</p>\n    <p>{`An options object can be added as a third parameter. Available options are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`targetElement`}</inlineCode>{`: Add the event listener to a custom target element. Defaults to `}<inlineCode parentName=\"li\">{`document`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`capture`}</inlineCode>{`: Use this for capturing events that don't bubble, e.g. to react to focus events within an element. (See `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"\n        }}>{`addEventListener docs on MDN`}</a>{`)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useEventListener('click', onBodyClick);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useEventListener('scroll', onScroll, {\n    targetElement: scrollContainerRef.current,\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useEventListener('focus', onFocus, {\n    capture: true,\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}