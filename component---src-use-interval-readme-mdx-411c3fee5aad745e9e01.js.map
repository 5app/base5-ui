{"version":3,"sources":["webpack:///../src/useInterval/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"0PAOaA,G,oBAAe,S,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,eADR,eAGA,+GACA,yDACE,gBAAO,CACL,KAAQ,0EACR,WAAc,KAFhB,sDAIF,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,mBAAU,CACX,UAAa,eACb,WAAc,OAFb,8Q,0MAoBTH,EAAWI,gBAAiB","file":"component---src-use-interval-readme-mdx-411c3fee5aad745e9e01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useinterval\"\n    }}>{`useInterval`}</h1>\n    <p>{`A hook for safely & declaratively setting up intervals in functional React components.`}</p>\n    <p>{`Based on Dan Abramov's blog post `}\n      <a {...{\n        \"href\": \"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\",\n        \"parentName\": \"p\"\n      }}>{`\"Making setInterval Declarative with React Hooks\"`}</a></p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import useInterval from 'base5-ui/useInterval';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n\n    useInterval(() => {\n        // Your custom logic here\n        setCount(count + 1);\n    }, 1000);\n\n    return <h1>{count}</h1>;\n}\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}