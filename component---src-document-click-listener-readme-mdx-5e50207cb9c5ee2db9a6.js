(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{HKRM:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return a})),n.d(t,"default",(function(){return m}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),c=n("TjRS"),i=n("ZFoC"),l=n("7DY4"),r=n("CRV5");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/DocumentClickListener/README.mdx"}});var u={_frontmatter:a},p=c.a;function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,c={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,["components"]);return Object(o.b)(p,s({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"documentclicklistener"},"DocumentClickListener"),Object(o.b)("p",null,"A helper component that does not render any elements, but sets up a click listener on the body.\nIf you want to ignore clicks on a certain element, you can pass in the ref of that element using the ",Object(o.b)("inlineCode",{parentName:"p"},"excludedElementRef")," prop."),Object(o.b)("p",null,"Useful for tooltips and dropdown menus."),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("p",null,'The below example shows how to use this component and also demonstrates why this is a component and not just a hook: Due to the "',Object(o.b)("a",s({parentName:"p"},{href:"https://reactjs.org/docs/hooks-rules.html"}),"rules of hooks"),"\", it's not possible to conditionally call a hook, while it's very easy to conditionally render a component."),Object(o.b)(i.c,{__position:0,__code:"<Example />",__scope:{props:n,DefaultLayout:c.a,Playground:i.c,Props:i.d,DocumentClickListener:l.a,Example:r.a},mdxType:"Playground"},Object(o.b)(r.a,{mdxType:"Example"})),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'function DocumentClickExample() {\n    const [count, setCount] = useState(0);\n    const [isActive, setActive] = useState(true);\n    const excludedElement = useRef(null);\n    return (\n        <>\n            <h1>Document clicks: {count}</h1>\n            <Box ref={excludedElement} p="m" border="dashed">\n                Clicks inside this box will be ignored.\n            </Box>\n            {isActive && (\n                <DocumentClickListener\n                    onClick={() => setCount(count + 1)}\n                    excludedElementRef={excludedElement}\n                />\n            )}\n            <Box mt="m">\n                <Switch\n                    checked={isActive}\n                    onChange={() => setActive(prevActive => !prevActive)}\n                    id="switch"\n                />{\' \'}\n                <label htmlFor="switch">Count clicks</label>\n            </Box>\n        </>\n    );\n}\n')),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)(i.d,{of:l.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/DocumentClickListener/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-document-click-listener-readme-mdx-5e50207cb9c5ee2db9a6.js.map