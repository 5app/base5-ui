(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{D1Cl:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return s})),a.d(n,"default",(function(){return h}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("GkPX"),a("mXGw");var t=a("SAVP"),o=a("TjRS"),l=a("ZFoC"),i=a("2mC/"),m=a("CNeP"),r=a("Wuz6"),b=a("Q+Gn"),c=a("p5op");a("aD51");function d(){return(d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Table/README.mdx"}});var p={_frontmatter:s},u=o.a;function h(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return Object(t.b)(u,d({},p,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"table"},"Table"),Object(t.b)("p",null,"A table component with a sticky header row."),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"By default, all columns have an equal width"),Object(t.b)("li",{parentName:"ul"},"Control the width of columns by specifying a fixed or percentage width"),Object(t.b)("li",{parentName:"ul"},"You can define a breakpoint under which a list-like ",Object(t.b)("strong",{parentName:"li"},"mobile view"),' will be enabled (by default this is "xs")'),Object(t.b)("li",{parentName:"ul"},"Columns can be defined in JSX using the ",Object(t.b)("inlineCode",{parentName:"li"},"Column")," component, or using the ",Object(t.b)("inlineCode",{parentName:"li"},"columns")," prop")),Object(t.b)("h2",{id:"examples"},"Examples"),Object(t.b)("h3",{id:"simple-example-with-jsx-column-config"},"Simple example with JSX column config"),Object(t.b)("p",null,"The table data is provided as an array of objects. The column names defined will be used to select a field from the data row by default, but in most cases you'll want to specify a custom field, which you can do using the ",Object(t.b)("inlineCode",{parentName:"p"},"cellRenderer"),' prop (see "Country" column below).'),Object(t.b)("pre",null,Object(t.b)("code",d({parentName:"pre"},{className:"language-jsx"}),'<Table data={dummyData.slice(0, 4)} itemKey="name">\n    <Column isHeading name="Name" />\n    <Column name="Email" />\n    <Column name="Country" cellRenderer={item => item.region} />\n    <Column name="Type" />\n    <Column name="Time" />\n</Table>\n')),Object(t.b)(l.c,{__position:0,__code:'<Table isLoading data={dummyData.slice(0, 4)} itemKey="name">\n  <Column isHeading name="Name" />\n  <Column name="Email" />\n  <Column name="Country" cellRenderer={item => item.region} />\n  <Column name="Type" />\n  <Column name="Time" />\n</Table>',__scope:{props:a,DefaultLayout:o.a,Playground:l.c,Props:l.d,Icon:i.a,Table:m.a,Column:r.a,CenterContent:b.a,dummyData:c.a},mdxType:"Playground"},Object(t.b)(m.a,{isLoading:!0,data:c.a.slice(0,4),itemKey:"name",mdxType:"Table"},Object(t.b)(r.a,{isHeading:!0,name:"Name",mdxType:"Column"}),Object(t.b)(r.a,{name:"Email",mdxType:"Column"}),Object(t.b)(r.a,{name:"Country",cellRenderer:function(e){return e.region},mdxType:"Column"}),Object(t.b)(r.a,{name:"Type",mdxType:"Column"}),Object(t.b)(r.a,{name:"Time",mdxType:"Column"}))),Object(t.b)("h3",{id:"simple-example-with-object-column-config"},"Simple example with object column config"),Object(t.b)("p",null,"You can also define your columns as an array of objects, if you prefer:"),Object(t.b)("pre",null,Object(t.b)("code",d({parentName:"pre"},{className:"language-jsx"}),"<Table\n    data={dummyData.slice(0, 4)}\n    itemKey=\"name\"\n    columns={[\n        {name: 'Name', isHeading: true},\n        {name: 'Email'},\n        {name: 'Country', cellRenderer: item => item.region},\n        {name: 'Type'},\n        {name: 'Time'},\n    ]}\n/>\n")),Object(t.b)("h3",{id:"customisation-example"},"Customisation example"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"Wrapped in a box with rounded corners (not part of component API)"),Object(t.b)("li",{parentName:"ul"},"Use ",Object(t.b)("inlineCode",{parentName:"li"},"cellRenderer")," to easily customise the way a cell's content is rendered"),Object(t.b)("li",{parentName:"ul"},"Use fixed or percentage ",Object(t.b)("inlineCode",{parentName:"li"},"width")," values to customise column sizes"),Object(t.b)("li",{parentName:"ul"},"Use the ",Object(t.b)("inlineCode",{parentName:"li"},"shadedHeader")," prop for a shaded table header background"),Object(t.b)("li",{parentName:"ul"},"Use the ",Object(t.b)("inlineCode",{parentName:"li"},"subtitle")," prop to add a subtitle to a column header"),Object(t.b)("li",{parentName:"ul"},"Use the ",Object(t.b)("inlineCode",{parentName:"li"},"pl")," or ",Object(t.b)("inlineCode",{parentName:"li"},"pr")," props to specify left and right inner padding on the table, to visually align the first and last columns with the rest of the design without affecting horizontal rules")),Object(t.b)(l.c,{__position:1,__code:'<div style={{ border: \'1px solid grey\', borderRadius: 10 }}>\n  <Table\n    shadedHeader\n    data={dummyData.slice(4, 8)}\n    itemKey="name"\n    pl="xl"\n    pr={20}\n  >\n    <Column\n      name="Role"\n      width={32}\n      cellRenderer={item => (\n        <Icon\n          name={item.role === \'manager\' ? \'star\' : \'user\'}\n          aria-label={item.role === \'manager\' ? \'Manager\' : \'User\'}\n        />\n      )}\n    />\n    <Column\n      isHeading\n      name="Name"\n      width="40%"\n      cellRenderer={item => <strong>{item.name}</strong>}\n    />\n    <Column name="Type" subtitle="Random characters" />\n    <Column name="Time" />\n  </Table>\n</div>',__scope:{props:a,DefaultLayout:o.a,Playground:l.c,Props:l.d,Icon:i.a,Table:m.a,Column:r.a,CenterContent:b.a,dummyData:c.a},mdxType:"Playground"},Object(t.b)("div",{style:{border:"1px solid grey",borderRadius:10}},Object(t.b)(m.a,{shadedHeader:!0,data:c.a.slice(4,8),itemKey:"name",pl:"xl",pr:20,mdxType:"Table"},Object(t.b)(r.a,{name:"Role",width:32,cellRenderer:function(e){return Object(t.b)(i.a,{name:"manager"===e.role?"star":"user","aria-label":"manager"===e.role?"Manager":"User",mdxType:"Icon"})},mdxType:"Column"}),Object(t.b)(r.a,{isHeading:!0,name:"Name",width:"40%",cellRenderer:function(e){return Object(t.b)("strong",null,e.name)},mdxType:"Column"}),Object(t.b)(r.a,{name:"Type",subtitle:"Random characters",mdxType:"Column"}),Object(t.b)(r.a,{name:"Time",mdxType:"Column"})))),Object(t.b)("h3",{id:"responsiveness-examples"},"Responsiveness examples"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Mobile view:")," The table changes to a more list-like view when the screen width gets lower than the breakpoint defined using the ",Object(t.b)("inlineCode",{parentName:"li"},"mobileViewBreakpoint")," prop."),Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Hiding columns:")," When the mobile view is not active, you can hide columns below a certain breakpoint using the ",Object(t.b)("inlineCode",{parentName:"li"},"hideBelowBreakpoint")," prop. Columns hidden this way will become visible again in the mobile view.")),Object(t.b)("p",null,"The table below uses both modes â€“ on medium sized screens, columns that don't fit are hidden, while the mobile view is active on very small screens."),Object(t.b)(l.c,{__position:2,__code:'<Table\n  mobileViewBreakpoint="xxs"\n  data={dummyData.slice(8, 12)}\n  itemKey="name"\n>\n  <Column\n    name="Role"\n    width={32}\n    cellRenderer={item => (\n      <Icon name={item.role === \'manager\' ? \'star\' : \'user\'} />\n    )}\n  />\n  <Column\n    isHeading\n    name="Name"\n    width="40%"\n    cellRenderer={item => <strong>{item.name}</strong>}\n  />\n  <Column name="Region" />\n  <Column name="Type" />\n  <Column name="Time" />\n</Table>',__scope:{props:a,DefaultLayout:o.a,Playground:l.c,Props:l.d,Icon:i.a,Table:m.a,Column:r.a,CenterContent:b.a,dummyData:c.a},mdxType:"Playground"},Object(t.b)(m.a,{mobileViewBreakpoint:"xxs",data:c.a.slice(8,12),itemKey:"name",mdxType:"Table"},Object(t.b)(r.a,{name:"Role",width:32,cellRenderer:function(e){return Object(t.b)(i.a,{name:"manager"===e.role?"star":"user",mdxType:"Icon"})},mdxType:"Column"}),Object(t.b)(r.a,{isHeading:!0,name:"Name",width:"40%",cellRenderer:function(e){return Object(t.b)("strong",null,e.name)},mdxType:"Column"}),Object(t.b)(r.a,{name:"Region",mdxType:"Column"}),Object(t.b)(r.a,{name:"Type",mdxType:"Column"}),Object(t.b)(r.a,{name:"Time",mdxType:"Column"}))),Object(t.b)("h3",{id:"empty-state"},"Empty state"),Object(t.b)("p",null,"When no ",Object(t.b)("inlineCode",{parentName:"p"},"data")," array is provided, or when its length is ",Object(t.b)("inlineCode",{parentName:"p"},"0"),', the message "No data to display" will be shown below the column headers. You can customise this message using the ',Object(t.b)("inlineCode",{parentName:"p"},"emptyContent")," prop."),Object(t.b)("p",null,"Use the ",Object(t.b)("inlineCode",{parentName:"p"},"CenterContent")," component to make the content appear centred and take up a minimum height."),Object(t.b)(l.c,{__position:3,__code:'<Table\n  emptyContent={<CenterContent height={180}>Here be dragons</CenterContent>}\n>\n  <Column name="Role" width={32} />\n  <Column isHeading name="Name" width="40%" />\n  <Column name="Region" hideBelowBreakpoint="m" />\n  <Column name="Type" hideBelowBreakpoint="xs" />\n  <Column name="Time" />\n</Table>',__scope:{props:a,DefaultLayout:o.a,Playground:l.c,Props:l.d,Icon:i.a,Table:m.a,Column:r.a,CenterContent:b.a,dummyData:c.a},mdxType:"Playground"},Object(t.b)(m.a,{emptyContent:Object(t.b)(b.a,{height:180,mdxType:"CenterContent"},"Here be dragons"),mdxType:"Table"},Object(t.b)(r.a,{name:"Role",width:32,mdxType:"Column"}),Object(t.b)(r.a,{isHeading:!0,name:"Name",width:"40%",mdxType:"Column"}),Object(t.b)(r.a,{name:"Region",hideBelowBreakpoint:"m",mdxType:"Column"}),Object(t.b)(r.a,{name:"Type",hideBelowBreakpoint:"xs",mdxType:"Column"}),Object(t.b)(r.a,{name:"Time",mdxType:"Column"}))),Object(t.b)("h2",{id:"table-props"},"Table props"),Object(t.b)(l.d,{of:m.a,mdxType:"Props"}),Object(t.b)("h2",{id:"column-props"},"Column props"),Object(t.b)(l.d,{of:r.a,mdxType:"Props"}))}h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Table/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-table-readme-mdx-a9335d9f7abbc9cc73e3.js.map