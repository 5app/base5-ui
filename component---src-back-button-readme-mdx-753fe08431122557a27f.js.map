{"version":3,"sources":["webpack:///../src/BackButton/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pathname","baseComponent","Button","as","href","icon","TextLink","of","BackButton","isMDXComponent"],"mappings":"qTAWaA,G,UAAe,S,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,cADR,cAGA,mFACA,iBAAQ,CACN,GAAM,eADR,eAGA,qRACA,kGACE,yBAAgB,CACd,WAAc,KADhB,gBADF,+NAKA,sFACE,yBAAgB,CACd,WAAc,KADhB,sBADF,yFAKE,yBAAgB,CACd,WAAc,KADhB,eALF,UASA,uBAAK,mBAAU,CACX,UAAa,cACb,WAAc,OAFb,8RAcL,qBAAG,yBAAgB,CACf,WAAc,KADf,sBAAH,+FAIE,yBAAgB,CACd,WAAc,KADhB,cAJF,2BAQE,yBAAgB,CACd,WAAc,KADhB,cARF,0BAYE,yBAAgB,CACd,WAAc,KADhB,YAZF,oDAgBA,iEACE,yBAAgB,CACd,WAAc,KADhB,iBADF,iEAKE,gBAAO,CACL,KAAQ,yBACR,WAAc,KACb,yBAAgB,CACf,WAAc,KADf,eARL,yGAYE,yBAAgB,CACd,WAAc,KADhB,MAZF,0FAgBA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAoBC,SAAS,eAAeD,QAAQ,sBAClD,YAAC,IAAD,CAAYE,cAAeC,IAAQC,GAAG,IAAIC,KAAK,iBAAiBC,KAAK,QAAQN,QAAQ,cACnF,qCAEF,uBACA,uBACA,YAAC,IAAD,CAAYE,cAAeK,IAAUH,GAAG,IAAIC,KAAK,iBAAiBL,QAAQ,cACxE,oCAIN,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOQ,GAAIC,IAAYT,QAAQ,gB,yMAKnCH,EAAWa,gBAAiB","file":"component---src-back-button-readme-mdx-753fe08431122557a27f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport InlineList from '../InlineList';\nimport BackButton, { BackButtonProvider } from './';\nimport Button from '../Button';\nimport TextLink from '../TextLink';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"backbutton\"\n    }}>{`BackButton`}</h1>\n    <p>{`A component for handling backlinks for navigation in apps.`}</p>\n    <h2 {...{\n      \"id\": \"the-problem\"\n    }}>{`The problem`}</h2>\n    <p>{`Hard-coding back links in an app where pages may have different entry points can quickly lead to a bad user experience. Users expect a link or button labelled \"Back\" to take them back to the page they came from â€“ just like their browser's back button.`}</p>\n    <p>{`So, one might think, why not just trigger the browser's back button using `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`history.back`}</inlineCode>\n      {`? The answer is that we need back buttons to have a sensible fallback for when there's no browser history yet, for example after a link has been opened in a new window, or when a page was reached via a link in an email.`}</p>\n    <p>{`This is where this component comes in. Wrap your app with the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`BackButtonProvider`}</inlineCode>\n      {` component and pass it the current pathname. In react-router, you can get it from the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`useLocation`}</inlineCode>\n      {` hook:`}</p>\n    <pre><code {...{\n        \"className\": \"language-js\",\n        \"parentName\": \"pre\"\n      }}>{`import {useLocation} from 'react-router';\nimport {BackButtonProvider} from 'base5-ui/BackButton';\n\nfunction YourApp({children}) {\n    const {pathname} = useLocation();\n\n    return (\n        <BackButtonProvider pathname={pathname}>{children}</BackButtonProvider>\n    );\n}\n`}</code></pre>\n    <p><inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`BackButtonProvider`}</inlineCode>\n      {` tracks whether the user has navigated in the app. It then provides this information to the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`BackButton`}</inlineCode>\n      {` component via context. `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`BackButton`}</inlineCode>\n      {` then either renders a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<button>`}</inlineCode>\n      {` element, or the fallback link specified by you.`}</p>\n    <p>{`For visual customisation, you can pass a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`baseComponent`}</inlineCode>\n      {` prop which changes the component that's rendered by default (`}\n      <a {...{\n        \"href\": \"src-button-core-readme\",\n        \"parentName\": \"p\"\n      }}><inlineCode {...{\n          \"parentName\": \"a\"\n        }}>{`ButtonCore`}</inlineCode></a>\n      {`). Please make sure that this component has support for changing the rendered element type using the '`}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`as`}</inlineCode>\n      {`' prop (by default this is the case for any components built using styled-components).`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground mdxType=\"Playground\">\n      <BackButtonProvider pathname=\"/current/url\" mdxType=\"BackButtonProvider\">\n        <BackButton baseComponent={Button} as=\"a\" href=\"/fallback-link\" icon=\"arrow\" mdxType=\"BackButton\">\n          <p>{`Back button`}</p>\n        </BackButton>\n        <br />\n        <br />\n        <BackButton baseComponent={TextLink} as=\"a\" href=\"/fallback-link\" mdxType=\"BackButton\">\n          <p>{`Backlink`}</p>\n        </BackButton>\n      </BackButtonProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={BackButton} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}