(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"22ds":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return h}));var a=n("Fcif"),o=n("+I+c"),r=(n("mXGw"),n("/FXl")),c=n("TjRS"),i=n("ZFoC"),b=(n("inYB"),n("4Kil")),p=n("nraw"),s=n("BbnS"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/BackButton/README.mdx"}});var u={_frontmatter:l},m=c.a;function h(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(m,Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"backbutton"},"BackButton"),Object(r.b)("p",null,"A component for handling backlinks for navigation in apps."),Object(r.b)("h2",{id:"the-problem"},"The problem"),Object(r.b)("p",null,'Hard-coding back links in an app where pages may have different entry points can quickly lead to a bad user experience. Users expect a link or button labelled "Back" to take them back to the page they came from â€“ just like their browser\'s back button.'),Object(r.b)("p",null,"So, one might think, why not just trigger the browser's back button using ",Object(r.b)("inlineCode",{parentName:"p"},"history.back"),"? The answer is that we need back buttons to have a sensible fallback for when there's no browser history yet, for example after a link has been opened in a new window, or when a page was reached via a link in an email."),Object(r.b)("p",null,"This is where this component comes in. Wrap your app with the ",Object(r.b)("inlineCode",{parentName:"p"},"BackButtonProvider")," component and pass it the current pathname. In react-router, you can get it from the ",Object(r.b)("inlineCode",{parentName:"p"},"useLocation")," hook:"),Object(r.b)("pre",null,Object(r.b)("code",{className:"language-js",parentName:"pre"},"import {useLocation} from 'react-router';\nimport {BackButtonProvider} from 'base5-ui/BackButton';\n\nfunction YourApp({children}) {\n    const {pathname} = useLocation();\n\n    return (\n        <BackButtonProvider pathname={pathname}>{children}</BackButtonProvider>\n    );\n}\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"BackButtonProvider")," tracks whether the user has navigated in the app. It then provides this information to the ",Object(r.b)("inlineCode",{parentName:"p"},"BackButton")," component via context. ",Object(r.b)("inlineCode",{parentName:"p"},"BackButton")," then either renders a ",Object(r.b)("inlineCode",{parentName:"p"},"<button>")," element, or the fallback link specified by you."),Object(r.b)("p",null,"For visual customisation, you can pass a ",Object(r.b)("inlineCode",{parentName:"p"},"baseComponent")," prop which changes the component that's rendered by default (",Object(r.b)("a",{href:"src-button-core-readme",parentName:"p"},Object(r.b)("inlineCode",{parentName:"a"},"ButtonCore")),"). Please make sure that this component has support for changing the rendered element type using the '",Object(r.b)("inlineCode",{parentName:"p"},"as"),"' prop (by default this is the case for any components built using styled-components)."),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)(i.c,{mdxType:"Playground"},Object(r.b)(b.a,{pathname:"/current/url",mdxType:"BackButtonProvider"},Object(r.b)(b.b,{baseComponent:p.a,as:"a",href:"/fallback-link",icon:"arrow",mdxType:"BackButton"},Object(r.b)("p",null,"Back button")),Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)(b.b,{baseComponent:s.a,as:"a",href:"/fallback-link",mdxType:"BackButton"},Object(r.b)("p",null,"Backlink")))),Object(r.b)("h2",{id:"props"},"Props"),Object(r.b)(i.d,{of:b.b,mdxType:"Props"}))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/BackButton/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-back-button-readme-mdx-753fe08431122557a27f.js.map