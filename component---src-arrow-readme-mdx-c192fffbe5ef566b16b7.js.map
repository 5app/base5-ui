{"version":3,"sources":["webpack:///../src/Arrow/getArrowPosition.js","webpack:///../src/Arrow/index.js","webpack:///../src/Arrow/README.mdx"],"names":["getPlacements","placement","primaryPlacement","secondaryPlacement","getArrowPosition","primary","defaultPrimaryValue","defaultSecondaryValue","centerOffset","secondaryDirection","secondary","transformMap","top","right","bottom","left","Arrow","forwardRef","props","size","distanceFromEdge","style","baseArrowStyles","useMemo","position","display","width","arrowSize","height","backgroundColor","border","borderLeftColor","borderBottomColor","transform","transformOrigin","clipPath","useArrowStyles","defaultArrowPosition","arrowStyle","ref","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","padding","color","borderRadius","of","isMDXComponent"],"mappings":"2LA4BO,SAASA,EAAcC,GAC7B,IACA,EADIC,EAAJ,EAEA,GAAID,gBAAJ,EAAiC,CAAC,IAAD,EACSA,QADT,KAC/BC,EAD+B,KACbC,EADa,KAGjC,MAAO,CAACD,EAAR,GAGD,SAASE,EAAiB,EAA1B,GAGG,IAAD,EApB6BC,EAAQ,EAoBrC,IADAC,2BACA,MADsB,OACtB,MAD8BC,6BAC9B,MADsD,EACtD,EADyDC,EACzD,EADyDA,aACzD,EAC8CR,EAD9C,GACME,EADN,KACwBC,EADxB,KAEKM,GAtBgC,EAsBtC,EArBIJ,UAD0BA,EAsBmB,IArBjD,UAA0BA,EAClBK,mBAAP,MAEOA,kBAAP,QAuBD,OAAO,EAAP,cAEuBP,EAAkB,EAErCK,EAAY,oBAJhB,Q,kZAUD,Q,8vBCpDA,IAAMG,EAAe,CACpBC,IADoB,kCAEpBC,MAFoB,iCAGpBC,OAHoB,iCAIpBC,KAAM,kCA2BP,IAAMC,EAAQC,sBAAW,cAAiB,IAClChB,EAA4CiB,EADX,UACtBC,EAAiCD,EADX,KAChBE,EAA2BF,EADX,iBACEG,EAASH,EADX,MAGjChB,EAAoBF,EAHa,MAIlCsB,EA5BP,SAAwBpB,EAAiB,GAqBxC,OApBoBqB,mBACnB,iBAAO,CACNC,SADM,WAGNC,QAHM,eAINC,MAAOC,EAJD,KAKNC,OAAQD,EALF,KAONE,gBAPM,UAQNC,OARM,UASNC,gBATM,cAUNC,kBAVM,cAYNC,UAAWtB,EAZL,GAaNuB,gBAbM,MAcNC,SAAU,qCAEX,CAACR,EAjBF,IA2BwBS,CAAelC,EAAvC,GACMmC,EAAuBd,mBAC5B,kBACCnB,EAAiBH,EAAW,CAC3BO,aAAa,IAAKW,EAAN,EADe,KAE3BZ,sBAAuBa,MAEzB,CAACA,EAAiB,EAXqB,IAcpCC,GAAJ,KAAaA,aACLA,EAAP,GAED,IAAMiB,E,+UAAU,cAAhB,GAMA,OAAO,oBAAMC,IAAN,EAAgBlB,MAAOiB,OAG/BtB,sBAEAA,eAAqB,CACpBf,UADoB,MAEpBkB,KAFoB,EAGpBC,iBAAkB,GAYnB,W,i1BCvEO,IAAMoB,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACG3B,E,oIACF,mBACD,OAAO,YAACwB,EAAD,KAAeD,EAAiBvB,EAAhC,CAAuC2B,WAAYA,EAAYC,QAAQ,cAK5E,iBAAQ,CACN,GAAM,SADR,SAGA,qNAAmM,0BAAYC,WAAW,KAAvB,QAAnM,KAAyP,0BAAYA,WAAW,KAAvB,aAAzP,KAAoT,0BAAYA,WAAW,KAAvB,aAApT,MACA,4GAA2F,0BAAYA,WAAW,KAAvB,UAA3F,UAAwJ,0BAAYA,WAAW,KAAvB,YAAxJ,KAAkN,0BAAYA,WAAW,KAAvB,YAAlN,QAA+Q,0BAAYA,WAAW,KAAvB,SAA/Q,KACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sTAAgUC,QAAS,CAC1WhC,QACAyB,kBACAQ,eACAC,UACApC,WACC8B,QAAQ,cACd,mBAAKzB,MAAO,CACLG,SAAU,WACVE,MAAO,IACP2B,QAAS,EACTxB,gBAAiB,OACjByB,MAAO,QACPxB,OAAQ,kBACRyB,aAAc,IAPrB,wCAUC,YAAC,IAAD,CAAOtD,UAAU,UAAUmB,iBAAkB,GAAID,KAAM,GAAI2B,QAAQ,YAGjE,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAOU,GAAIxC,IAAO8B,QAAQ,W,6LAK9BF,EAAWa,gBAAiB","file":"component---src-arrow-readme-mdx-c192fffbe5ef566b16b7.js","sourcesContent":["/* Given a popper.js placement string, this function\n * returns a CSS style object containing sensible default\n * styles for the placement string.\n *\n * The (customisable) defaults are:\n * - 100% for the primary direction\n * - 8 pixels for the secondary direction\n *\n * When no secondary direction is defined, styles for centering\n * are returned which can be customised with an offset:\n * `calc(50% + ${centerOffset})`\n *\n * Examples:\n * getArrowPosition('bottom-start') // returns {bottom: '100%', left: 8}\n * getArrowPosition('bottom-start', {defaultSecondaryValue: 4}) // returns {bottom: '100%', left: 4}\n * getArrowPosition('left-end') // returns {left: '100%', bottom: 8}\n * getArrowPosition('right') // returns {right: '100%', top: 50%}\n * getArrowPosition('right', {centerOffset: '-4px'}) // returns {right: '100%', top: calc(50% - 4px)}\n */\n\nfunction getSecondaryDirection(primary, secondary) {\n\tif (primary === 'left' || primary === 'right') {\n\t\treturn secondary === 'end' ? 'bottom' : 'top';\n\t} else {\n\t\treturn secondary === 'end' ? 'right' : 'left';\n\t}\n}\n\nexport function getPlacements(placement) {\n\tlet primaryPlacement = placement;\n\tlet secondaryPlacement;\n\tif (placement.indexOf('-') > -1) {\n\t\t[primaryPlacement, secondaryPlacement] = placement.split('-');\n\t}\n\treturn [primaryPlacement, secondaryPlacement];\n}\n\nfunction getArrowPosition(\n\tplacement,\n\t{defaultPrimaryValue = '100%', defaultSecondaryValue = 8, centerOffset}\n) {\n\tconst [primaryPlacement, secondaryPlacement] = getPlacements(placement);\n\tconst secondaryDirection = getSecondaryDirection(\n\t\tprimaryPlacement,\n\t\tsecondaryPlacement\n\t);\n\n\treturn {\n\t\t[primaryPlacement]: defaultPrimaryValue,\n\t\t[secondaryDirection]: secondaryPlacement\n\t\t\t? defaultSecondaryValue\n\t\t\t: centerOffset\n\t\t\t? `calc(50% + ${centerOffset})`\n\t\t\t: '50%',\n\t};\n}\n\nexport default getArrowPosition;\n","import React, {forwardRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport getArrowPosition, {getPlacements} from './getArrowPosition';\n\nconst transformMap = {\n\ttop: 'translateY(-50%) rotate(135deg)',\n\tright: 'translateX(50%) rotate(225deg)',\n\tbottom: 'translateY(50%) rotate(-45deg)',\n\tleft: 'translateX(-50%) rotate(45deg)',\n};\n\nfunction useArrowStyles(primaryPlacement, arrowSize) {\n\tconst arrowStyles = useMemo(\n\t\t() => ({\n\t\t\tposition: 'absolute',\n\n\t\t\tdisplay: 'inline-block',\n\t\t\twidth: arrowSize + 'px',\n\t\t\theight: arrowSize + 'px',\n\n\t\t\tbackgroundColor: 'inherit',\n\t\t\tborder: 'inherit',\n\t\t\tborderLeftColor: 'transparent',\n\t\t\tborderBottomColor: 'transparent',\n\n\t\t\ttransform: transformMap[primaryPlacement],\n\t\t\ttransformOrigin: '50%',\n\t\t\tclipPath: 'polygon(0 0, 100% 0, 100% 100%)',\n\t\t}),\n\t\t[arrowSize, primaryPlacement]\n\t);\n\n\treturn arrowStyles;\n}\n\nconst Arrow = forwardRef((props, ref) => {\n\tconst {placement, size, distanceFromEdge, style} = props;\n\n\tconst [primaryPlacement] = getPlacements(placement);\n\tconst baseArrowStyles = useArrowStyles(primaryPlacement, size);\n\tconst defaultArrowPosition = useMemo(\n\t\t() =>\n\t\t\tgetArrowPosition(placement, {\n\t\t\t\tcenterOffset: `-${size / 2}px`,\n\t\t\t\tdefaultSecondaryValue: distanceFromEdge,\n\t\t\t}),\n\t\t[distanceFromEdge, placement, size]\n\t);\n\t// Don't let an empty primary position attribute reset the default\n\tif (style && style[primaryPlacement] === '') {\n\t\tdelete style[primaryPlacement];\n\t}\n\tconst arrowStyle = {\n\t\t...baseArrowStyles,\n\t\t...defaultArrowPosition,\n\t\t...style,\n\t};\n\n\treturn <span ref={ref} style={arrowStyle} />;\n});\n\nArrow.displayName = 'Arrow';\n\nArrow.defaultProps = {\n\tplacement: 'top',\n\tsize: 8,\n\tdistanceFromEdge: 8,\n};\n\nArrow.propTypes = {\n\t/** Controls how far the arrow is placed from the container's edge when the placement contains a '-start' or '-end' suffix. */\n\tdistanceFromEdge: PropTypes.number,\n\t/** The arrow will be placed on the opposing side of the defined direction: 'top', 'bottom', 'left', or 'right'. Add an optional suffix '-start' or '-end' to align the arrow to the start or end of the chosen direction. */\n\tplacement: PropTypes.string,\n\t/** Control the arrow size (length of side) */\n\tsize: PropTypes.number,\n};\n\nexport default Arrow;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Arrow from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"arrow\"\n    }}>{`Arrow`}</h1>\n    <p>{`The Arrow component is a tooltip \"arrow\" that can be dropped into any container element. It inherits the container's styling and can be positioned using a popper.js placement string (e.g. `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`top-start`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`right-end`}</inlineCode>{`).`}</p>\n    <p>{`For the positioning to work, the parent element needs to have a position other than `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{`, e.g. `}<inlineCode parentName=\"p\">{`relative`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`absolute`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`fixed`}</inlineCode>{`.`}</p>\n    <Playground __position={0} __code={'<div\\n  style={{\\n    position: \\'relative\\',\\n    width: 250,\\n    padding: 8,\\n    backgroundColor: \\'grey\\',\\n    color: \\'white\\',\\n    border: \\'1px solid black\\',\\n    borderRadius: 4,\\n  }}\\n>\\n  Hello, I\\'m a box with a pointy arrow.\\n  <Arrow placement=\\\"top-end\\\" distanceFromEdge={20} size={10} />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Arrow\n    }} mdxType=\"Playground\">\n\t<div style={{\n        position: 'relative',\n        width: 250,\n        padding: 8,\n        backgroundColor: 'grey',\n        color: 'white',\n        border: '1px solid black',\n        borderRadius: 4\n      }}>\n\t\tHello, I'm a box with a pointy arrow.\n\t\t<Arrow placement=\"top-end\" distanceFromEdge={20} size={10} mdxType=\"Arrow\" />\n\t</div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"arrow-props\"\n    }}>{`Arrow props`}</h2>\n    <Props of={Arrow} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}