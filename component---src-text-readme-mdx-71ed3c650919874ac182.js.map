{"version":3,"sources":["webpack:///../src/Text/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Text","as","size","lineHeight","dimmed","bold","mt","caps","overflow","display","of","isMDXComponent"],"mappings":"6gBAQO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,qBAAG,0BAAYC,WAAW,KAAvB,QAAH,mGACA,sBACE,kBAAIA,WAAW,MAAf,+EACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,uBAEF,2CAA0B,0BAAYA,WAAW,KAAvB,YAA1B,QAAuF,0BAAYA,WAAW,KAAvB,aAAvF,uDAAoM,0BAAYA,WAAW,KAAvB,QAApM,QAA6P,0BAAYA,WAAW,KAAvB,SAA7P,KACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ymCAA8oCC,QAAS,CACxrCL,QACAH,kBACAS,eACAC,UACAC,UACCP,QAAQ,cACd,YAAC,IAAD,CAAMQ,GAAG,KAAKC,KAAK,KAAKC,WAAY,IAAKV,QAAQ,QAAjD,+CAGA,YAAC,IAAD,CAAMW,QAAM,EAACH,GAAG,IAAIR,QAAQ,QAA5B,2BAC0B,IACzB,YAAC,IAAD,CAAMY,MAAI,EAACD,QAAQ,EAAOX,QAAQ,QAAlC,uBAID,YAAC,IAAD,CAAMY,MAAI,EAACJ,GAAG,IAAIK,GAAG,IAAIb,QAAQ,QAAjC,8BAC4B,YAAC,IAAD,CAAMY,MAAM,EAAOZ,QAAQ,QAA3B,YAD5B,SAGA,YAAC,IAAD,CAAMQ,GAAG,IAAIM,KAAK,MAAMD,GAAG,IAAIb,QAAQ,QAAvC,yDAGA,YAAC,IAAD,CAAMQ,GAAG,IAAIM,KAAK,QAAQd,QAAQ,QAAlC,6DAC4D,IAC3D,YAAC,IAAD,CAAMc,KAAK,OAAOd,QAAQ,QAA1B,yBAED,YAAC,IAAD,CAAMQ,GAAG,IAAIO,SAAS,OAAOF,GAAG,IAAIb,QAAQ,QAA5C,yJAGA,YAAC,IAAD,CAAMgB,QAAQ,QAAQD,SAAS,WAAWF,GAAG,IAAIb,QAAQ,QAAzD,4QAOG,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOiB,GAAIV,IAAMP,QAAQ,gB,mMAK7BH,EAAWqB,gBAAiB","file":"component---src-text-readme-mdx-71ed3c650919874ac182.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Text from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h1>\n    <p><inlineCode parentName=\"p\">{`Text`}</inlineCode>{` is a helper component for formatting text. It supports styling props for the following styles:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Text styles (bold, dimmed, fontSize, lineHeight, textAlign, overflow, caps)`}</li>\n      <li parentName=\"ul\">{`Display (block, inline, inline-block)`}</li>\n      <li parentName=\"ul\">{`Margin and padding`}</li>\n    </ul>\n    <p>{`In addition to the `}<inlineCode parentName=\"p\">{`fontSize`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`textAlign`}</inlineCode>{` props, this component also supports the shorthands `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`align`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'<Text as=\\\"h1\\\" size=\\\"xl\\\" lineHeight={1.3}>\\n  Extra-large text with a smaller line height\\n</Text>\\n<Text dimmed as=\\\"p\\\">\\n  A dimmed subtitle with a{\\' \\'}\\n  <Text bold dimmed={false}>\\n    non-dimmed segment\\n  </Text>\\n</Text>\\n<Text bold as=\\\"p\\\" mt=\\\"m\\\">\\n  Bold text with some nested <Text bold={false}>non-bold</Text> text\\n</Text>\\n<Text as=\\\"p\\\" caps=\\\"all\\\" mt=\\\"m\\\">\\n  this text is all-lowercase, but displays in uppercase\\n</Text>\\n<Text as=\\\"p\\\" caps=\\\"first\\\">\\n  this text is all-lowercase, but is displayed in title-case{\\' \\'}\\n  <Text caps=\\\"none\\\">(unless overwritten)</Text>\\n</Text>\\n<Text as=\\\"p\\\" overflow=\\\"wrap\\\" mt=\\\"m\\\">\\n  OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.\\n</Text>\\n<Text display=\\\"block\\\" overflow=\\\"ellipsis\\\" mt=\\\"m\\\">\\n  An overflow value of \\'ellipsis\\' will prevent line-breaks and cut off\\n  overflowing text with an ellipsis (…). This only works with \\\"block-level\\\"\\n  elements (e.g. div, p). If you want to use it with a non-block element like\\n  `span`, set the `display` prop to \\'block\\'.\\n</Text>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Text\n    }} mdxType=\"Playground\">\n\t<Text as=\"h1\" size=\"xl\" lineHeight={1.3} mdxType=\"Text\">\n\t\tExtra-large text with a smaller line height\n\t</Text>\n\t<Text dimmed as=\"p\" mdxType=\"Text\">\n\t\tA dimmed subtitle with a{' '}\n\t\t<Text bold dimmed={false} mdxType=\"Text\">\n\t\t\tnon-dimmed segment\n\t\t</Text>\n\t</Text>\n\t<Text bold as=\"p\" mt=\"m\" mdxType=\"Text\">\n\t\tBold text with some nested <Text bold={false} mdxType=\"Text\">non-bold</Text> text\n\t</Text>\n\t<Text as=\"p\" caps=\"all\" mt=\"m\" mdxType=\"Text\">\n\t\tthis text is all-lowercase, but displays in uppercase\n\t</Text>\n\t<Text as=\"p\" caps=\"first\" mdxType=\"Text\">\n\t\tthis text is all-lowercase, but is displayed in title-case{' '}\n\t\t<Text caps=\"none\" mdxType=\"Text\">(unless overwritten)</Text>\n\t</Text>\n\t<Text as=\"p\" overflow=\"wrap\" mt=\"m\" mdxType=\"Text\">\n\t\tOverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.\n\t</Text>\n\t<Text display=\"block\" overflow=\"ellipsis\" mt=\"m\" mdxType=\"Text\">\n\t\tAn overflow value of 'ellipsis' will prevent line-breaks and cut off\n\t\toverflowing text with an ellipsis (…). This only works with\n\t\t\"block-level\" elements (e.g. div, p). If you want to use it with a\n\t\tnon-block element like `span`, set the `display` prop to 'block'.\n\t</Text>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Text} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}