(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"1RoB":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var l=n("/FXl"),i=n("TjRS"),o=n("ZFoC"),a=n("VaD+");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Text/README.mdx"}});var p={_frontmatter:r},d=i.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,l,i={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(l.b)(d,s({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"text"},"Text"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Text")," is a helper component for formatting text. It supports styling props for the following styles:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Text styles (bold, dimmed, fontSize, lineHeight, textAlign, overflow, caps)"),Object(l.b)("li",{parentName:"ul"},"Display (block, inline, inline-block)"),Object(l.b)("li",{parentName:"ul"},"Margin and padding")),Object(l.b)("p",null,"In addition to the ",Object(l.b)("inlineCode",{parentName:"p"},"fontSize")," and ",Object(l.b)("inlineCode",{parentName:"p"},"textAlign")," props, this component also supports the shorthands ",Object(l.b)("inlineCode",{parentName:"p"},"size")," and ",Object(l.b)("inlineCode",{parentName:"p"},"align"),"."),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)(o.c,{__position:0,__code:'<Text as="h1" size="xl" lineHeight={1.3}>\n  Extra-large text with a smaller line height\n</Text>\n<Text dimmed as="p">\n  A dimmed subtitle with a{\' \'}\n  <Text bold dimmed={false}>\n    non-dimmed segment\n  </Text>\n</Text>\n<Text bold as="p" mt="m">\n  Bold text with some nested <Text bold={false}>non-bold</Text> text\n</Text>\n<Text as="p" caps="all" mt="m">\n  this text is all-lowercase, but displays in uppercase\n</Text>\n<Text as="p" caps="first">\n  this text is all-lowercase, but is displayed in title-case{\' \'}\n  <Text caps="none">(unless overwritten)</Text>\n</Text>\n<Text as="p" overflow="wrap" mt="m">\n  OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.\n</Text>\n<Text display="block" overflow="ellipsis" mt="m">\n  An overflow value of \'ellipsis\' will prevent line-breaks and cut off\n  overflowing text with an ellipsis (…). This only works with "block-level"\n  elements (e.g. div, p). If you want to use it with a non-block element like\n  `span`, set the `display` prop to \'block\'.\n</Text>',__scope:{props:n,DefaultLayout:i.a,Playground:o.c,Props:o.d,Text:a.a},mdxType:"Playground"},Object(l.b)(a.a,{as:"h1",size:"xl",lineHeight:1.3,mdxType:"Text"},"Extra-large text with a smaller line height"),Object(l.b)(a.a,{dimmed:!0,as:"p",mdxType:"Text"},"A dimmed subtitle with a"," ",Object(l.b)(a.a,{bold:!0,dimmed:!1,mdxType:"Text"},"non-dimmed segment")),Object(l.b)(a.a,{bold:!0,as:"p",mt:"m",mdxType:"Text"},"Bold text with some nested ",Object(l.b)(a.a,{bold:!1,mdxType:"Text"},"non-bold")," text"),Object(l.b)(a.a,{as:"p",caps:"all",mt:"m",mdxType:"Text"},"this text is all-lowercase, but displays in uppercase"),Object(l.b)(a.a,{as:"p",caps:"first",mdxType:"Text"},"this text is all-lowercase, but is displayed in title-case"," ",Object(l.b)(a.a,{caps:"none",mdxType:"Text"},"(unless overwritten)")),Object(l.b)(a.a,{as:"p",overflow:"wrap",mt:"m",mdxType:"Text"},"OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood."),Object(l.b)(a.a,{display:"block",overflow:"ellipsis",mt:"m",mdxType:"Text"},"An overflow value of 'ellipsis' will prevent line-breaks and cut off overflowing text with an ellipsis (…). This only works with \"block-level\" elements (e.g. div, p). If you want to use it with a non-block element like `span`, set the `display` prop to 'block'.")),Object(l.b)("h2",{id:"props"},"Props"),Object(l.b)(o.d,{of:a.a,mdxType:"Props"}))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Text/README.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-text-readme-mdx-019763e046d6f55f8507.js.map