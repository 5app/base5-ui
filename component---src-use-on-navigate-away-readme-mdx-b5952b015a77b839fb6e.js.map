{"version":3,"sources":["webpack:///../src/useOnNavigateAway/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,0UACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,oCAAwH,0BAAYA,WAAW,MAAvB,UAAxH,OAAmL,0BAAYA,WAAW,MAAvB,aAAnL,+DAAyS,0BAAYA,WAAW,MAAvB,kBAAzS,aACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBAApB,uEACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,oDAA+H,0BAAYA,WAAW,MAAvB,QAA/H,MAEF,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wF,gNAQTJ,EAAWK,gBAAiB","file":"component---src-use-on-navigate-away-readme-mdx-b5952b015a77b839fb6e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useonnavigateaway\"\n    }}>{`useOnNavigateAway`}</h1>\n    <p>{`This hook lets you run a callback whenever the user clicks, or moves focus anywhere outside of a specified element. This is useful to handle changes caused by in-page navigation, e.g. closing a dropdown menu when the user navigates outside of an element that contains both the menu and the menu's trigger.`}</p>\n    <h2 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`excludedElementRef`}</inlineCode>{` - A React ref (as obtained from `}<inlineCode parentName=\"li\">{`useRef`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`createRef`}</inlineCode>{`) to an element that should be excluded from triggering the `}<inlineCode parentName=\"li\">{`onNavigateAway`}</inlineCode>{` callback`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onNavigateAway`}</inlineCode>{` - Function that's called when the user leaves the excluded element`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isEnabled`}</inlineCode>{` - Set to false to disable the hook (defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useOnNavigateAway(wrapperRef, closeMenu, isMenuOpen && searchValue === '');\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}