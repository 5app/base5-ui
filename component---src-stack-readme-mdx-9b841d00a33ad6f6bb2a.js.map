{"version":3,"sources":["webpack:///../src/Stack/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Box","Hidden","Text","TextLink","Stack","StackWrapper","StackItem","spacing","href","as","breakpoints","above","hideBelow","of","isMDXComponent"],"mappings":"gUAYaA,G,UAAe,S,sMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,UAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,SADR,SAGA,mFAAkE,0BAAYC,WAAW,KAAvB,OAAlE,iBACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4JAAqKC,SAAO,GAC7ML,QACAH,kBACAS,eACAC,UACAC,QACAC,WACAC,SACAC,aACAC,UACAC,iBACAC,eAX6M,gBAY7MjB,IAZ6M,EAa7MH,eAb6M,GAc5MO,QAAQ,cACd,YAAC,IAAD,CAAOc,QAAQ,MAAMd,QAAQ,SAC5B,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,QACA,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,YACA,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,cAGE,iBAAQ,CACN,GAAM,uCADR,uCAGA,oLACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,yGAQL,iGAAgF,sBAAQA,WAAW,KAAnB,OAAhF,iDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sNASL,iBAAQ,CACN,GAAM,mCADR,mCAGA,gCAAe,0BAAYA,WAAW,KAAvB,UAAf,wJAEA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,iPAA4PC,SAAO,GACpSL,QACAH,kBACAS,eACAC,UACAC,QACAC,WACAC,SACAC,aACAC,UACAC,iBACAC,eAXoS,gBAYpSjB,IAZoS,EAapSH,eAboS,GAcnSO,QAAQ,cACd,YAAC,IAAD,CAAOgB,GAAG,OAAOF,QAAS,CAAC,EAAG,IAAK,MAAOG,YAAa,CAAC,IAAK,KAAMjB,QAAQ,SAC1E,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,SACA,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,QACA,YAAC,IAAD,CAAQkB,MAAM,KAAKlB,QAAQ,UAC1B,YAAC,IAAD,CAAUe,KAAK,IAAIf,QAAQ,YAA3B,WAIC,iBAAQ,CACN,GAAM,gCADR,gCAGA,iNAEiC,0BAAYC,WAAW,KAAvB,gBAFjC,QAEkG,0BAAYA,WAAW,KAAvB,aAFlG,gBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAIL,4BAAW,0BAAYA,WAAW,KAAvB,SAAX,gCAA6F,0BAAYA,WAAW,KAAvB,gBAA7F,mCACmB,0BAAYA,WAAW,KAAvB,UADnB,2DACiI,0BAAYA,WAAW,KAAvB,aADjI,oBAEF,0BAAYA,WAAW,KAAvB,aAFE,4GAEgK,0BAAYA,WAAW,KAAvB,qBAFhK,UAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4PAAqQC,SAAO,GAC7SL,QACAH,kBACAS,eACAC,UACAC,QACAC,WACAC,SACAC,aACAC,UACAC,iBACAC,eAX6S,gBAY7SjB,IAZ6S,EAa7SH,eAb6S,GAc5SO,QAAQ,cACd,YAAC,IAAD,CAAcgB,GAAG,OAAOF,QAAS,CAAC,EAAG,IAAK,MAAOG,YAAa,CAAC,IAAK,KAAMjB,QAAQ,gBACjF,YAAC,IAAD,CAAWA,QAAQ,aAAnB,eACA,YAAC,IAAD,CAAWA,QAAQ,aAAnB,aACA,YAAC,IAAD,CAAWmB,UAAU,KAAKnB,QAAQ,aAAlC,SACA,YAAC,IAAD,CAAWA,QAAQ,aAAnB,YAGE,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOoB,GAAIT,IAAOX,QAAQ,gB,oMAK9BH,EAAWwB,gBAAiB","file":"component---src-stack-readme-mdx-9b841d00a33ad6f6bb2a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Box from '../Box';\nimport Hidden from '../Hidden';\nimport Text from '../Text';\nimport TextLink from '../TextLink';\nimport Stack, { StackWrapper, StackItem } from './';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"stack\"\n    }}>{`Stack`}</h1>\n    <p>{`Control vertical spacing between Stack items. Supports all `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` style props.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'<Stack spacing=\\\"xxs\\\">\\n  <TextLink href=\\\"#\\\">Home</TextLink>\\n  <TextLink href=\\\"#\\\">Projects</TextLink>\\n  <TextLink href=\\\"#\\\">About us</TextLink>\\n</Stack>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Hidden,\n      Text,\n      TextLink,\n      Stack,\n      StackWrapper,\n      StackItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<Stack spacing=\"xxs\" mdxType=\"Stack\">\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Home</TextLink>\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Projects</TextLink>\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">About us</TextLink>\n\t</Stack>\n    </Playground>\n    <h2 {...{\n      \"id\": \"conditionally-rendering-stack-items\"\n    }}>{`Conditionally rendering Stack items`}</h2>\n    <p>{`To conditionally render Stack items, simply ensure that a falsy value is returned as a direct child of the Stack component in place of the respective item.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack spacing=\"s\">\n    <>Milk</>\n    <>Eggs</>\n    {shouldRenderItem && <>Cheese</>}\n</Stack>\n`}</code></pre>\n    <p>{`Please note that a nested falsy return as shown in the next example will `}<strong parentName=\"p\">{`not`}</strong>{` work, and will generate superfluous spacing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Stack spacing=\"s\">\n    <Item>Milk</Item>\n    <Item>Eggs</Item>\n    {/* Don't do this, it will create extra spacing for the hidden item: */}\n    <Item isHidden={shouldRenderItem}>Cheese</Item>\n</Stack>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"responsively-hiding-stack-items\"\n    }}>{`Responsively hiding Stack items`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`Hidden`}</inlineCode>{` component to hide Stack items below or above a certain breakpoint.\nThe following list has a third list item that will be hidden on larger screens.`}</p>\n    <Playground __position={1} __code={'<Stack as=\\\"list\\\" spacing={[0, \\'s\\', \\'xl\\']} breakpoints={[\\'m\\', \\'l\\']}>\\n  <TextLink href=\\\"#\\\">Milch</TextLink>\\n  <TextLink href=\\\"#\\\">Eier</TextLink>\\n  <Hidden above=\\\"xl\\\">\\n    <TextLink href=\\\"#\\\">Käse</TextLink>\\n  </Hidden>\\n</Stack>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Hidden,\n      Text,\n      TextLink,\n      Stack,\n      StackWrapper,\n      StackItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<Stack as=\"list\" spacing={[0, 's', 'xl']} breakpoints={['m', 'l']} mdxType=\"Stack\">\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Milch</TextLink>\n\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Eier</TextLink>\n\t\t<Hidden above=\"xl\" mdxType=\"Hidden\">\n\t\t\t<TextLink href=\"#\" mdxType=\"TextLink\">Käse</TextLink>\n\t\t</Hidden>\n\t</Stack>\n    </Playground>\n    <h2 {...{\n      \"id\": \"granular-list-item-rendering\"\n    }}>{`Granular list item rendering`}</h2>\n    <p>{`Some use cases may require rendering the list items separately from its wrapper,\nfor example in expensive-to-render lists that need to be memoised.\nFor these use cases you can import `}<inlineCode parentName=\"p\">{`StackWrapper`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`StackItem`}</inlineCode>{` separately:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {StackWrapper, StackItem} from 'base5-ui/Stack';\n`}</code></pre>\n    <p>{`All `}<inlineCode parentName=\"p\">{`Stack`}</inlineCode>{` props are now passed to the `}<inlineCode parentName=\"p\">{`StackWrapper`}</inlineCode>{` instead.\nInstead of using the `}<inlineCode parentName=\"p\">{`Hidden`}</inlineCode>{` component to responsively hide items, you can pass the `}<inlineCode parentName=\"p\">{`hideBelow`}</inlineCode>{` prop to items.\n`}<inlineCode parentName=\"p\">{`StackItem`}</inlineCode>{` rejects all other custom props by default, but you can allow them to be passed through by attaching the `}<inlineCode parentName=\"p\">{`allowUnknownProps`}</inlineCode>{` prop.`}</p>\n    <Playground __position={2} __code={'<StackWrapper as=\\\"list\\\" spacing={[0, \\'s\\', \\'xl\\']} breakpoints={[\\'m\\', \\'l\\']}>\\n  <StackItem>Development</StackItem>\\n  <StackItem>Marketing</StackItem>\\n  <StackItem hideBelow=\\\"xs\\\">Sales</StackItem>\\n  <StackItem>Design</StackItem>\\n</StackWrapper>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Box,\n      Hidden,\n      Text,\n      TextLink,\n      Stack,\n      StackWrapper,\n      StackItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<StackWrapper as=\"list\" spacing={[0, 's', 'xl']} breakpoints={['m', 'l']} mdxType=\"StackWrapper\">\n\t\t<StackItem mdxType=\"StackItem\">Development</StackItem>\n\t\t<StackItem mdxType=\"StackItem\">Marketing</StackItem>\n\t\t<StackItem hideBelow=\"xs\" mdxType=\"StackItem\">Sales</StackItem>\n\t\t<StackItem mdxType=\"StackItem\">Design</StackItem>\n\t</StackWrapper>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Stack} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}