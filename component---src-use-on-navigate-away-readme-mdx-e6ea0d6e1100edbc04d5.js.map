{"version":3,"sources":["webpack:///../src/useOnNavigateAway/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,0UACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBAEE,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,sBAFH,oCAME,yBAAgB,CACd,WAAc,MADhB,UANF,OAUE,yBAAgB,CACd,WAAc,MADhB,aAVF,+DAcE,yBAAgB,CACd,WAAc,MADhB,kBAdF,aAoBA,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,kBAFH,uEAQA,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,aAFH,oDAME,yBAAgB,CACd,WAAc,MADhB,QANF,MAYF,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,mBAAU,CACX,UAAa,cACb,WAAc,OAFb,wF,gNASTH,EAAWI,gBAAiB","file":"component---src-use-on-navigate-away-readme-mdx-e6ea0d6e1100edbc04d5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"useonnavigateaway\"\n    }}>{`useOnNavigateAway`}</h1>\n    <p>{`This hook lets you run a callback whenever the user clicks, or moves focus anywhere outside of a specified element. This is useful to handle changes caused by in-page navigation, e.g. closing a dropdown menu when the user navigates outside of an element that contains both the menu and the menu's trigger.`}</p>\n    <h2 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h2>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`excludedElementRef`}</inlineCode>\n        {` - A React ref (as obtained from `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`useRef`}</inlineCode>\n        {` or `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`createRef`}</inlineCode>\n        {`) to an element that should be excluded from triggering the `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`onNavigateAway`}</inlineCode>\n        {` callback`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`onNavigateAway`}</inlineCode>\n        {` - Function that's called when the user leaves the excluded element`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`isEnabled`}</inlineCode>\n        {` - Set to false to disable the hook (defaults to `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`true`}</inlineCode>\n        {`)`}</li>\n\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code {...{\n        \"className\": \"language-js\",\n        \"parentName\": \"pre\"\n      }}>{`useOnNavigateAway(wrapperRef, closeMenu, isMenuOpen && searchValue === '');\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}