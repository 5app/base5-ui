(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{F3iY:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return m}));var a=n("Fcif"),o=n("+I+c"),r=n("mXGw"),s=n("/FXl"),c=n("TjRS"),i=n("ZFoC"),l=n("hTy3"),b=n("nraw"),u=(n("aD51"),{});void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Status/README.mdx"}});var p={_frontmatter:u},d=c.a;function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)(d,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"status"},"Status"),Object(s.b)("p",null,"Any changes to the textual content of this component are reported to users of screen readers. It's equivalent to a div with the following props:"),Object(s.b)("pre",null,Object(s.b)("code",{className:"language-jsx",parentName:"pre"},'<div role="status" aria-live="polite" aria-relevant="additions text" />\n')),Object(s.b)("p",null,"For more control you can override each of these props."),Object(s.b)("h2",{id:"examples"},"Examples"),Object(s.b)(i.c,{mdxType:"Playground"},(function(){var e=r.useState(!1),t=e[0],n=e[1];return Object(s.b)(r.Fragment,null,Object(s.b)(b.a,{isActive:t,onClick:function(){return n((function(e){return!e}))},mdxType:"Button"},"Click me"),Object(s.b)(l.a,{mdxType:"Status"},t&&"Congrats, you have clicked the button! This message will be read out by screen readers."))})),Object(s.b)("h2",{id:"usage-note"},"Usage note"),Object(s.b)("p",null,"Make sure that the ",Object(s.b)("inlineCode",{parentName:"p"},"Status")," component is always rendered – even when it's empty – before you update its contents. If the element is added alongside its content, screen readers will ",Object(s.b)("strong",{parentName:"p"},"not")," announce it!"),Object(s.b)("p",null,"The example below would not work:"),Object(s.b)("pre",null,Object(s.b)("code",{className:"language-jsx",parentName:"pre"},"{\n    showConfirmation && <Status>This status will NOT BE announced :(</Status>;\n}\n")),Object(s.b)("h2",{id:"props"},"Props"),Object(s.b)(i.d,{of:l.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Status/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-status-readme-mdx-17d0b0eb96c2f6d9b842.js.map