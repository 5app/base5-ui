(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"1RoB":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return d}));var l=n("Fcif"),i=n("+I+c"),a=(n("mXGw"),n("/FXl")),o=n("TjRS"),b=n("ZFoC"),p=n("VaD+"),s=(n("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Text/README.mdx"}});var r={_frontmatter:s},c=o.a;function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)(c,Object(l.a)({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"text"},"Text"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Text")," is a helper component for formatting text. It supports styling props for the following styles:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Text styles (bold, dimmed, fontSize, lineHeight, textAlign, overflow, caps)"),Object(a.b)("li",{parentName:"ul"},"Display (block, inline, inline-block)"),Object(a.b)("li",{parentName:"ul"},"Margin and padding")),Object(a.b)("p",null,"In addition to the ",Object(a.b)("inlineCode",{parentName:"p"},"fontSize")," and ",Object(a.b)("inlineCode",{parentName:"p"},"textAlign")," props, this component also supports the shorthands ",Object(a.b)("inlineCode",{parentName:"p"},"size")," and ",Object(a.b)("inlineCode",{parentName:"p"},"align"),"."),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)(b.c,{mdxType:"Playground"},Object(a.b)(p.a,{as:"h1",size:"xl",lineHeight:1.3,mdxType:"Text"},Object(a.b)("p",null,"Extra-large text with a smaller line height")),Object(a.b)(p.a,{dimmed:!0,as:"p",mdxType:"Text"},Object(a.b)("p",null,"A dimmed subtitle with a"," ","\n",Object(a.b)(p.a,{bold:!0,dimmed:!1,mdxType:"Text"},"non-dimmed segment\n"))),Object(a.b)(p.a,{bold:!0,as:"p",mt:"m",mdxType:"Text"},Object(a.b)("p",null,"Bold text with some nested ",Object(a.b)(p.a,{bold:!1,mdxType:"Text"},"non-bold")," text")),Object(a.b)(p.a,{as:"p",caps:"all",mt:"m",mdxType:"Text"},Object(a.b)("p",null,"this text is all-lowercase, but displays in uppercase")),Object(a.b)(p.a,{as:"p",caps:"first",mdxType:"Text"},Object(a.b)("p",null,"this text is all-lowercase, but is displayed in title-case"," ","\n",Object(a.b)(p.a,{caps:"none",mdxType:"Text"},"(unless overwritten)"))),Object(a.b)(p.a,{as:"p",overflow:"wrap",mt:"m",mdxType:"Text"},Object(a.b)("p",null,"OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.")),Object(a.b)(p.a,{display:"block",overflow:"ellipsis",mt:"m",mdxType:"Text"},Object(a.b)("p",null,"An overflow value of 'ellipsis' will prevent line-breaks and cut off\noverflowing text with an ellipsis (â€¦). This only works with\n\"block-level\" elements (e.g. div, p). If you want to use it with a\nnon-block element like ",Object(a.b)("inlineCode",{parentName:"p"},"span"),", set the ",Object(a.b)("inlineCode",{parentName:"p"},"display")," prop to 'block'."))),Object(a.b)("h2",{id:"props"},"Props"),Object(a.b)(b.d,{of:p.a,mdxType:"Props"}))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Text/README.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-text-readme-mdx-081dc01e9777a40f07ae.js.map