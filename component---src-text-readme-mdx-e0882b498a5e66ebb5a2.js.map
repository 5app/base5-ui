{"version":3,"sources":["webpack:///../src/Text/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","as","size","lineHeight","dimmed","bold","mt","caps","overflow","display","of","Text","isMDXComponent"],"mappings":"kRAQaA,G,UAAe,S,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,QADR,QAGA,qBAAG,yBAAgB,CACf,WAAc,KADf,QAAH,mGAIA,sBAEE,iBAAQ,CACN,WAAc,MADhB,+EAKA,iBAAQ,CACN,WAAc,MADhB,yCAKA,iBAAQ,CACN,WAAc,MADhB,uBAKF,2CACE,yBAAgB,CACd,WAAc,KADhB,YADF,QAKE,yBAAgB,CACd,WAAc,KADhB,aALF,uDASE,yBAAgB,CACd,WAAc,KADhB,QATF,QAaE,yBAAgB,CACd,WAAc,KADhB,SAbF,KAiBA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAMC,GAAG,KAAKC,KAAK,KAAKC,WAAY,IAAKH,QAAQ,QAC/C,qEAEF,YAAC,IAAD,CAAMI,QAAM,EAACH,GAAG,IAAID,QAAQ,QAC1B,gDACG,IADH,KAIE,YAAC,IAAD,CAAMK,MAAI,EAACD,QAAQ,EAAOJ,QAAQ,QAAlC,0BAGJ,YAAC,IAAD,CAAMK,MAAI,EAACJ,GAAG,IAAIK,GAAG,IAAIN,QAAQ,QAC/B,mDACE,YAAC,IAAD,CAAMK,MAAM,EAAOL,QAAQ,QAA3B,YADF,UAIF,YAAC,IAAD,CAAMC,GAAG,IAAIM,KAAK,MAAMD,GAAG,IAAIN,QAAQ,QACrC,+EAEF,YAAC,IAAD,CAAMC,GAAG,IAAIM,KAAK,QAAQP,QAAQ,QAChC,kFACG,IADH,KAIE,YAAC,IAAD,CAAMO,KAAK,OAAOP,QAAQ,QAA1B,0BAEJ,YAAC,IAAD,CAAMC,GAAG,IAAIO,SAAS,OAAOF,GAAG,IAAIN,QAAQ,QAC1C,+KAEF,YAAC,IAAD,CAAMS,QAAQ,QAAQD,SAAS,WAAWF,GAAG,IAAIN,QAAQ,QACvD,wPAIE,yBAAgB,CACd,WAAc,KADhB,QAJF,aAQE,yBAAgB,CACd,WAAc,KADhB,WARF,uBAcJ,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOU,GAAIC,IAAMX,QAAQ,gB,mMAK7BH,EAAWe,gBAAiB","file":"component---src-text-readme-mdx-e0882b498a5e66ebb5a2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Text from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h1>\n    <p><inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`Text`}</inlineCode>\n      {` is a helper component for formatting text. It supports styling props for the following styles:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Text styles (bold, dimmed, fontSize, lineHeight, textAlign, overflow, caps)`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Display (block, inline, inline-block)`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Margin and padding`}</li>\n\n    </ul>\n    <p>{`In addition to the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`fontSize`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`textAlign`}</inlineCode>\n      {` props, this component also supports the shorthands `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`size`}</inlineCode>\n      {` and `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`align`}</inlineCode>\n      {`.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground mdxType=\"Playground\">\n      <Text as=\"h1\" size=\"xl\" lineHeight={1.3} mdxType=\"Text\">\n        <p>{`Extra-large text with a smaller line height`}</p>\n      </Text>\n      <Text dimmed as=\"p\" mdxType=\"Text\">\n        <p>{`A dimmed subtitle with a`}\n          {' '}\n          {`\n`}\n          <Text bold dimmed={false} mdxType=\"Text\">{`non-dimmed segment\n`}</Text></p>\n      </Text>\n      <Text bold as=\"p\" mt=\"m\" mdxType=\"Text\">\n        <p>{`Bold text with some nested `}\n          <Text bold={false} mdxType=\"Text\">{`non-bold`}</Text>\n          {` text`}</p>\n      </Text>\n      <Text as=\"p\" caps=\"all\" mt=\"m\" mdxType=\"Text\">\n        <p>{`this text is all-lowercase, but displays in uppercase`}</p>\n      </Text>\n      <Text as=\"p\" caps=\"first\" mdxType=\"Text\">\n        <p>{`this text is all-lowercase, but is displayed in title-case`}\n          {' '}\n          {`\n`}\n          <Text caps=\"none\" mdxType=\"Text\">{`(unless overwritten)`}</Text></p>\n      </Text>\n      <Text as=\"p\" overflow=\"wrap\" mt=\"m\" mdxType=\"Text\">\n        <p>{`OverflowWrapWillMakeLongWordsWithNoSpacesForExampleUrlsBreakIntoANewLineInsteadOfGoingOnAndBreakingOutOfTheirContainerWhichUsuallyDoesntLookVeryGood.`}</p>\n      </Text>\n      <Text display=\"block\" overflow=\"ellipsis\" mt=\"m\" mdxType=\"Text\">\n        <p>{`An overflow value of 'ellipsis' will prevent line-breaks and cut off\noverflowing text with an ellipsis (â€¦). This only works with\n\"block-level\" elements (e.g. div, p). If you want to use it with a\nnon-block element like `}\n          <inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`span`}</inlineCode>\n          {`, set the `}\n          <inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`display`}</inlineCode>\n          {` prop to 'block'.`}</p>\n      </Text>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Text} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}