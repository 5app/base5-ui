(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{"EU4/":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return f}));var a=n("Fcif"),i=n("+I+c"),o=(n("mXGw"),n("/FXl")),r=n("TjRS"),u=(n("ZFoC"),n("aD51"),{});void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useReturnToInitEffect/README.mdx"}});var c={_frontmatter:u},s=r.a;function f(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(s,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"usereturntoiniteffect"},"useReturnToInitEffect"),Object(o.b)("p",null,"A custom hook for those weird times when you need to run an effect only after a condition has ",Object(o.b)("em",{parentName:"p"},"returned")," to its original value."),Object(o.b)("p",null,"Some people use a ",Object(o.b)("inlineCode",{parentName:"p"},"usePreviousState")," hook for that, but I find this hook to be a bit more declarative:\nYou just pass your callback and a value. The callback will not be run initially, but only after the value has changed and then returned to its original value."),Object(o.b)("p",null,"Note that unlike the regular ",Object(o.b)("inlineCode",{parentName:"p"},"useEffect")," hook, ",Object(o.b)("inlineCode",{parentName:"p"},"useReturnToInitEffect"),' only accepts a single "dependency" which is not wrapped in an array.'),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import useReturnToInitEffect from 'base5-ui/useReturnToInitEffect';\n\nfunction Comment({data}) {\n    const [isEditing, setIsEditing] = useState(false);\n    const editButtonRef = useRef();\n\n    useReturnToInitEffect(() => {\n        // Focus the edit button when exiting edit mode\n        editButtonRef.current?.focus();\n    }, isEditing);\n\n    if (isEditing) {\n        return (\n            <EditComment data={data} onSubmit={() => setIsEditing(false)} />\n        )\n    }\n\n    return (\n        <Comment data={data} onEdit={() => setIsEditing(true)}>\n    );\n}\n")))}void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useReturnToInitEffect/README.mdx"}}),f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-return-to-init-effect-readme-mdx-70c4a500d8d5d7cb0997.js.map