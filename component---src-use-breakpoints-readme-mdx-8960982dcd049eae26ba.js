(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{avoD:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return b}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var r=t("/FXl"),a=t("TjRS");t("ZFoC"),t("aD51");function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useBreakpoints/README.mdx"}});var s={_frontmatter:i},p=a.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(p,o({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"usebreakpoints"},"useBreakpoints"),Object(r.b)("p",null,"A hook that returns an object containing the state of the current theme's media query breakpoints.\nThis can be useful when you need to render different markup depending on the user's screen width."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"const {m, xl} = useBreakpoints();\n\nconsole.log(m, xl); // e.g. true, false\n")),Object(r.b)("p",null,'The breakpoint states are resolved using "mobile-first" ',Object(r.b)("inlineCode",{parentName:"p"},"min-width")," queries, i.e. they are reported as matching (",Object(r.b)("inlineCode",{parentName:"p"},"true"),") when the viewport width is ",Object(r.b)("strong",{parentName:"p"},"wider")," than the breakpoint."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Word of warning:")," Due to its reliance on client-side JS, this hook is not compatible with server-side rendering."),Object(r.b)("h2",{id:"features"},"Features"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Choose your own breakpoints and breakpoint names"),Object(r.b)("li",{parentName:"ul"},"Works without resize event listeners (It uses the ",Object(r.b)("inlineCode",{parentName:"li"},"window.matchMedia")," API)"),Object(r.b)("li",{parentName:"ul"},"Keeps track of Media Query state in a single place, minimising the number of Media Query change listeners on the page")),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"In order to use the ",Object(r.b)("inlineCode",{parentName:"p"},"useBreakpoints")," hook, wrap your React app with the ",Object(r.b)("inlineCode",{parentName:"p"},"BreakpointsProvider")," component and initialise it with a configuration object that contains the widths of your breakpoints."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import {BreakpointsProvider} from 'base5-ui/useBreakpoints';\n...\nconst myBreakpoints = {\n    smol: '360px',\n    medium: '480px',\n    largo: '840px',\n};\n\nfunction MyApp() {\n    return (\n        <BreakpointsProvider breakpoints={myBreakpoints}>\n            <App />\n        </BreakpointsProvider>\n    )\n}\n")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"Once your app has been set up as described above, the ",Object(r.b)("inlineCode",{parentName:"p"},"useBreakpoints")," hook is ready to be used."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import useBreakpoints from 'base5-ui/useBreakpoints';\n\n...\n\nfunction Component() {\n    const {smol, medium, largo} = useBreakpoints();\n\n    return (\n        <nav>\n            {medium ? (\n                <DesktopMenu />\n            ) : (\n                <MobileMenu />\n            )}\n        </nav>\n    )\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Tip:")," Rename your breakpoints while destructuring for a more readable variable:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"const {medium: isDesktop} = useBreakpoints();\n")),Object(r.b)("h2",{id:"getting-the-current-breakpoint"},"Getting the current breakpoint"),Object(r.b)("p",null,"If you need to read the currently active breakpoint, you need to provide the hook with an array of the breakpoint names you're interested in, ordered from smallest to largest."),Object(r.b)("p",null,"The hook will then return the name of the largest matching breakpoint under the ",Object(r.b)("inlineCode",{parentName:"p"},"currentBreakpoint")," key."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"    const {currentBreakpoint} = useBreakpoints(['smol', 'largo']);\n\n    return (\n        <p>\n            The current breakpoint is {currentBreakpoint}!\n        </p>\n    )\n}\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useBreakpoints/README.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-breakpoints-readme-mdx-8960982dcd049eae26ba.js.map