(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{pMrV:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n("Fcif"),r=n("+I+c"),l=(n("mXGw"),n("/FXl")),o=n("TjRS"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/useEventListener/README.mdx"}});var s={_frontmatter:c},i=o.a;function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)(i,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"useeventlistener"},"useEventListener"),Object(l.b)("p",null,"A simple hook that adds a global event listener & cleans up after it when the component unmounts."),Object(l.b)("p",null,"An options object can be added as a third parameter. Available options are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"targetElement"),": Add the event listener to a custom target element. Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"document"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"capture"),": Use this for capturing events that don't bubble, e.g. to react to focus events within an element. (See ",Object(l.b)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",parentName:"li"},"addEventListener docs on MDN"),")")),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)("pre",null,Object(l.b)("code",{className:"language-js",parentName:"pre"},"useEventListener('click', onBodyClick);\n")),Object(l.b)("pre",null,Object(l.b)("code",{className:"language-js",parentName:"pre"},"useEventListener('scroll', onScroll, {\n    targetElement: scrollContainerRef.current,\n});\n")),Object(l.b)("pre",null,Object(l.b)("code",{className:"language-js",parentName:"pre"},"useEventListener('focus', onFocus, {\n    capture: true,\n});\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/useEventListener/README.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-use-event-listener-readme-mdx-563d77f7a913a1f79acc.js.map