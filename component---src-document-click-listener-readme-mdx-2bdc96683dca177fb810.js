(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{HKRM:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return d}));var o=n("Fcif"),c=n("+I+c"),a=(n("mXGw"),n("/FXl")),i=n("TjRS"),s=n("ZFoC"),l=n("7DY4"),r=n("CRV5"),u=(n("aD51"),{});void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/DocumentClickListener/README.mdx"}});var p={_frontmatter:u},m=i.a;function d(e){var t,n=e.components,d=Object(c.a)(e,["components"]);return Object(a.b)(m,Object(o.a)({},p,d,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"documentclicklistener"},"DocumentClickListener"),Object(a.b)("p",null,"A helper component that does not render any elements, but sets up a click listener on the body.\nIf you want to ignore clicks on a certain element, you can pass in the ref of that element using the ",Object(a.b)("inlineCode",{parentName:"p"},"excludedElementRef")," prop."),Object(a.b)("p",null,"This is a thin component wrapper around the ",Object(a.b)("inlineCode",{parentName:"p"},"useOnClickOutside")," hook that's especially useful for tooltips and dropdown menus."),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("p",null,'The below example shows how to use this component and also demonstrates why this is a component and not just a hook: Due to the "',Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-rules.html"}),"rules of hooks"),"\", it's not possible to conditionally call a hook, while it's very easy to conditionally render a component."),Object(a.b)(s.c,{__position:0,__code:"<Example />",__scope:(t={props:d,DefaultLayout:i.a,Playground:s.c,Props:s.d,DocumentClickListener:l.a,Example:r.a},t.DefaultLayout=i.a,t._frontmatter=u,t),mdxType:"Playground"},Object(a.b)(r.a,{mdxType:"Example"})),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'function DocumentClickExample() {\n    const [count, setCount] = useState(0);\n    const [isActive, setActive] = useState(true);\n    const excludedElement = useRef(null);\n    return (\n        <>\n            <h1>Document clicks: {count}</h1>\n            <Box ref={excludedElement} p="m" border="dashed">\n                Clicks inside this box will be ignored.\n            </Box>\n            {isActive && (\n                <DocumentClickListener\n                    onClick={() => setCount(count + 1)}\n                    excludedElementRef={excludedElement}\n                />\n            )}\n            <Box mt="m">\n                <Switch\n                    checked={isActive}\n                    onChange={() => setActive(prevActive => !prevActive)}\n                    id="switch"\n                />{\' \'}\n                <label htmlFor="switch">Count clicks</label>\n            </Box>\n        </>\n    );\n}\n')),Object(a.b)("h2",{id:"props"},"Props"),Object(a.b)(s.d,{of:l.a,mdxType:"Props"}))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/DocumentClickListener/README.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-document-click-listener-readme-mdx-2bdc96683dca177fb810.js.map