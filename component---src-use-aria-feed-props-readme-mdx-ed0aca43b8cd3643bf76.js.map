{"version":3,"sources":["webpack:///../src/useAriaFeedProps/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6fAOO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,0DAAyC,mBAAGC,WAAW,KAAQ,CAC3D,KAAQ,uDAD6B,2BAAzC,KAGA,uFACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,0CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAApB,4JAGF,iBAAQ,CACN,GAAM,iBADR,iBAGA,mCAAkB,0BAAYA,WAAW,KAAvB,oBAAlB,kCAAiH,0BAAYA,WAAW,KAAvB,aAAjH,+CAAsN,0BAAYA,WAAW,KAAvB,kBAAtN,iBACA,6CAA4B,mBAAGA,WAAW,KAAQ,CAC9C,KAAQ,yFADgB,gBAA5B,mFAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,w+B,+MAoCTJ,EAAWK,gBAAiB","file":"component---src-use-aria-feed-props-readme-mdx-ed0aca43b8cd3643bf76.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useariafeedprops\"\n    }}>{`useAriaFeedProps`}</h1>\n    <p>{`A React hook for implementing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.1/#feed\"\n      }}>{`WAI-ARIA 'Feed' pattern`}</a>{`.`}</p>\n    <p>{`Supports the keyboard shortcuts recommended in the references:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Page up/down`}</inlineCode>{` to navigate to the previous/next item`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Ctrl + Home/End`}</inlineCode>{` to navigate to the first/last item\n(To do: Provide a way to pass in refs to first focusable elements before and after the feed & focus those instead)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h2>\n    <p>{`Initialise `}<inlineCode parentName=\"p\">{`useAriaFeedProps`}</inlineCode>{` with an object containing the `}<inlineCode parentName=\"p\">{`isLoading`}</inlineCode>{` state of your feed, and, if available, the `}<inlineCode parentName=\"p\">{`totalItemCount`}</inlineCode>{` of the feed.`}</p>\n    <p>{`The hook returns two `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/how-to-give-rendering-control-to-users-with-prop-getters\"\n      }}>{`prop getters`}</a>{` that have to be spread onto the wrapper of the feed and each item ('article').`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const {getWrapperProps, getItemProps} = useAriaFeedProps({\n    isLoading: hasMoreItems,\n    totalItemCount,\n});\n\nreturn (\n    <>\n        <h1 id={HEADING_ID}>My thrilling feed</h1>\n        <div {...getWrapperProps({labelledBy: HEADING_ID})}>\n            {items.map((item, index) => {\n                const ITEM_HEADING_ID = \\`\\${item.id}-title\\`;\n                const ITEM_DESC_ID = \\`\\${item.id}-description\\`;\n                return (\n                    <article\n                        key={item.id}\n                        {...getItemProps({\n                            index,\n                            labelledBy: ITEM_HEADING_ID,\n                            describedBy: ITEM_HEADING_ID,\n                        })}\n                    >\n                        <h2 id={ITEM_HEADING_ID}>{item.name}</h2>\n                        <p id={ITEM_DESC_ID}>{item.desc}</p>\n                    </article>\n                );\n            })}\n        </div>\n    </>\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}