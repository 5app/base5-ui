{"version":3,"sources":["webpack:///../src/DocumentClickListener/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","DocumentClickListener","Example","of","isMDXComponent"],"mappings":"uhBASO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,8NACmG,0BAAYC,WAAW,KAAvB,sBADnG,UAEA,oEAAmD,0BAAYA,WAAW,KAAvB,qBAAnD,mEACA,iBAAQ,CACN,GAAM,YADR,YAGA,yJAAwI,mBAAGA,WAAW,KAAQ,CAC1J,KAAQ,8CAD4H,kBAAxI,iHAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,cAAeC,SAAO,GACvDL,QACAH,kBACAS,eACAC,UACAC,0BACAC,aANuD,gBAOvDZ,IAPuD,EAQvDH,eARuD,GAStDO,QAAQ,cACd,YAAC,IAAD,CAASA,QAAQ,aAEd,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,86BA8BL,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOQ,GAAIF,IAAuBP,QAAQ,gB,oNAK9CH,EAAWa,gBAAiB","file":"component---src-document-click-listener-readme-mdx-7b8b937ba40ba6cda4be.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport DocumentClickListener from './';\nimport Example from './Example';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"documentclicklistener\"\n    }}>{`DocumentClickListener`}</h1>\n    <p>{`A helper component that does not render any elements, but sets up a click listener on the body.\nIf you want to ignore clicks on a certain element, you can pass in the ref of that element using the `}<inlineCode parentName=\"p\">{`excludedElementRef`}</inlineCode>{` prop.`}</p>\n    <p>{`This is a thin component wrapper around the `}<inlineCode parentName=\"p\">{`useOnClickOutside`}</inlineCode>{` hook that's especially useful for tooltips and dropdown menus.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The below example shows how to use this component and also demonstrates why this is a component and not just a hook: Due to the \"`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-rules.html\"\n      }}>{`rules of hooks`}</a>{`\", it's not possible to conditionally call a hook, while it's very easy to conditionally render a component.`}</p>\n    <Playground __position={0} __code={'<Example />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DocumentClickListener,\n      Example,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n\t<Example mdxType=\"Example\" />\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function DocumentClickExample() {\n    const [count, setCount] = useState(0);\n    const [isActive, setActive] = useState(true);\n    const excludedElement = useRef(null);\n    return (\n        <>\n            <h1>Document clicks: {count}</h1>\n            <Box ref={excludedElement} p=\"m\" border=\"dashed\">\n                Clicks inside this box will be ignored.\n            </Box>\n            {isActive && (\n                <DocumentClickListener\n                    onClick={() => setCount(count + 1)}\n                    excludedElementRef={excludedElement}\n                />\n            )}\n            <Box mt=\"m\">\n                <Switch\n                    checked={isActive}\n                    onChange={() => setActive(prevActive => !prevActive)}\n                    id=\"switch\"\n                />{' '}\n                <label htmlFor=\"switch\">Count clicks</label>\n            </Box>\n        </>\n    );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={DocumentClickListener} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}