{"version":3,"sources":["webpack:///../src/CenterContent/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","background","mb","height","vAlign","position","width","border","overflow","fillParent","spacing","of","CenterContent","isMDXComponent"],"mappings":"0SAUaA,G,UAAe,S,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,gCACE,yBAAgB,CACd,WAAc,KADhB,iBADF,uGAKA,iBAAQ,CACN,GAAM,eADR,eAGA,0DACE,yBAAgB,CACd,WAAc,KADhB,OADF,yMAKA,gCACE,yBAAgB,CACd,WAAc,KADhB,UADF,gJAKA,2EACE,yBAAgB,CACd,WAAc,KADhB,cADF,+JAKE,yBAAgB,CACd,WAAc,KADhB,UALF,KASE,yBAAgB,CACd,WAAc,KADhB,YATF,KAaE,yBAAgB,CACd,WAAc,KADhB,YAbF,QAiBE,yBAAgB,CACd,WAAc,KADhB,SAjBF,iCAqBE,yBAAgB,CACd,WAAc,KADhB,oBArBF,wDAyBA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYA,QAAQ,cAClB,YAAC,IAAD,CAAKC,WAAW,SAASC,GAAG,IAAIF,QAAQ,OACtC,YAAC,IAAD,CAAeG,OAAQ,IAAKH,QAAQ,iBAClC,qBAAG,YAAC,UAAD,CAAaI,QAAM,EAACJ,QAAQ,gBAA/B,YAIJ,YAAC,IAAD,CAAKK,SAAS,WAAWC,MAAO,IAAKH,OAAQ,IAAKI,OAAO,OAAOC,SAAS,OAAOR,QAAQ,OACtF,YAAC,IAAD,CAAeS,YAAU,EAACC,QAAQ,IAAIV,QAAQ,iBAC5C,sGACE,uBADF,kBAIE,uBAJF,kBAOE,uBAPF,kBAUE,uBAVF,qDAgBN,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOW,GAAIC,IAAeZ,QAAQ,gB,4MAKtCH,EAAWgB,gBAAiB","file":"component---src-center-content-readme-mdx-0268784dc076dd327093.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/repo/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport CenterContent from './';\nimport Box from '../Box';\nimport PodcastIcon from '../icons/AssetPodcast';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"centercontent\"\n    }}>{`CenterContent`}</h1>\n    <p>{`Use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`CenterContent`}</inlineCode>\n      {` component to center arbitrarily sized content horizontally and vertically inside of its container.`}</p>\n    <h2 {...{\n      \"id\": \"usage-notes\"\n    }}>{`Usage notes`}</h2>\n    <p>{`The component renders two wrapper `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`div`}</inlineCode>\n      {`s and is meant to be used for large components with an unpredictable height (e.g. modal popups or headlines in a banner). Don't use it for centering an icon within a circle or text within a button.`}</p>\n    <p>{`Use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`height`}</inlineCode>\n      {` prop to define a minimum height for the component. If the content is taller than the height specified, the component will grow accordingly.`}</p>\n    <p>{`Instead of defining a height, you can also use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`fillParent`}</inlineCode>\n      {` prop which will make the component grow to match the width and height of its container. When using this, make sure the container has a position other than `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`static`}</inlineCode>\n      {` (`}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`relative`}</inlineCode>\n      {`, `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`absolute`}</inlineCode>\n      {`, or `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`fixed`}</inlineCode>\n      {` all work), and is not set to `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`overflow: hidden`}</inlineCode>\n      {` as that could lead to longer content being cut off.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground mdxType=\"Playground\">\n      <Box background=\"shaded\" mb=\"m\" mdxType=\"Box\">\n        <CenterContent height={350} mdxType=\"CenterContent\">\n          <p><PodcastIcon vAlign mdxType=\"PodcastIcon\" />\n            {` Hello`}</p>\n        </CenterContent>\n      </Box>\n      <Box position=\"relative\" width={200} height={200} border=\"thin\" overflow=\"auto\" mdxType=\"Box\">\n        <CenterContent fillParent spacing=\"s\" mdxType=\"CenterContent\">\n          <p>{`This text is centred in its little square container, but if it gets too looooo`}\n            <br />\n            {`\nooooooooooooo`}\n            <br />\n            {`\nooooooooooooo`}\n            <br />\n            {`\noooooooooong,`}\n            <br />\n            {`\nit just makes it grow with no cut-off edges.`}</p>\n        </CenterContent>\n      </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={CenterContent} mdxType=\"Props\" />\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}