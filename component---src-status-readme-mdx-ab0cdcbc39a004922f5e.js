(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{F3iY:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return m}));var a=n("Fcif"),o=n("+I+c"),r=n("mXGw"),i=n("/FXl"),s=n("TjRS"),c=n("ZFoC"),l=n("hTy3"),u=n("nraw"),b=(n("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Status/README.mdx"}});var p={_frontmatter:b},d=s.a;function m(e){var t,n=e.components,m=Object(o.a)(e,["components"]);return Object(i.b)(d,Object(a.a)({},p,m,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"status"},"Status"),Object(i.b)("p",null,"Any changes to the textual content of this component are reported to users of screen readers. It's equivalent to a div with the following props:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<div role="status" aria-live="polite" aria-relevant="additions text" />\n')),Object(i.b)("p",null,"Setting ",Object(i.b)("inlineCode",{parentName:"p"},'<Status role="alert" />')," will set ",Object(i.b)("inlineCode",{parentName:"p"},'aria-live="assertive"')," for you, mirroring the default ",Object(i.b)("inlineCode",{parentName:"p"},"aria-live")," alert behaviour when none is defined. However, all props can be overridden."),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)(c.c,{__position:0,__code:"() => {\n  const [showConfirmation, setShowConfirmation] = React.useState(false)\n  return (\n    <>\n      <Button\n        isActive={showConfirmation}\n        onClick={() => setShowConfirmation(v => !v)}\n      >\n        Click me\n      </Button>\n      <Status>\n        {showConfirmation &&\n          'Congrats, you have clicked the button! This message will be read out by screen readers.'}\n      </Status>\n    </>\n  )\n}",__scope:(t={props:m,DefaultLayout:s.a,Playground:c.c,Props:c.d,Status:l.a,Button:u.a},t.DefaultLayout=s.a,t._frontmatter=b,t),mdxType:"Playground"},(function(){var e=r.useState(!1),t=e[0],n=e[1];return Object(i.b)(r.Fragment,null,Object(i.b)(u.a,{isActive:t,onClick:function(){return n((function(e){return!e}))},mdxType:"Button"},"Click me"),Object(i.b)(l.a,{mdxType:"Status"},t&&"Congrats, you have clicked the button! This message will be read out by screen readers."))})),Object(i.b)("h2",{id:"usage-note"},"Usage note"),Object(i.b)("p",null,"Make sure that the ",Object(i.b)("inlineCode",{parentName:"p"},"Status")," component is always rendered – even when it's empty – before you update its contents. If the element is added alongside its content, screen readers will ",Object(i.b)("strong",{parentName:"p"},"not")," announce it!"),Object(i.b)("p",null,"The example below would not work:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"{\n    showConfirmation && <Status>This status will NOT BE announced :(</Status>;\n}\n")),Object(i.b)("h2",{id:"props"},"Props"),Object(i.b)(c.d,{of:l.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Status/README.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-status-readme-mdx-ab0cdcbc39a004922f5e.js.map